---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 125","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.1.1), Ruby (2.7.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Sat, 09 Oct 2021 16:54:04 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Sat, 09 Oct 2021 16:54:04 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/07/28/72849.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=DEB35E8763070B21D55CA2CA15C244A8; Path=/; Secure; HttpOnly
      Location:
      - "/standard/72849.html"
      Content-Length:
      - '0'
      Date:
      - Sat, 09 Oct 2021 16:54:06 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Sat, 09 Oct 2021 16:54:07 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/72849.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=174BFA5EF2E419DDEF1D30B00F39C57D; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Sat, 09 Oct 2021 16:54:08 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CgoKPGh0bWwgbGFuZz0iZW4iPgogIDxoZWFkPgogICAgCiAgICA8c2NyaXB0PgogICAgICBkYXRhTGF5ZXIgPSBbewogICAgICAgICdwYWdlVHlwZSc6ICdpdHM6c3RhbmRhcmQnLAogICAgICAgICdwYWdlTGFuZ3VhZ2UnOiAnZW4nCiAgICAgIH1dOwogICAgPC9zY3JpcHQ+CgogICAgPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CiAgICA8c2NyaXB0PihmdW5jdGlvbih3LGQscyxsLGkpe3dbbF09d1tsXXx8W107d1tsXS5wdXNoKHsnZ3RtLnN0YXJ0JzoKICAgICAgICBuZXcgRGF0ZSgpLmdldFRpbWUoKSxldmVudDonZ3RtLmpzJ30pO3ZhciBmPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0sCiAgICAgIGo9ZC5jcmVhdGVFbGVtZW50KHMpLGRsPWwhPSdkYXRhTGF5ZXInPycmbD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPQogICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RtLmpzP2lkPScraStkbDtmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosZik7CiAgICB9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJ2RhdGFMYXllcicsJ0dUTS1URkdLUVFCJyk7PC9zY3JpcHQ+CiAgICA8IS0tIEVuZCBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIj4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+CiAgICA8dGl0bGU+SVNPIC0gSVNPIDEyNToyMDIwIC0gTmF0dXJhbCBydWJiZXIgbGF0ZXggY29uY2VudHJhdGUg4oCUIERldGVybWluYXRpb24gb2YgYWxrYWxpbml0eTwvdGl0bGU+CgogICAgCiAgICAgIDwhLS0KICAgICAgPGxpbmsgcmVsPSJwcmVjb25uZWN0IiBocmVmPSJodHRwczovL2Nkbi5pc28ub3JnLyIgY3Jvc3NvcmlnaW4gLz4KICAgICAgPGxpbmsgcmVsPSJwcmVsb2FkIiBhcz0ic2NyaXB0IiBocmVmPSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy93b29kLzMuMy41L3dvb2QuZnVsbC5taW4uanMiIGNyb3Nzb3JpZ2luIC8+CiAgICAgIDxsaW5rIHJlbD0icHJlbG9hZCIgYXM9InN0eWxlIiBocmVmPSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy93b29kLzMuMy41L3dvb2QuZnVsbC5taW4uY3NzIiBjcm9zc29yaWdpbiAvPgogICAgICA8bGluayByZWw9InByZWxvYWQiIGFzPSJmb250IiBocmVmPSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy9mb250cy9ib290c3RyYXAvMy4zLjIvZ2x5cGhpY29ucy1oYWxmbGluZ3MtcmVndWxhci53b2ZmMiIgY3Jvc3NvcmlnaW4gLz4KICAgICAgPGxpbmsgcmVsPSJwcmVsb2FkIiBhcz0iZm9udCIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvZm9udHMvbWV0YXdlYnByby83LjUwNC9NZXRhV2ViUHJvLUJvbGQud29mZiIgY3Jvc3NvcmlnaW4gLz4KICAgICAgPGxpbmsgcmVsPSJwcmVsb2FkIiBhcz0iZm9udCIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvZm9udHMvbWV0YXdlYnByby83LjUwNC9NZXRhV2ViUHJvLU5vcm1hbC53b2ZmIiBjcm9zc29yaWdpbiAvPgogICAgICA8bGluayByZWw9InByZWxvYWQiIGFzPSJmb250IiBocmVmPSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy9mb250cy9tZXRhd2VicHJvLzcuNTA0L01ldGFXZWJQcm8tTm9ybWFsSXRhLndvZmYiIGNyb3Nzb3JpZ2luIC8+CiAgICAgIC0tPgoKICAgIAoKICAgIDxsaW5rIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL3d3dy5pc28ub3JnL3N0YW5kYXJkLzcyODQ5Lmh0bWwiIC8+CgogICAgPCEtLSBzdGFydCBmYXZpY29ucyAtLT4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuNS9pbWcvaXNvL2Zhdmljb24vcmVkL2FwcGxlLXRvdWNoLWljb24tMTUyeDE1Mi1wcmVjb21wb3NlZC5wbmciPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy93b29kLzMuMy41L2ltZy9pc28vZmF2aWNvbi9yZWQvZmF2aWNvbi5pY28iPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlQ29sb3IiIGNvbnRlbnQ9IiNlZWUiPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlSW1hZ2UiIGNvbnRlbnQ9Imh0dHBzOi8vY2RuLmlzby5vcmcvcmVzb3VyY2VzL3dvb2QvMy4zLjUvaW1nL2lzby9mYXZpY29uL3JlZC9tc3RpbGUtMTQ0eDE0NC5wbmciPgogICAgPCEtLSBlbmQgZmF2aWNvbnMgLS0+CgogICAgCiAgICA8bWV0YSBuYW1lPSJ0aGVtZS1jb2xvciIgY29udGVudD0iIzMzMyI+CgogIAo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CnZhciBjb250ZXh0SnNQYXJhbWV0ZXJzPXtjb250ZXh0UGF0aDoiIixsYW5nOiJlbiIsdWlsYW5nOiJlbiIsc2l0ZVV1aWQ6IjQzOTE0NmY4LTY3N2UtNGRkZS1iNmM2LWI2OTJiNzUzNGY1MiIsd2NhZzpmYWxzZSxja2VDZmc6IiJ9OyB2YXIgQ0tFRElUT1JfQkFTRVBBVEg9Ii9tb2R1bGVzL2NrZWRpdG9yL2phdmFzY3JpcHQvIjsgdmFyIHNjYXl0X2N1c3RvbV9wYXJhbXM9bmV3IEFycmF5KCk7IHNjYXl0X2N1c3RvbV9wYXJhbXNbJ3NMYW5nJ109J2VuX1VTJzsKPC9zY3JpcHQ+CjxsaW5rIGlkPSJzdGF0aWNBc3NldENTUzAiIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuNS93b29kLmZ1bGwubWluLmNzcyIgbWVkaWE9InNjcmVlbixwcmludCxoYW5kaGVsZCIgdHlwZT0idGV4dC9jc3MiLz4KPGxpbmsgaWQ9InN0YXRpY0Fzc2V0Q1NTMSIgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvbW9kdWxlcy9hc3NldHMvY3NzL2xhbmd1YWdlU3dpdGNoaW5nTGlua3MuY3NzPzE1MzIwMDM1MDU3NjYiIG1lZGlhPSJzY3JlZW4iIHR5cGU9InRleHQvY3NzIi8+CjxsaW5rIGlkPSJzdGF0aWNBc3NldENTUzIiIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL21vZHVsZXMvaXNvLWphaGlhLXNlcnZpY2UtbW9kdWxlL2Nzcy9jYXRhbG9ndWUuY3NzPzE2Mjc0NTczMjEzMTAiIG1lZGlhPSJzY3JlZW4iIHR5cGU9InRleHQvY3NzIi8+CjxzY3JpcHQgaWQ9InN0YXRpY0Fzc2V0SmF2YXNjcmlwdDAiIHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy93b29kLzMuMy41L3dvb2QuZnVsbC5taW4uanMiICA+PC9zY3JpcHQ+CjxzY3JpcHQgaWQ9InN0YXRpY0Fzc2V0SmF2YXNjcmlwdDEiIHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvbW9kdWxlcy9pc28tamFoaWEtc2VydmljZS1tb2R1bGUvamF2YXNjcmlwdC9jYXRhbG9ndWUuanM/MTYyNzQ1NzMyMTMxMCIgID48L3NjcmlwdD4KPHNjcmlwdCBpZD0ic3RhdGljQXNzZXRKYXZhc2NyaXB0MiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9qYXZhc2NyaXB0L2N1c3RvbS5qcz8xNjMwNDkzOTIyMTUzIiAgPjwvc2NyaXB0PgoKICAgIDxtZXRhIG5hbWU9ImNhdGVnb3J5IiBjb250ZW50PSJwIiAvPgogIAogICAgPG1ldGEgbmFtZT0icHViZGF0ZSIgY29udGVudD0iMjAyMDAyMTkiIC8+CiAgCgogIDwhLS0gVHdpdHRlciBDYXJkIGRhdGEgLS0+CiAgPG1ldGEgbmFtZT0idHdpdHRlcjpzaXRlIiBjb250ZW50PSJAaXNvc3RhbmRhcmRzIiAvPgoKICA8IS0tIE9wZW4gR3JhcGggZGF0YSAtLT4KICA8bWV0YSBwcm9wZXJ0eT0ib2c6c2l0ZV9uYW1lIiBjb250ZW50PSJJU08iIC8+CiAgPG1ldGEgcHJvcGVydHk9Im9nOnVybCIgY29udGVudD0iaHR0cHM6Ly93d3cuaXNvLm9yZy9jbXMvcmVuZGVyL2xpdmUvZW4vc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDcvMjgvNzI4NDkuaHRtbCIgLz4KICAKICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0eXBlIiBjb250ZW50PSJ3ZWJzaXRlIiAvPgogIAogICAgPCEtLSBUaHVtYm5haWwgaW1hZ2UgKGZvciB0d2l0dGVyIGFuZCBPcGVuIEdyYXBoKSAtLT4KICAgIDxtZXRhIG5hbWU9InRodW1ibmFpbCIgY29udGVudD0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuMy9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIgLz4KICAgIDxtZXRhIG5hbWU9InR3aXR0ZXI6Y2FyZCIgY29udGVudD0ic3VtbWFyeSIgLz4KICAgIDxtZXRhIG5hbWU9InR3aXR0ZXI6aW1hZ2UiIGNvbnRlbnQ9Imh0dHBzOi8vY2RuLmlzby5vcmcvcmVzb3VyY2VzL3dvb2QvMy4zLjMvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiIGNvbnRlbnQ9Imh0dHBzOi8vY2RuLmlzby5vcmcvcmVzb3VyY2VzL3dvb2QvMy4zLjMvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2U6YWx0IiBjb250ZW50PSJJU08gbG9nbyIgLz4KICAKICAgIDwhLS0gVGl0bGUgKGZvciB0d2l0dGVyIGFuZCBPcGVuIEdyYXBoKSAtLT4KICAgIDxtZXRhIG5hbWU9InR3aXR0ZXI6dGl0bGUiIGNvbnRlbnQ9IklTTyAxMjU6MjAyMCIgLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0aXRsZSIgY29udGVudD0iSVNPIDEyNToyMDIwIiAvPgogIAogICAgPCEtLSBEZXNjcmlwdGlvbiAoZm9yIGdvb2dsZSwgdHdpdHRlciBhbmQgT3BlbiBHcmFwaCkgLS0+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOmRlc2NyaXB0aW9uIiBjb250ZW50PSJOYXR1cmFsIHJ1YmJlciBsYXRleCBjb25jZW50cmF0ZSDigJQgRGV0ZXJtaW5hdGlvbiBvZiBhbGthbGluaXR5IiAvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmRlc2NyaXB0aW9uIiBjb250ZW50PSJOYXR1cmFsIHJ1YmJlciBsYXRleCBjb25jZW50cmF0ZSDigJQgRGV0ZXJtaW5hdGlvbiBvZiBhbGthbGluaXR5IiAvPgogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9Ik5hdHVyYWwgcnViYmVyIGxhdGV4IGNvbmNlbnRyYXRlIOKAlCBEZXRlcm1pbmF0aW9uIG9mIGFsa2FsaW5pdHkiIC8+CiAgCgogIDwhLS0gRmFjZWJvb2sgYWRtaW5zIDogTGlvbmVsLE1hcmlhIC0tPgogIDxtZXRhIHByb3BlcnR5PSJmYjphZG1pbnMiIGNvbnRlbnQ9IjEwMDAwMTExNjA3OTY3NiwxMDAwMDE0NDAwMDMzMDUiIC8+CgogIAoKPC9oZWFkPgogIDxib2R5IGNsYXNzPSJ0aGVtZS1yZWQiIGlkPSJvZmZjYW52YXMtY29udGVudCI+CiAgICA8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAobm9zY3JpcHQpIC0tPgogICAgPG5vc2NyaXB0IGFyaWEtaGlkZGVuPSJ0cnVlIj48aWZyYW1lIHNyYz0iaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vbnMuaHRtbD9pZD1HVE0tVEZHS1FRQiIgaGVpZ2h0PSIwIiB3aWR0aD0iMCIgc3R5bGU9ImRpc3BsYXk6bm9uZTt2aXNpYmlsaXR5OmhpZGRlbiI+PC9pZnJhbWU+PC9ub3NjcmlwdD4KICAgIDwhLS0gRW5kIEdvb2dsZSBUYWcgTWFuYWdlciAobm9zY3JpcHQpIC0tPgogICAgPGEgY2xhc3M9InNraXAtbmF2aWdhdGlvbiBidG4gYnRuLWluZm8gc3Itb25seSBzci1vbmx5LWZvY3VzYWJsZSIgaHJlZj0iI2NvbnRlbnQiPlNraXAgdG8gbWFpbiBjb250ZW50PC9hPgogICAgPCEtLSBIZWFkZXIgSVNPLk9SRyAtLT4KICAgIDxoZWFkZXIgcm9sZT0iYmFubmVyIiBhcmlhLWxhYmVsPSJIZWFkZXIiIGNsYXNzPSJ0aGVtZS1yZWQgaGVhZGVyLWFjZXIgIiBpZD0icGFnZS10b3AiPgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhciBuYXZiYXItaW52ZXJzZSBuYXZiYXItZml4ZWQtdG9wIG5hdmJhci1kZWZhdWx0IG5hdmJhci1hY2VyIHRoZW1lLXJlZCIgZGF0YS1zcHk9ImFmZml4IiBkYXRhLW9mZnNldC10b3A9IjIwMCI+CiAgICAgICAgICA8YnV0dG9uIHJvbGU9ImJ1dHRvbiIgaWQ9Im9mZmNhbnZhcy1idG4iIGNsYXNzPSJidG4gYnRuLXRyYW5zcGFyZW50IHB1bGwtcmlnaHQiIGRhdGEtdG9nZ2xlPSJvcGVuLW9mZmNhbnZhcyI+PHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tbWVudS1oYW1idXJnZXIiPjwvc3Bhbj48c3BhbiBjbGFzcz0iaGlkZGVuLXh4cyI+IE1lbnU8L3NwYW4+PC9idXR0b24+CgogICAgICAgICAgPCEtLSBTSURFIE5BVklHQVRJT04gLS0+CiAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IlNpZGUgTmF2aWdhdGlvbiIgY2xhc3M9InNpZGVuYXYiIGlkPSJvZmZjYW52YXMtcGFuZWwiPjx1bCByb2xlPSJtZW51YmFyIiBjbGFzcz0ibmF2IG5hdmJhci1uYXYgbmF2LWxldmVsMSI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBkcm9wZG93biBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc3RhbmRhcmRzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+U3RhbmRhcmRzPC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0ibmF2IG5hdmJhci1uYXYgbmF2LWxldmVsMiBkcm9wZG93bi1tZW51Ij48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Imhhc0NoaWxkcmVuIGRyb3Bkb3duIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9iZW5lZml0cy1vZi1zdGFuZGFyZHMuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5CZW5lZml0czwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9Im5hdiBuYXZiYXItbmF2IG5hdi1sZXZlbDMgZHJvcGRvd24tbWVudSI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9pc28tYW5kLXNtZXMuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5TTUVzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2lzby1hbmQtY29uc3VtZXJzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+Q29uc3VtZXJzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2lzby1hbmQtcG9saWN5LW1ha2Vycy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPklTTyBhbmQgcG9saWN5IG1ha2VyczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBsYXN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9zdGFuZGFyZHMtaW4tYWN0aW9uLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+U3RhbmRhcmRzIGluIGFjdGlvbjwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9wb3B1bGFyLXN0YW5kYXJkcy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlBvcHVsYXIgc3RhbmRhcmRzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBkcm9wZG93biI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9jb25mb3JtaXR5LWFzc2Vzc21lbnQuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5DZXJ0aWZpY2F0aW9uICYgY29uZm9ybWl0eTwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9Im5hdiBuYXZiYXItbmF2IG5hdi1sZXZlbDMgZHJvcGRvd24tbWVudSI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9jZXJ0aWZpY2F0aW9uLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+Q2VydGlmaWNhdGlvbjwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9jYXNjby5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPkNBU0NPPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3RoZS1pc28tc3VydmV5Lmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+VGhlIElTTyBTdXJ2ZXk8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gbGFzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvcmVzb3VyY2VzLWZvci1jb25mb3JtaXR5LWFzc2Vzc21lbnQuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5SZXNvdXJjZXM8L2E+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gbGFzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc2Rncy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlNER3M8L2E+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Imhhc0NoaWxkcmVuIGRyb3Bkb3duIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2Fib3V0LXVzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+QWJvdXQgdXM8L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBuYXYtbGV2ZWwyIGRyb3Bkb3duLW1lbnUiPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4gZHJvcGRvd24gZmlyc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3doYXQtd2UtZG8uaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5XaGF0IHdlIGRvPC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0ibmF2IG5hdmJhci1uYXYgbmF2LWxldmVsMyBkcm9wZG93bi1tZW51Ij48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gZmlyc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2RldmVsb3Bpbmctc3RhbmRhcmRzLmh0bWwiICBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPkRldmVsb3Bpbmcgc3RhbmRhcmRzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3Jlc2VhcmNoLWFuZC1lZHVjYXRpb24uaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5SZXNlYXJjaDwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9jYXBhY2l0eS1idWlsZGluZy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPkNhcGFjaXR5IGJ1aWxkaW5nPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGxhc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2VkdWNhdGlvbi1hYm91dC1zdGFuZGFyZHMuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5FZHVjYXRpb24gYWJvdXQgc3RhbmRhcmRzPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3N0cnVjdHVyZS5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlN0cnVjdHVyZTwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9tZW1iZXJzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+TWVtYmVyczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9hbm5vdW5jZW1lbnRzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+QW5ub3VuY2VtZW50czwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4gZHJvcGRvd24gbGFzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc3RyYXRlZ3kyMDMwLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+U3RyYXRlZ3k8L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBuYXYtbGV2ZWwzIGRyb3Bkb3duLW1lbnUiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9ob21lL2Fib3V0LXVzL3N0cmF0ZWd5LTIwMzAvZHJpdmVycy1vZi1jaGFuZ2UuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5Ecml2ZXJzIG9mIGNoYW5nZTwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9ob21lL2Fib3V0LXVzL3N0cmF0ZWd5LTIwMzAvb3VyLWdvYWxzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+T3VyIGdvYWxzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2hvbWUvYWJvdXQtdXMvc3RyYXRlZ3ktMjAzMC9wcmlvcml0aWVzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+UHJpb3JpdGllczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBsYXN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9ob21lL2Fib3V0LXVzL3N0cmF0ZWd5LTIwMzAvbWVhc3VyaW5nLXN1Y2Nlc3MuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5NZWFzdXJpbmcgc3VjY2VzczwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4gZHJvcGRvd24iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvbmV3cy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPk5ld3M8L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBuYXYtbGV2ZWwyIGRyb3Bkb3duLW1lbnUiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9ldmVudHMuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5FdmVudHM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvbWVkaWEta2l0Lmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+TWVkaWEga2l0PC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBkcm9wZG93biI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9kZXZlbG9waW5nLXN0YW5kYXJkcy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlRha2luZyBwYXJ0PC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0ibmF2IG5hdmJhci1uYXYgbmF2LWxldmVsMiBkcm9wZG93bi1tZW51Ij48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Imhhc0NoaWxkcmVuIGRyb3Bkb3duIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii93aG8tZGV2ZWxvcHMtc3RhbmRhcmRzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+V2hvIGRldmVsb3BzIHN0YW5kYXJkczwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9Im5hdiBuYXZiYXItbmF2IG5hdi1sZXZlbDMgZHJvcGRvd24tbWVudSI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii90ZWNobmljYWwtY29tbWl0dGVlcy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlRlY2huaWNhbCBDb21taXR0ZWVzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL290aGVyLWJvZGllcy1kZXZlbG9waW5nLXN0YW5kYXJkcy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPk90aGVyIGJvZGllczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBsYXN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9vcmdhbml6YXRpb25zLWluLWNvb3BlcmF0aW9uLXdpdGgtaXNvLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+T3JnYW5pemF0aW9ucyBpbiBjb29wZXJhdGlvbjwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9kZWxpdmVyYWJsZXMtYWxsLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+RGVsaXZlcmFibGVzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2dldC1pbnZvbHZlZC5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPkdldCBpbnZvbHZlZDwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBsYXN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9yZXNvdXJjZXMuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5SZXNvdXJjZXM8L2E+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Imhhc0NoaWxkcmVuIGRyb3Bkb3duIGluUGF0aCBsYXN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9zdG9yZS5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlN0b3JlPC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0ibmF2IG5hdmJhci1uYXYgbmF2LWxldmVsMiBkcm9wZG93bi1tZW51Ij48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gaW5QYXRoIGFjdGl2ZSBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiICBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlN0YW5kYXJkcyBjYXRhbG9ndWU8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvcHVibGljYXRpb24tbGlzdC5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlB1YmxpY2F0aW9ucyBhbmQgcHJvZHVjdHM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gbGFzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSJodHRwczovL3d3dy5pc28ub3JnL29icC91aS8jYWNjb3VudC9wcm9kdWN0cyIgIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPk15IGFjY291bnQ8L2E+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9uYXY+PGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciBvZmZjYW52YXMtcmlnaWQiPgogICAgICAgICAgICA8YSBjbGFzcz0ibG9nbyBpc29sb2dvIiBocmVmPSIvaG9tZS5odG1sIiB0aXRsZT0iSW50ZXJuYXRpb25hbCBPcmdhbml6YXRpb24gZm9yIFN0YW5kYXJkaXphdGlvbiIgYWx0PSJJU08gbG9nbyI+PC9hPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpc29sb2dvLXByaW50Ij48aW1nIHNyYz0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuNS9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIgYWx0PSJJU08gbG9nbyBmb3IgcHJpbnQiLz48L2Rpdj4KCiAgICAgICAgICAgIDx1bCBpZD0idXRpbGl0eU5hdiIgYXJpYS1sYWJlbD0iVXRpbGl0aWVzIE5hdmlnYXRpb24iIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBuYXZiYXItcmlnaHQiPgogICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWdseXBoaWNvbiBuYXYtc2VhcmNoIiBpZD0ibmF2LXNlYXJjaCI+CiAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZXhwYW5kYWJsZSBpc29zZWFyY2giIHJvbGU9InNlYXJjaCI+CiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoaWRkZW4iIGRhdGEtdXJsYmFzZT0iL2Ntcy9yZW5kZXIvbGl2ZS9lbiI+PC9zcGFuPgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaGlkZGVuIiBkYXRhLXNlYXJjaHBhZ2VwYXRoPSIvc2l0ZXMvaXNvb3JnL3NlYXJjaCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICA8bGFiZWwgaWQ9ImlucHV0LXNlYXJjaCIgY2xhc3M9ImNvbnRyb2wtbGFiZWwgaGlkZGVuLXhzIiBmb3I9ImlucHV0LXNlYXJjaCI+U2VhcmNoPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InNlYXJjaCIgcGxhY2Vob2xkZXI9IiIgYXJpYS1sYWJlbGxlZGJ5PSJpbnB1dC1zZWFyY2giPgogICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgdHlwZT0ic3VibWl0IiBhcmlhLWxhYmVsbGVkYnk9ImlucHV0LXNlYXJjaCI+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1nbHlwaGljb24iPgogICAgICAgICAgICAgICAgPGEgY2xhc3M9InNob3BwaW5nLWNhcnQtbGluayIgaHJlZj0iL3dlYnN0b3JlL3Nob3BwaW5nYmFza2V0P21lbWJlcklkPUlTTyZndWlsYW5nPWVuIiB0aXRsZT0iU2hvcHBpbmcgY2FydCIgYXJpYS1sYWJlbD0iU2hvcHBpbmcgY2FydCI+CiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNob3BwaW5nLWNhcnQiIGlkPSJzaG9wcGluZ0l0ZW1zIj48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAKCjxsaSBjbGFzcz0iZHJvcGRvd24iIGlkPSJsYW5nLXN3aXRjaGVyIj4KICA8YSBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIGhyZWY9IiMiPkVOIDxzcGFuIGNsYXNzPSJjYXJldCI+PC9zcGFuPjwvYT4KICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgPGxpPjxhIGhyZWY9Ii9mci9zdGFuZGFyZC83Mjg0OS5odG1sIj5mcmFuw6dhaXM8L2E+PC9saT48bGk+PGEgaHJlZj0iL3J1L3N0YW5kYXJkLzcyODQ5Lmh0bWwiPtGA0YPRgdGB0LrQuNC5PC9hPjwvbGk+CiAgPC91bD4KPC9saT48ZGl2IGNsYXNzPSJjbGVhciI+PC9kaXY+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwhLS0gVE9QIExFVkVMMSBOQVZJR0FUSU9OIC0tPgogICAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9Ik1haW4gTmF2aWdhdGlvbiIgY2xhc3M9InNpZGVuYXYiIGlkPSJtYWluTmF2Ij48dWwgcm9sZT0ibWVudWJhciIgY2xhc3M9Im5hdiBuYXZiYXItbmF2IG5hdmJhci1yaWdodCBhZmZpeC10b3BuYXYtbGV2ZWwxIj48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gZmlyc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3N0YW5kYXJkcy5odG1sIj5TdGFuZGFyZHM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvYWJvdXQtdXMuaHRtbCI+QWJvdXQgdXM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvbmV3cy5odG1sIj5OZXdzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2RldmVsb3Bpbmctc3RhbmRhcmRzLmh0bWwiPlRha2luZyBwYXJ0PC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGluUGF0aCBsYXN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9zdG9yZS5odG1sIj5TdG9yZTwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L25hdj48ZGl2IGNsYXNzPSJjbGVhciI+PC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGlkPSJzZWFyY2gtY3VydGFpbiI+PC9kaXY+CiAgICAgIDwvZGl2PgoKICAgICAgCgogICAgPC9oZWFkZXI+CiAgICA8IS0tIE1BSU4gQ09OVEVOVCAtLT4KICAgIDxtYWluIHJvbGU9Im1haW4iIGlkPSJjb250ZW50IiBjbGFzcz0iYWNlciIgYXJpYS1sYWJlbD0iQ29udGVudCIgdGFiaW5kZXg9Ii0xIj4KICAgICAgCgoKCgoKPHNwYW4gY2xhc3M9ImhpZGRlbiIgaWQ9ImluZGV4UmVmZXJlbmNlIiBkYXRhLWluZGV4PSI3Mjg0OSAtIElTTyAxMjU6MjAyMCAtIE5hdHVyYWwgcnViYmVyIGxhdGV4IGNvbmNlbnRyYXRlIOKAlCBEZXRlcm1pbmF0aW9uIG9mIGFsa2FsaW5pdHkiPjwvc3Bhbj4KCiAgPHNwYW4gY2xhc3M9ImhpZGRlbiIgaWQ9Iml0ZW1SZWZlcmVuY2UiPklTTyAxMjU6MjAyMDwvc3Bhbj4KCjxzZWN0aW9uIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL1Byb2R1Y3QiIGNsYXNzPSJzZWN0aW9uLW5hdmlnYXRpb24iPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgogICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbiIgaXRlbXByb3A9ImNhdGVnb3J5Ij5wPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuIiBpdGVtcHJvcD0icHJvZHVjdElEIiBpZD0iY3NOdW1iZXIiPjcyODQ5PC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuIiBpdGVtcHJvcD0iYnJhbmQiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL09yZ2FuaXphdGlvbiI+CiAgICAgICAgICA8ZGl2IGl0ZW1wcm9wPSJsb2dvIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9JbWFnZU9iamVjdCI+CiAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJ1cmwiIGNvbnRlbnQ9Imh0dHBzOi8vY2RuLmlzby5vcmcvcmVzb3VyY2VzL3dvb2QvMy4zLjMvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiLz4KICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9IndpZHRoIiBjb250ZW50PSIyODMiPgogICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0iaGVpZ2h0IiBjb250ZW50PSIyNjEiPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0ibmFtZSIgY29udGVudD0iSVNPIC0gSW50ZXJuYXRpb25hbCBPcmdhbml6YXRpb24gZm9yIFN0YW5kYXJkaXphdGlvbiI+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxuYXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iQ2hpbGRyZW4gTmF2aWdhdGlvbiIgY2xhc3M9ImhlYWRpbmctY29uZGVuc2VkIG5hdi1yZWxhdGl2ZXMiPgoKICAKICA8ZGl2IGNsYXNzPSJzZWN0aW9uLWhlYWQgd3JhcHBlZC1kYW5nZXIgd3JhcHBlZC1oMSI+PHNwYW4gY2xhc3M9Imljb24gIj48L3NwYW4+PGEgdGFyZ2V0PSIiIGhyZWY9Ii9zdGFuZGFyZHMtY2F0YWxvZ3VlL2Jyb3dzZS1ieS1pY3MuaHRtbCJ0aXRsZT0iQnJvd3NlIHRoZSBmdWxsIGNvbGxlY3Rpb24gb2YgSVNPIHN0YW5kYXJkcyBhbmQgZmluZCB0aGUgb25lcyB0aGF0IGFwcGx5IHRvIHlvdXIgc2VjdG9yLiI+SUNTPC9hPiA+Jm5ic3A7PGEgaHJlZj0iL2VuL2ljcy84My5odG1sIj44MzwvYT4gPiZuYnNwOzxhIGhyZWY9Ii9lbi9pY3MvODMuMDQwLmh0bWwiPjgzLjA0MDwvYT4gPiZuYnNwOzxhIGhyZWY9Ii9lbi9pY3MvODMuMDQwLjEwLmh0bWwiPjgzLjA0MC4xMDwvYT48L2Rpdj4KICAKCiAgPGgxPklTTyAxMjU6MjAyMDwvaDE+CiAgPGgyIGNsYXNzPSJuby11cHBlcmNhc2UiPk5hdHVyYWwgcnViYmVyIGxhdGV4IGNvbmNlbnRyYXRlIOKAlCBEZXRlcm1pbmF0aW9uIG9mIGFsa2FsaW5pdHk8L2gyPgo8L25hdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9zZWN0aW9uPgoKCiAgPHNlY3Rpb24gY2xhc3M9InNlY3Rpb24tc20gYmctcHJpbWFyeSB2aXNpYmxlLXhzLWJsb2NrIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgIDxoNCBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICA8YSBocmVmPSIjc3RvcmUtYm94IiBjbGFzcz0icGFnZS1zY3JvbGwiPgogICAgICAgICAgICAgIEJ1eSB0aGlzIHN0YW5kYXJkCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9zZWN0aW9uPgoKPHNlY3Rpb24gaWQ9InByb2R1Y3QtZGV0YWlscyI+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC03Ij4KICAgICAgICAKICAgICAgICAgIDxoMz5BYnN0cmFjdCZuYnNwOzxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLW91dGxpbmUiIGlkPSJvYnAtcHJldmlldyIgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmlzby5vcmcvb2JwL3VpLyMhaXNvOnN0ZDo3Mjg0OTplbiI+UHJldmlldzwvYT48L2gzPgogICAgICAgICAgPGRpdiBpdGVtcHJvcD0iZGVzY3JpcHRpb24iPgogICAgICAgICAgICA8cD48cD5UaGlzIGRvY3VtZW50IHNwZWNpZmllcyBhIG1ldGhvZCBmb3IgdGhlIGRldGVybWluYXRpb24gb2YgdGhlIGFsa2FsaW5pdHkgb2YgbmF0dXJhbCBydWJiZXIgbGF0ZXggY29uY2VudHJhdGUuPC9wPgo8cD5UaGUgbWV0aG9kIGlzIG5vdCBuZWNlc3NhcmlseSBzdWl0YWJsZSBmb3IgbGF0aWNlcyBmcm9tIG5hdHVyYWwgc291cmNlcyBvdGhlciB0aGFuIDxpPkhldmVhIGJyYXNpbGllbnNpczwvaT4gb3IgZm9yIHN5bnRoZXRpYyBydWJiZXIgbGF0aWNlcywgY29tcG91bmRlZCBsYXRleCwgdnVsY2FuaXplZCBsYXRleCBvciBhcnRpZmljaWFsIGRpc3BlcnNpb25zIG9mIHJ1YmJlci48L3A+CjxwPk5PVEUgICAgQSBtZXRob2QgZm9yIHRoZSBkZXRlcm1pbmF0aW9uIG9mIHRoZSBhbGthbGluaXR5IG9mIHBvbHljaGxvcm9wcmVuZSBsYXRleCBpcyBzcGVjaWZpZWQgaW4gSVNPIDEzNzczLjwvcD48L3A+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxici8+CiAgICAgICAgPGgzPgogIEdlbmVyYWwgaW5mb3JtYXRpb24KICA8c3VwPjxhIGhyZWY9Ii9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzI4LzcyODQ5LmRldGFpbC5yc3MiIGNsYXNzPSJzcy1pY29uIHNzLXNvY2lhbC1jaXJjbGUgdGV4dC13YXJuaW5nIHRleHQtc20iIGRhdGEtdG9nZ2xlPSJpc28tdG9vbHRpcCIgZGF0YS1vcmlnaW5hbC10aXRsZT0iU3Vic2NyaWJlJm5ic3A7dG8mbmJzcDt1cGRhdGVzIj4mI3hFMzEwOzwvYT48L3N1cD4KICAKPC9oMz4KCgo8dWwgY2xhc3M9InJlZmluZSI+CiAgPGxpPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYiPgogICAgICAgIAoKICAgICAgICAgIDxzdHJvbmc+U3RhdHVzJm5ic3A7OiZuYnNwOyZuYnNwOzwvc3Ryb25nPjxzcGFuPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLW9rLWNpcmNsZSIgdGl0bGU9IlB1Ymxpc2hlZCI+PC9zcGFuPlB1Ymxpc2hlZDwvc3Bhbj4KICAgICAgICAKICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS02Ij4KICAgICAgICAKICAgICAgICAgIDxzdHJvbmc+UHVibGljYXRpb24gZGF0ZSZuYnNwOzogPC9zdHJvbmc+PHNwYW4gaXRlbXByb3A9InJlbGVhc2VEYXRlIj4yMDIwLTAyPC9zcGFuPgogICAgICAgIAogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvbGk+CiAgPGxpPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYiPgogICAgICAgIAogICAgICAgICAgPHN0cm9uZz5FZGl0aW9uJm5ic3A7Ojwvc3Ryb25nPiA3CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNiI+CiAgICAgICAgCiAgICAgICAgICA8c3Ryb25nPk51bWJlciBvZiBwYWdlcyZuYnNwOzo8L3N0cm9uZz4gNwogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvbGk+CiAgCiAgICA8bGk+CiAgICAgIDxkaXYgY2xhc3M9ImNsZWFyZml4Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJlbnRyeS1sYWJlbCI+VGVjaG5pY2FsIENvbW1pdHRlZTwvZGl2PiA6CiAgICAgICAgPGRpdiBjbGFzcz0iZW50cnktbmFtZSBlbnRyeS1ibG9jayI+CiAgICAgICAgICA8YSBocmVmPSIvY29tbWl0dGVlLzQ4NzE2Lmh0bWwiPklTTy9UQyA0NS9TQyAzPC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LXRpdGxlIj5SYXcgbWF0ZXJpYWxzIChpbmNsdWRpbmcgbGF0ZXgpIGZvciB1c2UgaW4gdGhlIHJ1YmJlciBpbmR1c3RyeTwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvbGk+CiAgCiAgPGxpPgogICAgPGRsIGNsYXNzPSJkbC1pbmxpbmUgbm8tYm90dG9tLW1hcmdpbiI+CiAgICAgIDxkdCBjbGFzcz0iZW50cnktbGFiZWwgZW50cnktYmxvY2siPjxzdHJvbmc+SUNTIDogPC9zdHJvbmc+PC9kdD4KICAgICAgCiAgICAgICAgPGRkPgogICAgICAgICAgPGRpdiBjbGFzcz0iZW50cnktbmFtZSBlbnRyeS1ibG9jayI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9pY3MvODMuMDQwLjEwLmh0bWwiPgogICAgICAgICAgICAgICAgODMuMDQwLjEwCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZW50cnktdGl0bGUiPkxhdGV4IGFuZCByYXcgcnViYmVyPC9kaXY+CiAgICAgICAgPC9kZD4KICAgICAgCiAgICA8L2RsPgogIDwvbGk+CjwvdWw+CgogICAgPGRpdiBjbGFzcz0ic2RnLWJveCI+CiAgICAgIAogICAgICA8cD4KICAgICAgICA8aW1nIGxvYWRpbmc9ImxhenkiIHNyYz0iL2ZpbGVzL2xpdmUvc2l0ZXMvaXNvb3JnL2ZpbGVzL2RhdGEvc2RnL2VuL3NkZy1sb2dvLnBuZyIgY2xhc3M9ImltZy1yZXNwb25zaXZlIHdpZHRoLTEwMHBjdCB3aWR0aC0zMDAiIGFsdD0iU3VzdGFpbmFibGUgRGV2ZWxvcG1lbnQgR29hbHMiIC8+CiAgICAgIDwvcD4KICAgICAgPHA+CiAgICAgICAgVGhpcyBzdGFuZGFyZCBjb250cmlidXRlcyB0byB0aGUgZm9sbG93aW5nICA8YSBocmVmPSIvc2Rncy5odG1sIj5TdXN0YWluYWJsZSBEZXZlbG9wbWVudCBHb2FsczwvYT46CiAgICAgIDxwPgogICAgICA8ZGl2IGNsYXNzPSJjbGVhcmZpeCI+CiAgICAgICAgCiAgICAgICAgICA8YSBocmVmPSIvc2RnL1NERzEyLmh0bWwiIHRpdGxlPSJSZXNwb25zaWJsZSBDb25zdW1wdGlvbiBhbmQgUHJvZHVjdGlvbiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZyBzZGctc20gc2RnLTEyIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctaWNvbiI+PC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLWxhYmVsIj4xMjwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy10ZXh0Ij5SZXNwb25zaWJsZSBDb25zdW1wdGlvbiBhbmQgUHJvZHVjdGlvbjwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy1sb2dvIj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2E+CiAgICAgICAgCiAgICAgICAgICA8YSBocmVmPSIvc2RnL1NERzA5Lmh0bWwiIHRpdGxlPSJJbmR1c3RyeSwgSW5ub3ZhdGlvbiBhbmQgSW5mcmFzdHJ1Y3R1cmUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGcgc2RnLXNtIHNkZy0wOSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLWljb24iPjwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy1sYWJlbCI+OTwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy10ZXh0Ij5JbmR1c3RyeSwgSW5ub3ZhdGlvbiBhbmQgSW5mcmFzdHJ1Y3R1cmU8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctbG9nbyI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9hPgogICAgICAgIAogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIAogICAgICA8L2Rpdj4KCiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IGNvbC1tZC1vZmZzZXQtMSI+CiAgICAgICAgCiAgPGRpdiBjbGFzcz0id2VsbCBzaGFkb3ctbGlnaHQgc3RvcmUtYm94IHByb2R1Y3QtYm94IHRvcC1tZC1wdXNoLTMiIGlkPSJzdG9yZS1ib3giPgogICAgPGRpdiBjbGFzcz0iYm94LXRleHQiPgogICAgICA8aDM+QnV5Jm5ic3A7dGhpcyBzdGFuZGFyZDwvaDM+CiAgICAgIDxkaXYgY2xhc3M9ImZpdC10by1ib3giPgogICAgICAgIDxzcGFuIGNsYXNzPSJsYW5ndWFnZS1wYXRoIGhpZGRlbiI+ZW48L3NwYW4+CiAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSBvcmRlclByb2R1Y3QiPgogICAgICAgICAgPHRoZWFkPgogICAgICAgICAgPHRyPgogICAgICAgICAgICA8dGg+PC90aD4KICAgICAgICAgICAgPHRoPkZvcm1hdDwvdGg+CiAgICAgICAgICAgIDx0aCBpZD0ibGFuZ3VhZ2UiPkxhbmd1YWdlPC90aD4KICAgICAgICAgIDwvdHI+CiAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgPHRib2R5PgogICAgICAgICAgCgogICAgICAgICAgICA8dHIgY2xhc3M9ImFjdGl2ZSI+CiAgICAgICAgICAgICAgPHRkIGNsYXNzPSJzZWxlY3Rpb24gY29sLXhzLTEiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InR5cGUgaGlkZGVuIj5zdGQ8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY291bnRlciBoaWRkZW4iPjE8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHJpY2UgaGlkZGVuIj41ODwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaG9vc2VGb3JtYXQgYWN0aXZlIj48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1vayI+PC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgIDx0ZCBpZD0iYmtpZm10XzEiIGNsYXNzPSJjb2wteHMtMTAiPgogICAgICAgICAgICAgICAgUERGICsgZVB1YgogICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgPHRkIGNsYXNzPSJvcmRlckxhbmd1YWdlIGNvbC14cy0xIj4KICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9ImJraV8xIiBhcmlhLWxhYmVsbGVkYnk9Imxhbmd1YWdlIj4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMDF1YjAwMDAwMDI4NU5oQUFJfmEwNWIwMDAwMDA1V1YyUkFBV35hMGYwWDAwMDAwZTFkV21RQUl+YTBjMFgwMDAwME9zRGpUUUFWIiBsYW5nPSJlbiIgc2VsZWN0ZWQ+CiAgICAgICAgICAgICAgICAgICAgICBFbmdsaXNoCiAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjAxdWIwMDAwMDAyODVOaEFBSX5hMDViMDAwMDAwNVdWMlJBQVd+YTBmMFgwMDAwMGUxZFhWUUFZfmEwYzBYMDAwMDBPc0RrQ1FBViIgbGFuZz0iZnIiPgogICAgICAgICAgICAgICAgICAgICAgRnJlbmNoCiAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgIAoKICAgICAgICAgICAgPHRyIGNsYXNzPSIiPgogICAgICAgICAgICAgIDx0ZCBjbGFzcz0ic2VsZWN0aW9uIGNvbC14cy0xIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eXBlIGhpZGRlbiI+c3RkPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvdW50ZXIgaGlkZGVuIj4yPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaWNlIGhpZGRlbiI+NTg8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hvb3NlRm9ybWF0Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1vayBoaWRkZW4iPjwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICA8dGQgaWQ9ImJraWZtdF8yIiBjbGFzcz0iY29sLXhzLTEwIj4KICAgICAgICAgICAgICAgIFBhcGVyCiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICA8dGQgY2xhc3M9Im9yZGVyTGFuZ3VhZ2UgY29sLXhzLTEiPgogICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0iYmtpXzIiIGRpc2FibGVkIGFyaWEtbGFiZWxsZWRieT0ibGFuZ3VhZ2UiPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIwMXViMDAwMDAwMjg1TmhBQUl+YTA1YjAwMDAwMDVXVjJXQUFXfmEwZmIwMDAwMDAwZUZsN0FBRX5hMGMwWDAwMDAwT3FQTnFRQU4iIGxhbmc9ImVuIiBzZWxlY3RlZD4KICAgICAgICAgICAgICAgICAgICAgIEVuZ2xpc2gKICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMDF1YjAwMDAwMDI4NU5oQUFJfmEwNWIwMDAwMDA1V1YyV0FBV35hMGZiMDAwMDAwMGVGbk1BQVV+YTBjMFgwMDAwME9xUE9iUUFOIiBsYW5nPSJmciI+CiAgICAgICAgICAgICAgICAgICAgICBGcmVuY2gKICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgCiAgICAgICAgICA8L3Rib2R5PgogICAgICAgIDwvdGFibGU+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjbGVhcmZpeCIgaXRlbXByb3A9Im9mZmVycyIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvT2ZmZXIiPgogICAgICA8dWwgY2xhc3M9Imxpc3QtaW5saW5lIHB1bGwtcmlnaHQgb3JkZXJCYXNrZXQiIGlkPSJia2lhbmNob3JfMSI+CiAgICAgICAgPGxpIGNsYXNzPSJwcmljZSBvcmRlciI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0iY3VycmVuY3kiIGl0ZW1wcm9wPSJwcmljZUN1cnJlbmN5Ij5DSEY8L3NwYW4+PHNwYW4gY2xhc3M9ImFtb3VudCIgaWQ9InByb2R1Y3RQcmljZSIgaXRlbXByb3A9InByaWNlIj41ODwvc3Bhbj4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgaWQ9InN0YW5kYXJkLWJ1eSIgZGF0YS10b2dnbGU9Im1vZGFsIiBkYXRhLXRhcmdldD0iI2lzby1vcHRvdXQiIG9uY2xpY2s9ImphdmFzY3JpcHQ6YWRkVG9CYXNrZXQoJzEnLCAnZW4nLCAnc3RkJykiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zaG9wcGluZy1jYXJ0Ij48L3NwYW4+QnV5CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8L2xpPgogICAgICA8L3VsPgogICAgPC9kaXY+CiAgPC9kaXY+CgogIDwhLS0gU1RBUlQgT0YgTU9EQUwgKEJ1eSBJU08uT1JHIHdpdGggT1BUT1VUKSAtLT4KICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyIgaWQ9Imlzby1vcHRvdXQiPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5IGNsZWFyZml4Ij4KICAgICAgICAgICAgPGRpdiBpZD0ibW9kYWxPcHRPdXQiPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGlkPSJtb2RhbE5vT3B0T3V0Ij48L2Rpdj4KICAgICAgICAgICAgPHNwYW4gaWQ9InByb2NlZWRUb0NoZWNrb3V0IiBjbGFzcz0iaGlkZGVuIiBkYXRhLWxhYmVsPSJQcm9jZWVkIHRvIGNoZWNrb3V0Ij48L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGlkPSJjb250aW51ZVNob3BwaW5nIiBjbGFzcz0iaGlkZGVuIiBkYXRhLWxhYmVsPSJBZGQgdG8gYmFza2V0IGFuZCBjb250aW51ZSBzaG9wcGluZyI+PC9zcGFuPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPCEtLSBFTkQgT0YgTU9EQUwgLS0+CgoKICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9zZWN0aW9uPgoKCjxzZWN0aW9uIGlkPSJsaWZlY3ljbGUiPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgogICAgICAgIDxoMz5MaWZlIGN5Y2xlPC9oMz4KICAgICAgICA8YnIvPgogICAgICAgIDxkaXYgY2xhc3M9ImxpZmVjeWNsZSI+CiAgICAgICAgICA8dWwgY2xhc3M9InN0ZXBzIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0aW1lLXN0ZXAiPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJ0ZXh0LWhlbHAiPlByZXZpb3VzbHk8L2g0PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwIHN0ZXAtbXV0ZWQiPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RlcC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLWhlYWQiPldpdGhkcmF3bjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoNT48YSBocmVmPSIvc3RhbmRhcmQvNTkyNjUuaHRtbCI+SVNPIDEyNToyMDExPC9hPjwvaDU+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgPGxpIGNsYXNzPSJ0aW1lLXN0ZXAiPgogICAgICAgICAgICAgIDxoNCBjbGFzcz0idGV4dC1oZWxwIj5Ob3c8L2g0PgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwIHN0ZXAtc3VjY2VzcyBhY3RpdmUiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZCI+UHVibGlzaGVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPGg1PklTTyAxMjU6MjAyMDwvaDU+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9IiNzdGFnZXMiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUgY3VycmVudC1zdGFnZSB0ZXh0LXNtIj5TdGFnZTogPHN0cm9uZz42MC42MDwvc3Ryb25nPjxzcGFuIGNsYXNzPSJjYXJldCI+PC9zcGFuPjwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBzdGFnZXMgY29sbGFwc2UiIGlkPSJzdGFnZXMiPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gc3RhdGUtaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+PHN0cm9uZz4wMDwvc3Ryb25nPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPlByZWxpbWluYXJ5PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIHN0YXRlLWluZm8iPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjxzdHJvbmc+MTA8L3N0cm9uZz48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5Qcm9wb3NhbDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjMTBfOTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MTAuOTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE2LTEyLTA2PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmV3IHByb2plY3QgYXBwcm92ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIHN0YXRlLWluZm8iPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjxzdHJvbmc+MjA8L3N0cm9uZz48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5QcmVwYXJhdG9yeTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBzdGF0ZS1pbmZvIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj48c3Ryb25nPjMwPC9zdHJvbmc+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+Q29tbWl0dGVlPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjYXJldCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCMzMF8wMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4zMC4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTctMDMtMDY8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21taXR0ZWUgZHJhZnQgKENEKSByZWdpc3RlcmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzMwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjMwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxNy0wMy0wNzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENEIHN0dWR5L2JhbGxvdCBpbml0aWF0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjMzBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MzAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE3LTA2LTA4PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xvc2Ugb2Ygdm90aW5nLyBjb21tZW50IHBlcmlvZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCMzMF85OSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4zMC45OTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTgtMTItMDM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDRCBhcHByb3ZlZCBmb3IgcmVnaXN0cmF0aW9uIGFzIERJUwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gc3RhdGUtaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+PHN0cm9uZz40MDwvc3Ryb25nPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPkVucXVpcnk8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNhcmV0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzQwXzAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjQwLjAwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxOC0xMi0wNDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERJUyByZWdpc3RlcmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzQwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjQwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxOS0wMi0wNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERJUyBiYWxsb3QgaW5pdGlhdGVkOiAxMiB3ZWVrcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM0MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj40MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTktMDUtMDE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbG9zZSBvZiB2b3RpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNDBfOTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NDAuOTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE5LTExLTA2PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRnVsbCByZXBvcnQgY2lyY3VsYXRlZDogRElTIGFwcHJvdmVkIGZvciByZWdpc3RyYXRpb24gYXMgRkRJUwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gc3RhdGUtaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+PHN0cm9uZz41MDwvc3Ryb25nPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPkFwcHJvdmFsPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjYXJldCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM1MF8wMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj41MC4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTktMTEtMDY8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaW5hbCB0ZXh0IHJlY2VpdmVkIG9yIEZESVMgcmVnaXN0ZXJlZCBmb3IgZm9ybWFsIGFwcHJvdmFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzUwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjUwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxOS0xMi0xMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb29mIHNlbnQgdG8gc2VjcmV0YXJpYXQgb3IgRkRJUyBiYWxsb3QgaW5pdGlhdGVkOiA4IHdlZWtzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzUwXzYwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjUwLjYwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAyMC0wMS0wNzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsb3NlIG9mIHZvdGluZy4gUHJvb2YgcmV0dXJuZWQgYnkgc2VjcmV0YXJpYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGJnLXN1Y2Nlc3MgYWN0aXZlIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj48c3Ryb25nPjYwPC9zdHJvbmc+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+UHVibGljYXRpb248L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNhcmV0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzYwXzAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjYwLjAwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAyMC0wMS0wNzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVybmF0aW9uYWwgU3RhbmRhcmQgdW5kZXIgcHVibGljYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM2MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj42MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMjAtMDItMTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHB1Ymxpc2hlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gc3RhdGUtbXV0ZWQiPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjxzdHJvbmc+OTA8L3N0cm9uZz48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5SZXZpZXc8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNhcmV0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpICBjbGFzcz0nbGlzdC1zZXBhcmF0aW9uJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzkwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCB1bmRlciBzeXN0ZW1hdGljIHJldmlldwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM5MF85MiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC45Mjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVybmF0aW9uYWwgU3RhbmRhcmQgdG8gYmUgcmV2aXNlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM5MF85MyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC45Mzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVybmF0aW9uYWwgU3RhbmRhcmQgY29uZmlybWVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzkwXzk5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjk5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2l0aGRyYXdhbCBvZiBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHByb3Bvc2VkIGJ5IFRDIG9yIFNDCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBzdGF0ZS1tdXRlZCI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+PHN0cm9uZz45NTwvc3Ryb25nPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPldpdGhkcmF3YWw8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNhcmV0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzk1Xzk5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjk1Ljk5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2l0aGRyYXdhbCBvZiBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L3VsPgoKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9zZWN0aW9uPgo8c2VjdGlvbiBjbGFzcz0iYmctaW5mbyIgaWQ9ImNvbnRhY3QiPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCI+CiAgICAgICAgPGg0PkdvdCBhIHF1ZXN0aW9uPzwvaDQ+Cgo8cD5DaGVjayBvdXQgb3VyIDxhIGhyZWY9Ii9mcmVxdWVudGx5LWFza2VkLXF1ZXN0aW9ucy1mYXFzLmh0bWwiIHRpdGxlPSJGcmVxdWVudGx5IEFza2VkIFF1ZXN0aW9ucyAoRkFRcykiPkZBUXM8L2E+PC9wPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPgogICAgICAgIDxkaXYgY2xhc3M9InZjYXJkIGNvbnRhY3Qgbm8tZmlndXJlIGNsZWFyZml4IiBpdGVtc2NvcGU9IiIgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1BlcnNvbiI+CjxkaXYgY2xhc3M9ImNvbnRlbnQtYm94IG5vLWltYWdlIj4KPGRpdiBjbGFzcz0iZm4gbiI+PHNwYW4gY2xhc3M9ImdpdmVuLW5hbWUiIGl0ZW1wcm9wPSJnaXZlbk5hbWUiPkN1c3RvbWVyIGNhcmU8L3NwYW4+PC9kaXY+Cgo8ZGl2IGNsYXNzPSJ0ZWwiIGl0ZW1wcm9wPSJ0ZWxlcGhvbmUiPis0MSAyMiA3NDkgMDggODg8L2Rpdj4KCjxkaXYgY2xhc3M9ImVtYWlsIiBpdGVtcHJvcD0iZW1haWwiPjxhIGhyZWY9Im1haWx0bzpjdXN0b21lcnNlcnZpY2VAaXNvLm9yZyI+Y3VzdG9tZXJzZXJ2aWNlQGlzby5vcmc8L2E+PC9kaXY+Cgo8aHIgLz4KPGRpdiBjbGFzcz0ibm90ZSI+CjxwIGNsYXNzPSJzbWFsbCI+T3BlbmluZyBob3Vyczo8YnIgLz4KTW9uZGF5IHRvIEZyaWRheSAtIDA5OjAwLTEyOjAwLCAxNDowMC0xNzowMCAoVVRDKzEpPC9wPgo8L2Rpdj4KPC9kaXY+CjwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPgogICAgICAgIDxkaXYgY2xhc3M9IndlbGwgdGV4dC1jZW50ZXIgY2xlYXJmaXgiPgogIDxoND5LZWVwIHVwIHRvIGRhdGUgd2l0aCBJU088L2g0PgoKPHA+U2lnbiB1cCB0byBvdXIgbmV3c2xldHRlciBmb3IgdGhlIGxhdGVzdCBuZXdzLCB2aWV3cyBhbmQgcHJvZHVjdCBpbmZvcm1hdGlvbi48L3A+PGRpdj48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBkYXRhLWZhbmN5Ym94PSIiIGRhdGEtdHlwZT0iaWZyYW1lIiBocmVmPSJodHRwczovL2NvbmZpcm1zdWJzY3JpcHRpb24uY29tL2gvZC8zNDEyREE3OTkzQUMzQjdDIj5TdWJzY3JpYmU8L2E+PC9kaXY+CjxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+LmZhbmN5Ym94LXNsaWRlLS1pZnJhbWUgLmZhbmN5Ym94LWNvbnRlbnQgewogd2lkdGggIDogNTAwcHg7CiBoZWlnaHQgOiA2MDBweDsKIG1heC13aWR0aCAgOiA4MCU7CiBtYXgtaGVpZ2h0IDogODAlOwogbWFyZ2luOiAwOwp9Ci5mYW5jeWJveC1zbGlkZS0taWZyYW1lIC5mYW5jeWJveC1jb250ZW50IC5sLXBhZ2UtY29udGFpbmVyIHsKcGFkZGluZy10b3A6IDEuNXJlbSAhaW1wb3J0YW50Owp9Cjwvc3R5bGU+CjwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L3NlY3Rpb24+PGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJuYXYtYnJlYWRjcnVtYiBwcmludC1mb290ZXIgYmctZGFya2dyYXkiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tOCBzbWFsbCI+CiAgICAgICAgICAgICAgPCEtLSBCUkVBRENSVU1CIC0tPgogICAgICAgICAgICAgIDxvbCBjbGFzcz0iYnJlYWRjcnVtYiI+CiAgICAKICAgICAgPGxpPjxhIGhyZWY9Ii9ob21lLmh0bWwiIHRpdGxlPSJIb21lIHBhZ2UiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWhvbWUiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+PC9hPjwvbGk+CiAgICAKICAgICAgICA8bGk+CiAgICAgICAgICAKICAgICAgICAgICAgICA8YSBocmVmPSIvc3RvcmUuaHRtbCI+U3RvcmU8L2E+CiAgICAgICAgICAgIAogICAgICAgIDwvbGk+CiAgICAgIAogICAgICAgIDxsaT4KICAgICAgICAgIAo8YSBocmVmPSIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiID5TdGFuZGFyZHMgY2F0YWxvZ3VlPC9hPgoKICAgICAgICA8L2xpPgogICAgICAKICAgICAgICA8bGk+CiAgICAgICAgICAKICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiPklDUzwvYT4KICAgICAgICAgICAgCiAgICAgICAgPC9saT4KICAgICAgPGxpPjxhIGhyZWY9Ii9lbi9pY3MvODMuaHRtbCI+ODM8L2E+PC9saT4KICAgIAogICAgICA8bGk+PGEgaHJlZj0iL2VuL2ljcy84My4wNDAuaHRtbCI+ODMuMDQwPC9hPjwvbGk+CiAgICAKICAgICAgPGxpPjxhIGhyZWY9Ii9lbi9pY3MvODMuMDQwLjEwLmh0bWwiPjgzLjA0MC4xMDwvYT48L2xpPgogICAgPGxpPklTTyAxMjU6MjAyMDwvbGk+CiAgPC9vbD48ZGl2IGNsYXNzPSJjbGVhciI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCBoaWRkZW4tcHJpbnQgdGV4dC1yaWdodCBzbWFsbCI+CiAgICAgICAgICAgICAgPGEgcm9sZT0iYnV0dG9uIiBjbGFzcz0iYWNjb3JkaW9uLXRvZ2dsZSBjb2xsYXBzZWQiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgaHJlZj0iI2NvbGxhcHNlU2l0ZW1hcCIgdGFyZ2V0PSJfc2VsZiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY29sbGFwc2VTaXRlbWFwIj5TaXRlbWFwPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIGJvcmRlci10b3AiIGlkPSJjb2xsYXBzZVNpdGVtYXAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgIDwhLS0gU0lURU1BUCAtLT4KICAgICAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IlNpdGVtYXAiIGNsYXNzPSJzaXRlbWFwLWZvb3RlciBjbGVhcmZpeCBzbWFsbCIgaWQ9Im5hdi1zaXRlbWFwIj48dWwgcm9sZT0ibWVudWJhciIgY2xhc3M9Im5hdi1sZXZlbDEgbGlzdC1pbmxpbmUtNSBjbGVhcmZpeCI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc3RhbmRhcmRzLmh0bWwiPlN0YW5kYXJkczwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9Im5hdi1sZXZlbDIgbGlzdC11bnN0eWxlZCI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9iZW5lZml0cy1vZi1zdGFuZGFyZHMuaHRtbCI+QmVuZWZpdHM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvcG9wdWxhci1zdGFuZGFyZHMuaHRtbCI+UG9wdWxhciBzdGFuZGFyZHM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvY29uZm9ybWl0eS1hc3Nlc3NtZW50Lmh0bWwiPkNlcnRpZmljYXRpb24gJiBjb25mb3JtaXR5PC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGxhc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3NkZ3MuaHRtbCI+U0RHczwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvYWJvdXQtdXMuaHRtbCI+QWJvdXQgdXM8L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSJuYXYtbGV2ZWwyIGxpc3QtdW5zdHlsZWQiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvd2hhdC13ZS1kby5odG1sIj5XaGF0IHdlIGRvPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3N0cnVjdHVyZS5odG1sIj5TdHJ1Y3R1cmU8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvbWVtYmVycy5odG1sIj5NZW1iZXJzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGxhc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3N0cmF0ZWd5MjAzMC5odG1sIj5TdHJhdGVneTwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvbmV3cy5odG1sIj5OZXdzPC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0ibmF2LWxldmVsMiBsaXN0LXVuc3R5bGVkIj48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZXZlbnRzLmh0bWwiPkV2ZW50czwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9tZWRpYS1raXQuaHRtbCI+TWVkaWEga2l0PC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9kZXZlbG9waW5nLXN0YW5kYXJkcy5odG1sIj5UYWtpbmcgcGFydDwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9Im5hdi1sZXZlbDIgbGlzdC11bnN0eWxlZCI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii93aG8tZGV2ZWxvcHMtc3RhbmRhcmRzLmh0bWwiPldobyBkZXZlbG9wcyBzdGFuZGFyZHM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZGVsaXZlcmFibGVzLWFsbC5odG1sIj5EZWxpdmVyYWJsZXM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZ2V0LWludm9sdmVkLmh0bWwiPkdldCBpbnZvbHZlZDwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBsYXN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9yZXNvdXJjZXMuaHRtbCI+UmVzb3VyY2VzPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBpblBhdGggbGFzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc3RvcmUuaHRtbCI+U3RvcmU8L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSJuYXYtbGV2ZWwyIGxpc3QtdW5zdHlsZWQiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBpblBhdGggYWN0aXZlIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9zdGFuZGFyZHMtY2F0YWxvZ3VlL2Jyb3dzZS1ieS1pY3MuaHRtbCIgPlN0YW5kYXJkcyBjYXRhbG9ndWU8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvcHVibGljYXRpb24tbGlzdC5odG1sIj5QdWJsaWNhdGlvbnMgYW5kIHByb2R1Y3RzPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbmF2PjxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CgogICAgICAKICAgICAgPGZvb3RlciByb2xlPSJjb250ZW50aW5mbyIgYXJpYS1sYWJlbD0iRm9vdGVyIiBjbGFzcz0iZm9vdGVyLWlzbyBmb290ZXItZGFyayBiZy1kYXJrZXJncmF5Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLWxpbmtzIGNlbnRlci1ibG9jayI+CiAgICAgICAgICAgIDwhLS0gRk9PVEVSIExJTktTIC0tPgogICAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IklubGluZSBOYXZpZ2F0aW9uIiAgPjx1bCByb2xlPSJtZW51YmFyIiBjbGFzcz0ibGlzdC1pbmxpbmUgY2xlYXJmaXggbmF2LWxldmVsMSI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9pc28tbmFtZS1hbmQtbG9nby5odG1sIj5JU08gbmFtZSBhbmQgbG9nbzwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9wcml2YWN5LWFuZC1jb3B5cmlnaHQuaHRtbCI+UHJpdmFjeSBhbmQgY29weXJpZ2h0PC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3dvcmtpbmctd2l0aC1pc28uaHRtbCIgPkpvYnM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnJlcXVlbnRseS1hc2tlZC1xdWVzdGlvbnMtZmFxcy5odG1sIj5GQVFzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGxhc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2NvbnRhY3QtaXNvLmh0bWwiPkNvbnRhY3QgSVNPPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbmF2PjxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLXNvY2lhbCBzcy1pY29uIGNsZWFyZml4Ij4KICAgICAgICAgICAgPHVsIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL09yZ2FuaXphdGlvbiI+CiAgICAgICAgICAgICAgPGxpbmsgaXRlbXByb3A9InVybCIgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy8iPgogICAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2lzb3N0YW5kYXJkcyIgdGl0bGU9IkZhY2Vib29rIj7vmJA8L2E+PC9saT4KICAgICAgICAgICAgICA8bGk+PGEgaXRlbXByb3A9InNhbWVBcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vaXNvc3RhbmRhcmRzIiB0aXRsZT0iVHdpdHRlciI+75iRPC9hPjwvbGk+CiAgICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS91c2VyL1BsYW5ldElTTyIgdGl0bGU9IllvdVR1YmUiPu+YsDwvYT48L2xpPgogICAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2NvbXBhbnkvaXNvc3RhbmRhcmRzIiB0aXRsZT0iTGlua2VkaW4iPu+YkjwvYT48L2xpPgogICAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9pc29zdGFuZGFyZHMiIHRpdGxlPSJJbnN0YWdyYW0iPu+ZgTwvYT48L2xpPgogICAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cuZmxpY2tyLmNvbS9waG90b3MvaXNvc3RhbmRhcmRzIiB0aXRsZT0iRmxpY2tyIj7vmYA8L2E+PC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPHAgY2xhc3M9ImxlYWQiPkdyZWF0IHRoaW5ncyBoYXBwZW4gd2hlbiB0aGUgd29ybGQgYWdyZWVzPC9wPgogICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggY29sLW1kLW9mZnNldC0yIHB1bGwtbGVmdCI+CiAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQteHMiPldlIGFyZSBjb21taXR0ZWQgdG8gZW5zdXJpbmcgdGhhdCBvdXIgd2Vic2l0ZSBpcyBhY2Nlc3NpYmxlIHRvIGV2ZXJ5b25lLiBJZiB5b3UgaGF2ZSBhbnkgcXVlc3Rpb25zIG9yIHN1Z2dlc3Rpb25zIHJlZ2FyZGluZyB0aGUgYWNjZXNzaWJpbGl0eSBvZiB0aGlzIHNpdGUsIHBsZWFzZSA8YSBocmVmPSJtYWlsdG86d2VibWFzdGVyQGlzby5vcmc/c3ViamVjdD1BY2Nlc3NpYmlsaXR5IiBzdHlsZT0id2hpdGUtc3BhY2U6IG5vd3JhcCI+Y29udGFjdCB1czwvYT4uPC9wPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXNtIj48YSBocmVmPSIjY29weXJpZ2h0IiB0YXJnZXQ9Il9zZWxmIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJjb3B5cmlnaHQiPsKpIEFsbCBSaWdodHMgUmVzZXJ2ZWQ8L2E+IDxzcGFuIGlkPSJjb3B5cmlnaHQiIGNsYXNzPSJjb2xsYXBzZSI+QWxsIElTTyBwdWJsaWNhdGlvbnMgYW5kIG1hdGVyaWFscyBhcmUgcHJvdGVjdGVkIGJ5IGNvcHlyaWdodCBhbmQgYXJlIHN1YmplY3QgdG8gdGhlIHVzZXLigJlzIGFjY2VwdGFuY2Ugb2YgSVNP4oCZcyBjb25kaXRpb25zIG9mIGNvcHlyaWdodC4gQW55IHVzZSwgaW5jbHVkaW5nIHJlcHJvZHVjdGlvbiByZXF1aXJlcyBvdXIgd3JpdHRlbiBwZXJtaXNzaW9uLiBBbGwgY29weXJpZ2h0IHJlcXVlc3RzIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gPGEgaHJlZj0ibWFpbHRvOmNvcHlyaWdodEBpc28ub3JnIj5jb3B5cmlnaHRAaXNvLm9yZzwvYT4uPC9zcGFuPjwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BiYXIiPgogICAgICAgICAgPGRpdiBjbGFzcz0idG9wYmFyLWNvbnRlbnQiPgogICAgICAgICAgICA8YSBjbGFzcz0ibG9nbyBpc29sb2dvIGxvZ28teHMgdGhlbWUtcmVkIHBvd2VyZWRieSBwYWdlLXNjcm9sbCBsb2dvLXNjcm9sbFRvcCIgaHJlZj0iI3BhZ2UtdG9wIiB0aXRsZT0iU2Nyb2xsIHRvIHRvcCI+PC9hPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpc29sb2dvLXByaW50Ij48aW1nIHNyYz0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuNS9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIgYWx0PSJJU08gbG9nbyBmb3IgcHJpbnQiIC8+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvd2VyZWRieS10eHQiPlBvd2VyZWQgYnk8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InJ1YmJlciI+PC9kaXY+CiAgICAgIDwvZm9vdGVyPgoKICAgIDwvbWFpbj4KCiAgICAKCgogIDwvYm9keT4KPC9odG1sPg==
    http_version:
  recorded_at: Sat, 09 Oct 2021 16:54:10 GMT
- request:
    method: get
    uri: https://www.iso.org/fr/standard/72849.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=208106C745C80F38221FFD710CD2BEDC; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Sat, 09 Oct 2021 16:54:11 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Sat, 09 Oct 2021 16:54:12 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 126","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.1.1), Ruby (2.7.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Sat, 09 Oct 2021 16:54:13 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '2'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Sat, 09 Oct 2021 16:54:14 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/03/51/35176.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=EEB8469C4265A7F4E3AFCCC3949CD41E; Path=/; Secure; HttpOnly
      Location:
      - "/standard/35176.html"
      Content-Length:
      - '0'
      Date:
      - Sat, 09 Oct 2021 16:54:15 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Sat, 09 Oct 2021 16:54:15 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/35176.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=2984EBF579A567AA8106A498D97EC7C5; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Sat, 09 Oct 2021 16:54:17 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Sat, 09 Oct 2021 16:54:18 GMT
- request:
    method: get
    uri: https://www.iso.org/fr/standard/35176.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=BDA58A879DC1E525FF99BB47BB801991; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Sat, 09 Oct 2021 16:54:20 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Sat, 09 Oct 2021 16:54:20 GMT
recorded_with: VCR 5.0.0
