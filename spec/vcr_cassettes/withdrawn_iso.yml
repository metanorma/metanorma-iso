---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 683-3","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.2), Ruby (3.2.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 06 Jul 2023 23:41:45 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 06 Jul 2023 23:41:45 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 31-0","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.2), Ruby (3.2.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 06 Jul 2023 23:41:45 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJoaXRzIjpbeyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNC8wOS80MDkxMCIsInV1aWQiOiI4NGI4NTRkOS05ZjdiLTQ3MjItODAyNS1mNzE4ODQ2ZmI3NzQiLCJ0aXRsZSI6IklTTyAzMS0wOjE5OTIvQW1kIDI6MjAwNSBRdWFudGl0aWVzIGFuZCB1bml0cyDigJQgUGFydCAwOiBHZW5lcmFsIHByaW5jaXBsZXMg4oCUIEFtZW5kbWVudCAyIiwic3RhdHVzIjoiV2l0aGRyYXduIiwieWVhciI6MjAwOSwib3JkZXIiOjEwMCwib2JqZWN0SUQiOiI0MDkxMF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MzEtMDwvZW0+OjE5OTIvQW1kIDI6MjAwNSBRdWFudGl0aWVzIGFuZCB1bml0cyDigJQgUGFydCAwOiBHZW5lcmFsIHByaW5jaXBsZXMg4oCUIEFtZW5kbWVudCAyIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjMxIiwiMCJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDAvMzYvMzYyMSIsInV1aWQiOiJhZTRjYmM0NS00NjM0LTQ3NjEtYTA5MC1jYjExOGY5ZWUzNjIiLCJ0aXRsZSI6IklTTyAzMS0wOjE5OTIgUXVhbnRpdGllcyBhbmQgdW5pdHMg4oCUIFBhcnQgMDogR2VuZXJhbCBwcmluY2lwbGVzIiwic3RhdHVzIjoiV2l0aGRyYXduIiwieWVhciI6MjAwOSwib3JkZXIiOjEwMCwidGV4dCI6IkdpdmVzIGdlbmVyYWwgaW5mb3JtYXRpb24gYWJvdXQgcHJpbmNpcGxlcyBjb25jZXJuaW5nIHBoeXNpY2FsIHF1YW50aXRpZXMsIGVxdWF0aW9ucywgcXVhbnRpdHkgYW5kIHVuaXQgc3ltYm9scywgYW5kIGNvaGVyZW50IHVuaXQgc3lzdGVtcywgZXNwZWNpYWxseSB0aGUgSW50ZXJuYXRpb25hbCBTeXN0ZW0gb2YgVW5pdHMsIFNJLCBpbmNsdWRpbmcgcmVjb21tZW5kYXRpb25zIGZvciBwcmludGluZyBzeW1ib2xzIGFuZCBudW1iZXJzLiBBbm5leCBBIGluY2x1ZGVzIGEgZ3VpZGUgdG8gdGVybXMgdXNlZCBpbiBuYW1lcyBmb3IgcGh5c2ljYWwgcXVhbnRpdGllcywgQW5uZXggQiBhIGd1aWRlIHRvIHRoZSByb3VuZGluZyBvZiBudW1iZXJzLCBBbm5leCBDIGludGVybmF0aW9uYWwgb3JnYW5pemF0aW9ucyBpbiB0aGUgZmllbGQgb2YgcXVhbnRpdGllcyBhbmQgdW5pdHMuICIsIm9iamVjdElEIjoiMzYyMV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MzEtMDwvZW0+OjE5OTIgUXVhbnRpdGllcyBhbmQgdW5pdHMg4oCUIFBhcnQgMDogR2VuZXJhbCBwcmluY2lwbGVzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjMxIiwiMCJdfSwidGV4dCI6eyJ2YWx1ZSI6IkdpdmVzIGdlbmVyYWwgaW5mb3JtYXRpb24gYWJvdXQgcHJpbmNpcGxlcyBjb25jZXJuaW5nIHBoeXNpY2FsIHF1YW50aXRpZXMsIGVxdWF0aW9ucywgcXVhbnRpdHkgYW5kIHVuaXQgc3ltYm9scywgYW5kIGNvaGVyZW50IHVuaXQgc3lzdGVtcywgZXNwZWNpYWxseSB0aGUgSW50ZXJuYXRpb25hbCBTeXN0ZW0gb2YgVW5pdHMsIFNJLCBpbmNsdWRpbmcgcmVjb21tZW5kYXRpb25zIGZvciBwcmludGluZyBzeW1ib2xzIGFuZCBudW1iZXJzLiBBbm5leCBBIGluY2x1ZGVzIGEgZ3VpZGUgdG8gdGVybXMgdXNlZCBpbiBuYW1lcyBmb3IgcGh5c2ljYWwgcXVhbnRpdGllcywgQW5uZXggQiBhIGd1aWRlIHRvIHRoZSByb3VuZGluZyBvZiBudW1iZXJzLCBBbm5leCBDIGludGVybmF0aW9uYWwgb3JnYW5pemF0aW9ucyBpbiB0aGUgZmllbGQgb2YgcXVhbnRpdGllcyBhbmQgdW5pdHMuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAyLzg5LzI4OTg4IiwidXVpZCI6IjI3ODVmZjBjLWM5YTEtNDVkYy05NTg3LTcxYjM0OTUxNGQ4NyIsInRpdGxlIjoiSVNPIDMxLTA6MTk5Mi9BbWQgMToxOTk4IFF1YW50aXRpZXMgYW5kIHVuaXRzIOKAlCBQYXJ0IDA6IEdlbmVyYWwgcHJpbmNpcGxlcyDigJQgQW1lbmRtZW50IDEiLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDA5LCJvcmRlciI6MTAwLCJvYmplY3RJRCI6IjI4OTg4XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4zMS0wPC9lbT46MTk5Mi9BbWQgMToxOTk4IFF1YW50aXRpZXMgYW5kIHVuaXRzIOKAlCBQYXJ0IDA6IEdlbmVyYWwgcHJpbmNpcGxlcyDigJQgQW1lbmRtZW50IDEiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMzEiLCIwIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMC8zNi8zNjIwIiwidXVpZCI6IjA1OWQ1NmIyLTg4NTUtNGZhYi1iMmRhLTQ1MWM4N2Q5YTRiNiIsInRpdGxlIjoiSVNPIDMxLTA6MTk4MSBHZW5lcmFsIHByaW5jaXBsZXMgY29uY2VybmluZyBxdWFudGl0aWVzLCB1bml0cyBhbmQgc3ltYm9scyIsInN0YXR1cyI6IldpdGhkcmF3biIsInllYXIiOjE5OTIsIm9yZGVyIjoxMDAsIm9iamVjdElEIjoiMzYyMF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MzEtMDwvZW0+OjE5ODEgR2VuZXJhbCBwcmluY2lwbGVzIGNvbmNlcm5pbmcgcXVhbnRpdGllcywgdW5pdHMgYW5kIHN5bWJvbHMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMzEiLCIwIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMC8yNC8yNDA1IiwidXVpZCI6ImVkZjVlY2QzLTcwYzctNDZkNi1hZWFmLTI0Y2E1YjRjNjFiMSIsInRpdGxlIjoiSVNPIDMxLTA6MTk3NCBUaXRsZSBtaXNzaW5nIC0gTGVnYWN5IHBhcGVyIGRvY3VtZW50Iiwic3RhdHVzIjoiV2l0aGRyYXduIiwieWVhciI6MTk3OSwib3JkZXIiOjEwMCwib2JqZWN0SUQiOiIyNDA1XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4zMS0wPC9lbT46MTk3NCBUaXRsZSBtaXNzaW5nIC0gTGVnYWN5IHBhcGVyIGRvY3VtZW50IiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjMxIiwiMCJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDgvNDEvODQxMjUiLCJ1dWlkIjoiZjg3MDRlMTYtZjNlMS00ZWE1LTgyMGQtYmYzOGE5MGNlNmY2IiwidGl0bGUiOiJJU08gMjAzNDItMToyMDIyIEFzc2lzdGl2ZSBwcm9kdWN0cyBmb3IgdGlzc3VlIGludGVncml0eSB3aGVuIGx5aW5nIGRvd24g4oCUIFBhcnQgMTogR2VuZXJhbCByZXF1aXJlbWVudHMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTEsInRleHQiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBnZW5lcmFsIHJlcXVpcmVtZW50cyBhbmQgcmVsYXRlZCB0ZXN0IG1ldGhvZHMgdGhhdCBhcmUgcmVsZXZhbnQgdG8gYXNzaXN0aXZlIHByb2R1Y3RzIGZvciB0aXNzdWUgaW50ZWdyaXR5IChBUFRJKSBpbiB0aGUgbHlpbmcgcG9zaXRpb24gaW4gZGlmZmVyZW50IGFwcGxpY2F0aW9uIGVudmlyb25tZW50cyBzdWNoIGFzIGhvc3BpdGFscywgaG9tZSBjYXJlIGFuZCBpbnN0aXR1dGlvbnMuIFRoaXMgZG9jdW1lbnQgYXBwbGllcyB0byB0aGUgc2FmZXR5IG9mIEFQVEkgdGhhdCBhcmUgaW50ZW5kZWQgdG8gcmVtYWluIGluIHNpdHUgZHVyaW5nIHBlcmlvZHMgb2YgbHlpbmcsIGFuZCB0byBwcmV2ZW50IGFuZC9vciB0cmVhdCBwcmVzc3VyZSBpbmp1cmllcy4gVGhpcyBkb2N1bWVudCBjb3ZlcnMgYSByYW5nZSBvZiBkaWZmZXJlbnQgbHlpbmcgc3VwcG9ydCBzdXJmYWNlcyBpbnRlbmRlZCB0byBiZSB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggdGhlIGFwcHJvcHJpYXRlIHN1cHBvcnQgcGxhdGZvcm0gKGFkanVzdGFibGUgaW5jbHVkZWQpIG9yIGFzIGEgd2hvbGUgaW50ZWdyYXRlZCBzeXN0ZW0uIFRoaXMgZG9jdW1lbnQgZG9lcyBub3QgYXBwbHkgdG8gbWVkaWNhbCBiZWRzLiBUaGlzIGRvY3VtZW50IGFsc28gY292ZXJzIGFzc2lzdGl2ZSBwcm9kdWN0cyBwcmltYXJpbHkgaW50ZW5kZWQgZm9yIHRpc3N1ZSBpbnRlZ3JpdHkgZm9yIGNoYW5naW5nIGEgbHlpbmcgcG9zaXRpb24gYW5kIGFzc2lzdGl2ZSBwcm9kdWN0cyBmb3IgbWFpbnRhaW5pbmcgYSBseWluZyBwb3NpdGlvbi4gVGhpcyBkb2N1bWVudCBkb2VzIG5vdCBhcHBseSB0byBseWluZyBzdXBwb3J0IHN1cmZhY2VzIHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBpbmN1YmF0b3JzIG9yIG9wZXJhdGluZy9zdXJnaWNhbCB0YWJsZXMuIEl0IGFsc28gY292ZXJzIHNhZmV0eSBhbmQgcGVyZm9ybWFuY2UgdGVzdCBtZXRob2RzIHRvIGVuc3VyZSBwcm90ZWN0aW9uIGFnYWluc3QgaW5qdXJpZXMgdG8gdGhlIHVzZXIuIFRoaXMgZG9jdW1lbnQgYWRkcmVzc2VzIHRoZSBjb21iaW5hdGlvbiBvZiBhIGZ1bGwgYm9keSBzdXBwb3J0IHN1cmZhY2UgYW5kIGFuIGFkanVzdGFibGUgbWF0dHJlc3Mgc3VwcG9ydCBwbGF0Zm9ybS4gSXQgYWxzbyBjb3ZlcnMgc2FmZXR5IGFuZCBwZXJmb3JtYW5jZSB0ZXN0IG1ldGhvZHMgdG8gZW5zdXJlIHByb3RlY3Rpb24gYWdhaW5zdCBpbmp1cmllcyB0byB0aGUgdXNlci4gVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgcmVxdWlyZW1lbnRzIGFuZCB0ZXN0IG1ldGhvZHMgZm9yIEFQVEkgd2l0aGluIHRoZSBmb2xsb3dpbmcgY2xhc3NpZmljYXRpb25zIG9mIElTT8KgOTk5OToyMDIyOiAwNCAzMyAwNiBBc3Npc3RpdmUgcHJvZHVjdHMgZm9yIHRpc3N1ZSBpbnRlZ3JpdHkgd2hlbiBseWluZyBkb3duIHN1Y2ggYXMgYnV0IG5vdCBsaW1pdGVkIHRvIOKAlMKgwqDCoCBtYXR0cmVzc2VzIGFuZCBtYXR0cmVzcyBvdmVybGF5cyBmb3IgcHJlc3N1cmUgaW5qdXJ5IHByZXZlbnRpb24sIGFuZCDigJTCoMKgwqAgbWF0dHJlc3MgY292ZXJpbmdzIGZvciBwcmVzc3VyZSBpbmp1cnkgcHJldmVudGlvbiBtYXR0cmVzc2VzLiAxMiAzMSAwMyBBc3Npc3RpdmUgcHJvZHVjdHMgZm9yIHNsaWRpbmcgYW5kIHR1cm5pbmcgc3VjaCBhcyBidXQgbm90IGxpbWl0ZWQgdG8gdGhlIGZvbGxvd2luZzogRGV2aWNlcyBmb3IgY2hhbmdpbmcgcG9zaXRpb24gb3IgZGlyZWN0aW9uIG9mIGEgcGVyc29uIHVzaW5nIHNsaWRpbmcgb3IgdHVybmluZyB0ZWNobmlxdWVzLiBUaGUgb25seSBwcm9kdWN0cyBpbmNsdWRlZCBhcmUgdGhvc2UgaW50ZW5kZWQgdG8gYmUgdXNlZCBpbiBhIGx5aW5nIHBvc2l0aW9uIGFuZCByZW1haW4gaW4gc2l0dSBhcyBwYXJ0IG9mIHRoZSBseWluZyBzdXBwb3J0IHN1cmZhY2UuIFRoZXkgYXJlIHRoZSBmb2xsb3dpbmc6IOKAlMKgwqDCoCBzbGlkaW5nIHByb2R1Y3RzIHRoYXQgZ2xpZGUgb25lIHdheSBhbmQgbG9jayB0aGUgb3RoZXIgd2F5OyDigJTCoMKgwqAgc2hlZXRzIGFuZCB1bmRlcmxheXMgaW4gZmxleGlibGUgbWF0ZXJpYWxzIHdpdGggbG93IGZyaWN0aW9uOyDigJTCoMKgwqAgZmFicmljIHNvbGQgYnkgdGhlIG1ldHJlLCBjdXQgYXMgcmVxdWlyZWQgZm9yIHJlcG9zaXRpb25pbmcgdXNlOyDigJTCoMKgwqAgcG93ZXJlZCB0dXJuaW5nIHByb2R1Y3Q7IFRoaXMgZXhjbHVkZXMgc2xpZGluZyBib2FyZHMgdW5sZXNzIHRoZSBwcm9kdWN0IGlzIGludGVuZGVkIHRvIGJlIGxlZnQgaW4gc2l0dS4gMDkgMDcgMDYgUG9zaXRpb25pbmcgcGlsbG93cywgcG9zaXRpb25pbmcgY3VzaGlvbnMgYW5kIHBvc2l0aW9uaW5nIHN5c3RlbXMgc3VjaCBhcyBidXQgbm90IGxpbWl0ZWQgdG8g4oCUwqDCoMKgIGxlZyBwb3NpdGlvbmVycywg4oCUwqDCoMKgIGFybSBwb3NpdGlvbmVycywgYW5kIOKAlMKgwqDCoCBtdWx0aXB1cnBvc2UgYm9keSBwb3NpdGlvbmVycy4gMTggMTIgMTUgQmVkZGluZyBzdWNoIGFzIGJ1dCBub3QgbGltaXRlZCB0byDigJTCoCDCoCBkcmF3IHNoZWV0cy4gIiwib2JqZWN0SUQiOiI4NDEyNV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiAyMDM0Mi0xOjIwMjIgQXNzaXN0aXZlIHByb2R1Y3RzIGZvciB0aXNzdWUgaW50ZWdyaXR5IHdoZW4gbHlpbmcgZG93biDigJQgUGFydCAxOiBHZW5lcmFsIHJlcXVpcmVtZW50cyIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBnZW5lcmFsIHJlcXVpcmVtZW50cyBhbmQgcmVsYXRlZCB0ZXN0IG1ldGhvZHMgdGhhdCBhcmUgcmVsZXZhbnQgdG8gYXNzaXN0aXZlIHByb2R1Y3RzIGZvciB0aXNzdWUgaW50ZWdyaXR5IChBUFRJKSBpbiB0aGUgbHlpbmcgcG9zaXRpb24gaW4gZGlmZmVyZW50IGFwcGxpY2F0aW9uIGVudmlyb25tZW50cyBzdWNoIGFzIGhvc3BpdGFscywgaG9tZSBjYXJlIGFuZCBpbnN0aXR1dGlvbnMuIFRoaXMgZG9jdW1lbnQgYXBwbGllcyB0byB0aGUgc2FmZXR5IG9mIEFQVEkgdGhhdCBhcmUgaW50ZW5kZWQgdG8gcmVtYWluIGluIHNpdHUgZHVyaW5nIHBlcmlvZHMgb2YgbHlpbmcsIGFuZCB0byBwcmV2ZW50IGFuZC9vciB0cmVhdCBwcmVzc3VyZSBpbmp1cmllcy4gVGhpcyBkb2N1bWVudCBjb3ZlcnMgYSByYW5nZSBvZiBkaWZmZXJlbnQgbHlpbmcgc3VwcG9ydCBzdXJmYWNlcyBpbnRlbmRlZCB0byBiZSB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggdGhlIGFwcHJvcHJpYXRlIHN1cHBvcnQgcGxhdGZvcm0gKGFkanVzdGFibGUgaW5jbHVkZWQpIG9yIGFzIGEgd2hvbGUgaW50ZWdyYXRlZCBzeXN0ZW0uIFRoaXMgZG9jdW1lbnQgZG9lcyBub3QgYXBwbHkgdG8gbWVkaWNhbCBiZWRzLiBUaGlzIGRvY3VtZW50IGFsc28gY292ZXJzIGFzc2lzdGl2ZSBwcm9kdWN0cyBwcmltYXJpbHkgaW50ZW5kZWQgZm9yIHRpc3N1ZSBpbnRlZ3JpdHkgZm9yIGNoYW5naW5nIGEgbHlpbmcgcG9zaXRpb24gYW5kIGFzc2lzdGl2ZSBwcm9kdWN0cyBmb3IgbWFpbnRhaW5pbmcgYSBseWluZyBwb3NpdGlvbi4gVGhpcyBkb2N1bWVudCBkb2VzIG5vdCBhcHBseSB0byBseWluZyBzdXBwb3J0IHN1cmZhY2VzIHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBpbmN1YmF0b3JzIG9yIG9wZXJhdGluZy9zdXJnaWNhbCB0YWJsZXMuIEl0IGFsc28gY292ZXJzIHNhZmV0eSBhbmQgcGVyZm9ybWFuY2UgdGVzdCBtZXRob2RzIHRvIGVuc3VyZSBwcm90ZWN0aW9uIGFnYWluc3QgaW5qdXJpZXMgdG8gdGhlIHVzZXIuIFRoaXMgZG9jdW1lbnQgYWRkcmVzc2VzIHRoZSBjb21iaW5hdGlvbiBvZiBhIGZ1bGwgYm9keSBzdXBwb3J0IHN1cmZhY2UgYW5kIGFuIGFkanVzdGFibGUgbWF0dHJlc3Mgc3VwcG9ydCBwbGF0Zm9ybS4gSXQgYWxzbyBjb3ZlcnMgc2FmZXR5IGFuZCBwZXJmb3JtYW5jZSB0ZXN0IG1ldGhvZHMgdG8gZW5zdXJlIHByb3RlY3Rpb24gYWdhaW5zdCBpbmp1cmllcyB0byB0aGUgdXNlci4gVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgcmVxdWlyZW1lbnRzIGFuZCB0ZXN0IG1ldGhvZHMgZm9yIEFQVEkgd2l0aGluIHRoZSBmb2xsb3dpbmcgY2xhc3NpZmljYXRpb25zIG9mIDxlbT5JU088L2VtPsKgOTk5OToyMDIyOiAwNCAzMyAwNiBBc3Npc3RpdmUgcHJvZHVjdHMgZm9yIHRpc3N1ZSBpbnRlZ3JpdHkgd2hlbiBseWluZyBkb3duIHN1Y2ggYXMgYnV0IG5vdCBsaW1pdGVkIHRvIOKAlMKgwqDCoCBtYXR0cmVzc2VzIGFuZCBtYXR0cmVzcyBvdmVybGF5cyBmb3IgcHJlc3N1cmUgaW5qdXJ5IHByZXZlbnRpb24sIGFuZCDigJTCoMKgwqAgbWF0dHJlc3MgY292ZXJpbmdzIGZvciBwcmVzc3VyZSBpbmp1cnkgcHJldmVudGlvbiBtYXR0cmVzc2VzLiAxMiA8ZW0+MzEgMDwvZW0+MyBBc3Npc3RpdmUgcHJvZHVjdHMgZm9yIHNsaWRpbmcgYW5kIHR1cm5pbmcgc3VjaCBhcyBidXQgbm90IGxpbWl0ZWQgdG8gdGhlIGZvbGxvd2luZzogRGV2aWNlcyBmb3IgY2hhbmdpbmcgcG9zaXRpb24gb3IgZGlyZWN0aW9uIG9mIGEgcGVyc29uIHVzaW5nIHNsaWRpbmcgb3IgdHVybmluZyB0ZWNobmlxdWVzLiBUaGUgb25seSBwcm9kdWN0cyBpbmNsdWRlZCBhcmUgdGhvc2UgaW50ZW5kZWQgdG8gYmUgdXNlZCBpbiBhIGx5aW5nIHBvc2l0aW9uIGFuZCByZW1haW4gaW4gc2l0dSBhcyBwYXJ0IG9mIHRoZSBseWluZyBzdXBwb3J0IHN1cmZhY2UuIFRoZXkgYXJlIHRoZSBmb2xsb3dpbmc6IOKAlMKgwqDCoCBzbGlkaW5nIHByb2R1Y3RzIHRoYXQgZ2xpZGUgb25lIHdheSBhbmQgbG9jayB0aGUgb3RoZXIgd2F5OyDigJTCoMKgwqAgc2hlZXRzIGFuZCB1bmRlcmxheXMgaW4gZmxleGlibGUgbWF0ZXJpYWxzIHdpdGggbG93IGZyaWN0aW9uOyDigJTCoMKgwqAgZmFicmljIHNvbGQgYnkgdGhlIG1ldHJlLCBjdXQgYXMgcmVxdWlyZWQgZm9yIHJlcG9zaXRpb25pbmcgdXNlOyDigJTCoMKgwqAgcG93ZXJlZCB0dXJuaW5nIHByb2R1Y3Q7IFRoaXMgZXhjbHVkZXMgc2xpZGluZyBib2FyZHMgdW5sZXNzIHRoZSBwcm9kdWN0IGlzIGludGVuZGVkIHRvIGJlIGxlZnQgaW4gc2l0dS4gMDkgMDcgMDYgUG9zaXRpb25pbmcgcGlsbG93cywgcG9zaXRpb25pbmcgY3VzaGlvbnMgYW5kIHBvc2l0aW9uaW5nIHN5c3RlbXMgc3VjaCBhcyBidXQgbm90IGxpbWl0ZWQgdG8g4oCUwqDCoMKgIGxlZyBwb3NpdGlvbmVycywg4oCUwqDCoMKgIGFybSBwb3NpdGlvbmVycywgYW5kIOKAlMKgwqDCoCBtdWx0aXB1cnBvc2UgYm9keSBwb3NpdGlvbmVycy4gMTggMTIgMTUgQmVkZGluZyBzdWNoIGFzIGJ1dCBub3QgbGltaXRlZCB0byDigJTCoCDCoCBkcmF3IHNoZWV0cy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjMxIiwiMCJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDYvNzcvNjc3NTAiLCJ1dWlkIjoiNWNhZmM0YWEtNzJhNS00NTBmLTliNzUtOTEwZjY1Zjk3OTQ3IiwidGl0bGUiOiJJU08gMjAzNDItMToyMDE5IEFzc2lzdGl2ZSBwcm9kdWN0cyBmb3IgdGlzc3VlIGludGVncml0eSB3aGVuIGx5aW5nIGRvd24g4oCUIFBhcnQgMTogR2VuZXJhbCByZXF1aXJlbWVudHMiLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTAwLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgZ2VuZXJhbCByZXF1aXJlbWVudHMgYW5kIHJlbGF0ZWQgdGVzdCBtZXRob2RzIHRoYXQgYXJlIHJlbGV2YW50IHRvIGFzc2lzdGl2ZSBwcm9kdWN0cyBmb3IgdGlzc3VlIGludGVncml0eSAoQVBUSSkgaW4gdGhlIGx5aW5nIHBvc2l0aW9uIGluIGRpZmZlcmVudCBhcHBsaWNhdGlvbiBlbnZpcm9ubWVudHMgc3VjaCBhcyBob3NwaXRhbHMsIGhvbWUgY2FyZSBhbmQgaW5zdGl0dXRpb25zLiBUaGlzIGRvY3VtZW50IGFwcGxpZXMgdG8gdGhlIHNhZmV0eSBvZiBBUFRJLCB3aGljaCBhcmUgaW50ZW5kZWQgdG8gcmVtYWluIGluIHNpdHUgZHVyaW5nIHBlcmlvZHMgb2YgbHlpbmcsIGFuZCB0byBwcmV2ZW50IGFuZC9vciB0cmVhdCBwcmVzc3VyZSBpbmp1cmllcy4gVGhpcyBkb2N1bWVudCBjb3ZlcnMgYSByYW5nZSBvZiBkaWZmZXJlbnQgbHlpbmcgc3VwcG9ydCBzdXJmYWNlcyBpbnRlbmRlZCB0byBiZSB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggdGhlIGFwcHJvcHJpYXRlIHN1cHBvcnQgcGxhdGZvcm0gb3IgYXMgYSB3aG9sZSBpbnRlZ3JhdGVkIHN5c3RlbS4gVGhpcyBkb2N1bWVudCBhbHNvIGNvdmVycyBhc3Npc3RpdmUgcHJvZHVjdHMgcHJpbWFyaWx5IGludGVuZGVkIGZvciB0aXNzdWUgaW50ZWdyaXR5IGZvciBjaGFuZ2luZyBhIGx5aW5nIHBvc2l0aW9uIGFuZCBhc3Npc3RpdmUgcHJvZHVjdHMgZm9yIG1haW50YWluaW5nIGEgbHlpbmcgcG9zaXRpb24uIFRoaXMgZG9jdW1lbnQgZG9lcyBub3QgYXBwbHkgdG8gbHlpbmcgc3VwcG9ydCBzdXJmYWNlcyB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggaW5jdWJhdG9ycy4gVGhpcyBkb2N1bWVudCBhZGRyZXNzZXMgdGhlIGNvbWJpbmF0aW9uIG9mIGEgZnVsbCBib2R5IHN1cHBvcnQgc3VyZmFjZSBhbmQgYW4gYWRqdXN0YWJsZSBtYXR0cmVzcyBzdXBwb3J0IHBsYXRmb3JtLiBJdCBhbHNvIGNvdmVycyBzYWZldHkgYW5kIHBlcmZvcm1hbmNlIHRlc3QgbWV0aG9kcyB0byBlbnN1cmUgcHJvdGVjdGlvbiBhZ2FpbnN0IGluanVyaWVzIHRvIHRoZSB1c2VyLiBUaGlzIGRvY3VtZW50IHNwZWNpZmllcyByZXF1aXJlbWVudHMgYW5kIHRlc3QgbWV0aG9kcyBmb3IgQVBUSSB3aXRoaW4gdGhlIGZvbGxvd2luZyBjbGFzc2lmaWNhdGlvbnMgb2YgSVNPIDk5OTk6MjAxNjogMDQgMzMgMDYgQXNzaXN0aXZlIHByb2R1Y3RzIGZvciB0aXNzdWUgaW50ZWdyaXR5IHdoZW4gbHlpbmcgZG93biBzdWNoIGFzIGJ1dCBub3QgbGltaXRlZCB0bzog4oCUICAgICAgICAgTWF0dHJlc3NlcyBhbmQgbWF0dHJlc3Mgb3ZlcmxheXMgZm9yIHByZXNzdXJlIGluanVyeSBwcmV2ZW50aW9uOyDigJQgICAgICAgICBNYXR0cmVzcyBjb3ZlcmluZ3MgZm9yIHByZXNzdXJlIGluanVyeSBwcmV2ZW50aW9uIG1hdHRyZXNzZXMuIDEyIDMxIDAzIEFzc2lzdGl2ZSBwcm9kdWN0cyBmb3Igc2xpZGluZyBhbmQgdHVybmluZyBzdWNoIGFzIGJ1dCBub3QgbGltaXRlZCB0bzogRGV2aWNlcyBmb3IgY2hhbmdpbmcgcG9zaXRpb24gb3IgZGlyZWN0aW9uIG9mIGEgcGVyc29uIHVzaW5nIHNsaWRpbmcgb3IgdHVybmluZyB0ZWNobmlxdWVzLiBUaGUgb25seSBwcm9kdWN0cyBpbmNsdWRlZCBhcmUgdGhvc2UgaW50ZW5kZWQgdG8gYmUgdXNlZCBpbiBhIGx5aW5nIHBvc2l0aW9uIGFuZCByZW1haW4gaW4gc2l0dSBhcyBwYXJ0IG9mIHRoZSBseWluZyBzdXBwb3J0IHN1cmZhY2UuIFRoZXkgYXJlIHRoZSBmb2xsb3dpbmc6IOKAlCAgICAgICAgIHNsaWRpbmcgcHJvZHVjdHMgdGhhdCBnbGlkZSBvbmUgd2F5IGFuZCBsb2NrIHRoZSBvdGhlciB3YXk7IOKAlCAgICAgICAgIHNoZWV0cyBhbmQgdW5kZXJsYXlzIGluIGZsZXhpYmxlIG1hdGVyaWFscyB3aXRoIGxvdyBmcmljdGlvbjsg4oCUICAgICAgICAgZmFicmljIHNvbGQgYnkgdGhlIG1ldHJlLCBjdXQgYXMgcmVxdWlyZWQgZm9yIHJlcG9zaXRpb25pbmcgdXNlOyDigJQgICAgICAgICBwb3dlcmVkIHR1cm5pbmcgcHJvZHVjdDsgVGhpcyBleGNsdWRlcyBzbGlkaW5nIGJvYXJkcyB1bmxlc3MgdGhlIHByb2R1Y3QgaXMgaW50ZW5kZWQgdG8gYmUgbGVmdCBpbiBzaXR1LiAwOSAwNyAwNiBQb3NpdGlvbmluZyBwaWxsb3dzLCBwb3NpdGlvbmluZyBjdXNoaW9ucyBhbmQgcG9zaXRpb25pbmcgc3lzdGVtcyBzdWNoIGFzIGJ1dCBub3QgbGltaXRlZCB0bzog4oCUICAgICAgICAgbGVnIHBvc2l0aW9uZXJzLCDigJQgICAgICAgICBhcm0gcG9zaXRpb25lcnMsIGFuZCDigJQgICAgICAgICBtdWx0aXB1cnBvc2UgYm9keSBwb3NpdGlvbmVycy4gMTggMTIgMTUgQmVkZGluZyBzdWNoIGFzIGJ1dCBub3QgbGltaXRlZCB0bzog4oCUICAgICAgICAgZHJhdyBzaGVldHMuICIsIm9iamVjdElEIjoiNjc3NTBfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gMjAzNDItMToyMDE5IEFzc2lzdGl2ZSBwcm9kdWN0cyBmb3IgdGlzc3VlIGludGVncml0eSB3aGVuIGx5aW5nIGRvd24g4oCUIFBhcnQgMTogR2VuZXJhbCByZXF1aXJlbWVudHMiLCJtYXRjaExldmVsIjoicGFydGlhbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIl19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgZ2VuZXJhbCByZXF1aXJlbWVudHMgYW5kIHJlbGF0ZWQgdGVzdCBtZXRob2RzIHRoYXQgYXJlIHJlbGV2YW50IHRvIGFzc2lzdGl2ZSBwcm9kdWN0cyBmb3IgdGlzc3VlIGludGVncml0eSAoQVBUSSkgaW4gdGhlIGx5aW5nIHBvc2l0aW9uIGluIGRpZmZlcmVudCBhcHBsaWNhdGlvbiBlbnZpcm9ubWVudHMgc3VjaCBhcyBob3NwaXRhbHMsIGhvbWUgY2FyZSBhbmQgaW5zdGl0dXRpb25zLiBUaGlzIGRvY3VtZW50IGFwcGxpZXMgdG8gdGhlIHNhZmV0eSBvZiBBUFRJLCB3aGljaCBhcmUgaW50ZW5kZWQgdG8gcmVtYWluIGluIHNpdHUgZHVyaW5nIHBlcmlvZHMgb2YgbHlpbmcsIGFuZCB0byBwcmV2ZW50IGFuZC9vciB0cmVhdCBwcmVzc3VyZSBpbmp1cmllcy4gVGhpcyBkb2N1bWVudCBjb3ZlcnMgYSByYW5nZSBvZiBkaWZmZXJlbnQgbHlpbmcgc3VwcG9ydCBzdXJmYWNlcyBpbnRlbmRlZCB0byBiZSB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggdGhlIGFwcHJvcHJpYXRlIHN1cHBvcnQgcGxhdGZvcm0gb3IgYXMgYSB3aG9sZSBpbnRlZ3JhdGVkIHN5c3RlbS4gVGhpcyBkb2N1bWVudCBhbHNvIGNvdmVycyBhc3Npc3RpdmUgcHJvZHVjdHMgcHJpbWFyaWx5IGludGVuZGVkIGZvciB0aXNzdWUgaW50ZWdyaXR5IGZvciBjaGFuZ2luZyBhIGx5aW5nIHBvc2l0aW9uIGFuZCBhc3Npc3RpdmUgcHJvZHVjdHMgZm9yIG1haW50YWluaW5nIGEgbHlpbmcgcG9zaXRpb24uIFRoaXMgZG9jdW1lbnQgZG9lcyBub3QgYXBwbHkgdG8gbHlpbmcgc3VwcG9ydCBzdXJmYWNlcyB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggaW5jdWJhdG9ycy4gVGhpcyBkb2N1bWVudCBhZGRyZXNzZXMgdGhlIGNvbWJpbmF0aW9uIG9mIGEgZnVsbCBib2R5IHN1cHBvcnQgc3VyZmFjZSBhbmQgYW4gYWRqdXN0YWJsZSBtYXR0cmVzcyBzdXBwb3J0IHBsYXRmb3JtLiBJdCBhbHNvIGNvdmVycyBzYWZldHkgYW5kIHBlcmZvcm1hbmNlIHRlc3QgbWV0aG9kcyB0byBlbnN1cmUgcHJvdGVjdGlvbiBhZ2FpbnN0IGluanVyaWVzIHRvIHRoZSB1c2VyLiBUaGlzIGRvY3VtZW50IHNwZWNpZmllcyByZXF1aXJlbWVudHMgYW5kIHRlc3QgbWV0aG9kcyBmb3IgQVBUSSB3aXRoaW4gdGhlIGZvbGxvd2luZyBjbGFzc2lmaWNhdGlvbnMgb2YgPGVtPklTTzwvZW0+IDk5OTk6MjAxNjogMDQgMzMgMDYgQXNzaXN0aXZlIHByb2R1Y3RzIGZvciB0aXNzdWUgaW50ZWdyaXR5IHdoZW4gbHlpbmcgZG93biBzdWNoIGFzIGJ1dCBub3QgbGltaXRlZCB0bzog4oCUICAgICAgICAgTWF0dHJlc3NlcyBhbmQgbWF0dHJlc3Mgb3ZlcmxheXMgZm9yIHByZXNzdXJlIGluanVyeSBwcmV2ZW50aW9uOyDigJQgICAgICAgICBNYXR0cmVzcyBjb3ZlcmluZ3MgZm9yIHByZXNzdXJlIGluanVyeSBwcmV2ZW50aW9uIG1hdHRyZXNzZXMuIDEyIDxlbT4zMSAwPC9lbT4zIEFzc2lzdGl2ZSBwcm9kdWN0cyBmb3Igc2xpZGluZyBhbmQgdHVybmluZyBzdWNoIGFzIGJ1dCBub3QgbGltaXRlZCB0bzogRGV2aWNlcyBmb3IgY2hhbmdpbmcgcG9zaXRpb24gb3IgZGlyZWN0aW9uIG9mIGEgcGVyc29uIHVzaW5nIHNsaWRpbmcgb3IgdHVybmluZyB0ZWNobmlxdWVzLiBUaGUgb25seSBwcm9kdWN0cyBpbmNsdWRlZCBhcmUgdGhvc2UgaW50ZW5kZWQgdG8gYmUgdXNlZCBpbiBhIGx5aW5nIHBvc2l0aW9uIGFuZCByZW1haW4gaW4gc2l0dSBhcyBwYXJ0IG9mIHRoZSBseWluZyBzdXBwb3J0IHN1cmZhY2UuIFRoZXkgYXJlIHRoZSBmb2xsb3dpbmc6IOKAlCAgICAgICAgIHNsaWRpbmcgcHJvZHVjdHMgdGhhdCBnbGlkZSBvbmUgd2F5IGFuZCBsb2NrIHRoZSBvdGhlciB3YXk7IOKAlCAgICAgICAgIHNoZWV0cyBhbmQgdW5kZXJsYXlzIGluIGZsZXhpYmxlIG1hdGVyaWFscyB3aXRoIGxvdyBmcmljdGlvbjsg4oCUICAgICAgICAgZmFicmljIHNvbGQgYnkgdGhlIG1ldHJlLCBjdXQgYXMgcmVxdWlyZWQgZm9yIHJlcG9zaXRpb25pbmcgdXNlOyDigJQgICAgICAgICBwb3dlcmVkIHR1cm5pbmcgcHJvZHVjdDsgVGhpcyBleGNsdWRlcyBzbGlkaW5nIGJvYXJkcyB1bmxlc3MgdGhlIHByb2R1Y3QgaXMgaW50ZW5kZWQgdG8gYmUgbGVmdCBpbiBzaXR1LiAwOSAwNyAwNiBQb3NpdGlvbmluZyBwaWxsb3dzLCBwb3NpdGlvbmluZyBjdXNoaW9ucyBhbmQgcG9zaXRpb25pbmcgc3lzdGVtcyBzdWNoIGFzIGJ1dCBub3QgbGltaXRlZCB0bzog4oCUICAgICAgICAgbGVnIHBvc2l0aW9uZXJzLCDigJQgICAgICAgICBhcm0gcG9zaXRpb25lcnMsIGFuZCDigJQgICAgICAgICBtdWx0aXB1cnBvc2UgYm9keSBwb3NpdGlvbmVycy4gMTggMTIgMTUgQmVkZGluZyBzdWNoIGFzIGJ1dCBub3QgbGltaXRlZCB0bzog4oCUICAgICAgICAgZHJhdyBzaGVldHMuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIzMSIsIjAiXX19fV0sIm5iSGl0cyI6NywicGFnZSI6MCwibmJQYWdlcyI6MSwiaGl0c1BlclBhZ2UiOjEwMCwiZXhoYXVzdGl2ZU5iSGl0cyI6dHJ1ZSwiZXhoYXVzdGl2ZVR5cG8iOnRydWUsImV4aGF1c3RpdmUiOnsibmJIaXRzIjp0cnVlLCJ0eXBvIjp0cnVlfSwicXVlcnkiOiJJU08gMzEtMCIsInBhcmFtcyI6InF1ZXJ5PUlTTyszMS0wJmhpdHNQZXJQYWdlPTEwMCZmaWx0ZXJzPWNhdGVnb3J5JTNBc3RhbmRhcmQiLCJwcm9jZXNzaW5nVGltZU1TIjoxLCJwcm9jZXNzaW5nVGltaW5nc01TIjp7InJlcXVlc3QiOnsicm91bmRUcmlwIjoyOTd9fSwic2VydmVyVGltZU1TIjoxfQ==
  recorded_at: Thu, 06 Jul 2023 23:41:45 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/07/63/76389.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=9CFB423A9705F807A5AF001D3D9F2B97; Path=/; Secure; HttpOnly
      Location:
      - "/standard/76389.html"
      Content-Length:
      - '0'
      Date:
      - Thu, 06 Jul 2023 23:41:48 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 06 Jul 2023 23:41:47 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/00/24/2405.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=B63B502659E5025A8A4DC9D914D6997B; Path=/; Secure; HttpOnly
      Location:
      - "/standard/2405.html"
      Content-Length:
      - '0'
      Date:
      - Thu, 06 Jul 2023 23:41:47 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 06 Jul 2023 23:41:47 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/2405.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=8AA4261439970EE3233EF86CB1CE7756; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Thu, 06 Jul 2023 23:41:50 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 06 Jul 2023 23:41:50 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/76389.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=92C72F9AC9606857799412B2F6982E2F; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Thu, 06 Jul 2023 23:41:50 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 06 Jul 2023 23:41:50 GMT
recorded_with: VCR 6.1.0
