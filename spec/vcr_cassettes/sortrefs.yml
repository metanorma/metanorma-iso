---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-110","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.1.1), Ruby (3.0.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 26 Oct 2021 13:00:59 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Tue, 26 Oct 2021 13:00:59 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/05/16/51653.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=8DEAE6338137FEAAEFD361944DFA2E32; Path=/; Secure; HttpOnly
      Location:
      - "/standard/51653.html"
      Content-Length:
      - '0'
      Date:
      - Tue, 26 Oct 2021 13:01:01 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Tue, 26 Oct 2021 13:01:01 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/51653.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=026A896AA59F50563C3999268AAABEDC; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Tue, 26 Oct 2021 08:01:02 CDT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Tue, 26 Oct 2021 13:01:03 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-61","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.1.1), Ruby (3.0.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 26 Oct 2021 13:01:04 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Tue, 26 Oct 2021 13:01:04 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/06/30/63086.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=B2A66149C890D3332B78ED84B613E3CE; Path=/; Secure; HttpOnly
      Location:
      - "/standard/63086.html"
      Content-Length:
      - '0'
      Date:
      - Tue, 26 Oct 2021 13:01:05 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Tue, 26 Oct 2021 13:01:05 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/63086.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=E0BC9A5D55B049D106361856EDBE0B86; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Tue, 26 Oct 2021 13:01:07 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Tue, 26 Oct 2021 13:01:07 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-8","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.1.1), Ruby (3.0.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 26 Oct 2021 13:01:09 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Tue, 26 Oct 2021 13:01:09 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/06/08/60805.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=C15EF6FA1887ECECF9E8CB77EFAA0FB2; Path=/; Secure; HttpOnly
      Location:
      - "/standard/60805.html"
      Content-Length:
      - '0'
      Date:
      - Tue, 26 Oct 2021 08:01:09 CDT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Tue, 26 Oct 2021 13:01:10 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/60805.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=F37B09D0DBAA3B20E4A3FA7580C6188E; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Tue, 26 Oct 2021 13:01:11 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CgoKPGh0bWwgbGFuZz0iZW4iPgogIDxoZWFkPgogICAgCiAgICA8c2NyaXB0PgogICAgICBkYXRhTGF5ZXIgPSBbewogICAgICAgICdwYWdlVHlwZSc6ICdpdHM6c3RhbmRhcmQnLAogICAgICAgICdwYWdlTGFuZ3VhZ2UnOiAnZW4nCiAgICAgIH1dOwogICAgPC9zY3JpcHQ+CgogICAgPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CiAgICA8c2NyaXB0PihmdW5jdGlvbih3LGQscyxsLGkpe3dbbF09d1tsXXx8W107d1tsXS5wdXNoKHsnZ3RtLnN0YXJ0JzoKICAgICAgICBuZXcgRGF0ZSgpLmdldFRpbWUoKSxldmVudDonZ3RtLmpzJ30pO3ZhciBmPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0sCiAgICAgIGo9ZC5jcmVhdGVFbGVtZW50KHMpLGRsPWwhPSdkYXRhTGF5ZXInPycmbD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPQogICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RtLmpzP2lkPScraStkbDtmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosZik7CiAgICB9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJ2RhdGFMYXllcicsJ0dUTS1URkdLUVFCJyk7PC9zY3JpcHQ+CiAgICA8IS0tIEVuZCBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIj4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+CiAgICA8dGl0bGU+SVNPIC0gSVNPIDgwMDAtODoyMDE1IC0gRGF0YSBxdWFsaXR5IOKAlCBQYXJ0IDg6IEluZm9ybWF0aW9uIGFuZCBkYXRhIHF1YWxpdHk6IENvbmNlcHRzIGFuZCBtZWFzdXJpbmc8L3RpdGxlPgoKICAgIAogICAgICA8IS0tCiAgICAgIDxsaW5rIHJlbD0icHJlY29ubmVjdCIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy8iIGNyb3Nzb3JpZ2luIC8+CiAgICAgIDxsaW5rIHJlbD0icHJlbG9hZCIgYXM9InNjcmlwdCIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuNS93b29kLmZ1bGwubWluLmpzIiBjcm9zc29yaWdpbiAvPgogICAgICA8bGluayByZWw9InByZWxvYWQiIGFzPSJzdHlsZSIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuNS93b29kLmZ1bGwubWluLmNzcyIgY3Jvc3NvcmlnaW4gLz4KICAgICAgPGxpbmsgcmVsPSJwcmVsb2FkIiBhcz0iZm9udCIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvZm9udHMvYm9vdHN0cmFwLzMuMy4yL2dseXBoaWNvbnMtaGFsZmxpbmdzLXJlZ3VsYXIud29mZjIiIGNyb3Nzb3JpZ2luIC8+CiAgICAgIDxsaW5rIHJlbD0icHJlbG9hZCIgYXM9ImZvbnQiIGhyZWY9Imh0dHBzOi8vY2RuLmlzby5vcmcvcmVzb3VyY2VzL2ZvbnRzL21ldGF3ZWJwcm8vNy41MDQvTWV0YVdlYlByby1Cb2xkLndvZmYiIGNyb3Nzb3JpZ2luIC8+CiAgICAgIDxsaW5rIHJlbD0icHJlbG9hZCIgYXM9ImZvbnQiIGhyZWY9Imh0dHBzOi8vY2RuLmlzby5vcmcvcmVzb3VyY2VzL2ZvbnRzL21ldGF3ZWJwcm8vNy41MDQvTWV0YVdlYlByby1Ob3JtYWwud29mZiIgY3Jvc3NvcmlnaW4gLz4KICAgICAgPGxpbmsgcmVsPSJwcmVsb2FkIiBhcz0iZm9udCIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvZm9udHMvbWV0YXdlYnByby83LjUwNC9NZXRhV2ViUHJvLU5vcm1hbEl0YS53b2ZmIiBjcm9zc29yaWdpbiAvPgogICAgICAtLT4KCiAgICAKCiAgICA8bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy9zdGFuZGFyZC82MDgwNS5odG1sIiAvPgoKICAgIDwhLS0gc3RhcnQgZmF2aWNvbnMgLS0+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIGhyZWY9Imh0dHBzOi8vY2RuLmlzby5vcmcvcmVzb3VyY2VzL3dvb2QvMy4zLjUvaW1nL2lzby9mYXZpY29uL3JlZC9hcHBsZS10b3VjaC1pY29uLTE1MngxNTItcHJlY29tcG9zZWQucG5nIj4KICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuNS9pbWcvaXNvL2Zhdmljb24vcmVkL2Zhdmljb24uaWNvIj4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUNvbG9yIiBjb250ZW50PSIjZWVlIj4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUltYWdlIiBjb250ZW50PSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy93b29kLzMuMy41L2ltZy9pc28vZmF2aWNvbi9yZWQvbXN0aWxlLTE0NHgxNDQucG5nIj4KICAgIDwhLS0gZW5kIGZhdmljb25zIC0tPgoKICAgIAogICAgPG1ldGEgbmFtZT0idGhlbWUtY29sb3IiIGNvbnRlbnQ9IiMzMzMiPgoKICAKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgp2YXIgY29udGV4dEpzUGFyYW1ldGVycz17Y29udGV4dFBhdGg6IiIsbGFuZzoiZW4iLHVpbGFuZzoiZW4iLHNpdGVVdWlkOiI0MzkxNDZmOC02NzdlLTRkZGUtYjZjNi1iNjkyYjc1MzRmNTIiLHdjYWc6ZmFsc2UsY2tlQ2ZnOiIifTsgdmFyIENLRURJVE9SX0JBU0VQQVRIPSIvbW9kdWxlcy9ja2VkaXRvci9qYXZhc2NyaXB0LyI7IHZhciBzY2F5dF9jdXN0b21fcGFyYW1zPW5ldyBBcnJheSgpOyBzY2F5dF9jdXN0b21fcGFyYW1zWydzTGFuZyddPSdlbl9VUyc7Cjwvc2NyaXB0Pgo8bGluayBpZD0ic3RhdGljQXNzZXRDU1MwIiByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vY2RuLmlzby5vcmcvcmVzb3VyY2VzL3dvb2QvMy4zLjUvd29vZC5mdWxsLm1pbi5jc3MiIG1lZGlhPSJzY3JlZW4scHJpbnQsaGFuZGhlbGQiIHR5cGU9InRleHQvY3NzIi8+CjxsaW5rIGlkPSJzdGF0aWNBc3NldENTUzEiIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL21vZHVsZXMvYXNzZXRzL2Nzcy9sYW5ndWFnZVN3aXRjaGluZ0xpbmtzLmNzcz8xNTMyMDAzNTA1NzY2IiBtZWRpYT0ic2NyZWVuIiB0eXBlPSJ0ZXh0L2NzcyIvPgo8bGluayBpZD0ic3RhdGljQXNzZXRDU1MyIiByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9tb2R1bGVzL2lzby1qYWhpYS1zZXJ2aWNlLW1vZHVsZS9jc3MvY2F0YWxvZ3VlLmNzcz8xNjI3NDU3MzIxMzEwIiBtZWRpYT0ic2NyZWVuIiB0eXBlPSJ0ZXh0L2NzcyIvPgo8c2NyaXB0IGlkPSJzdGF0aWNBc3NldEphdmFzY3JpcHQwIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuNS93b29kLmZ1bGwubWluLmpzIiAgPjwvc2NyaXB0Pgo8c2NyaXB0IGlkPSJzdGF0aWNBc3NldEphdmFzY3JpcHQxIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL21vZHVsZXMvaXNvLWphaGlhLXNlcnZpY2UtbW9kdWxlL2phdmFzY3JpcHQvY2F0YWxvZ3VlLmpzPzE2Mjc0NTczMjEzMTAiICA+PC9zY3JpcHQ+CjxzY3JpcHQgaWQ9InN0YXRpY0Fzc2V0SmF2YXNjcmlwdDIiIHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvamF2YXNjcmlwdC9jdXN0b20uanM/MTYzMDQ5MzkyMjE1MyIgID48L3NjcmlwdD4KCiAgICA8bWV0YSBuYW1lPSJjYXRlZ29yeSIgY29udGVudD0icCIgLz4KICAKICAgIDxtZXRhIG5hbWU9InB1YmRhdGUiIGNvbnRlbnQ9IjIwMjEwMzA1IiAvPgogIAoKICA8IS0tIFR3aXR0ZXIgQ2FyZCBkYXRhIC0tPgogIDxtZXRhIG5hbWU9InR3aXR0ZXI6c2l0ZSIgY29udGVudD0iQGlzb3N0YW5kYXJkcyIgLz4KCiAgPCEtLSBPcGVuIEdyYXBoIGRhdGEgLS0+CiAgPG1ldGEgcHJvcGVydHk9Im9nOnNpdGVfbmFtZSIgY29udGVudD0iSVNPIiAvPgogIDxtZXRhIHByb3BlcnR5PSJvZzp1cmwiIGNvbnRlbnQ9Imh0dHBzOi8vd3d3Lmlzby5vcmcvY21zL3JlbmRlci9saXZlL2VuL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA2LzA4LzYwODA1Lmh0bWwiIC8+CiAgCiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dHlwZSIgY29udGVudD0id2Vic2l0ZSIgLz4KICAKICAgIDwhLS0gVGh1bWJuYWlsIGltYWdlIChmb3IgdHdpdHRlciBhbmQgT3BlbiBHcmFwaCkgLS0+CiAgICA8bWV0YSBuYW1lPSJ0aHVtYm5haWwiIGNvbnRlbnQ9Imh0dHBzOi8vY2RuLmlzby5vcmcvcmVzb3VyY2VzL3dvb2QvMy4zLjMvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiIC8+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOmNhcmQiIGNvbnRlbnQ9InN1bW1hcnkiIC8+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOmltYWdlIiBjb250ZW50PSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy93b29kLzMuMy4zL2ltZy9pc28vaXNvLWxvZ28tcHJpbnQuZ2lmIiAvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlIiBjb250ZW50PSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy93b29kLzMuMy4zL2ltZy9pc28vaXNvLWxvZ28tcHJpbnQuZ2lmIiAvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlOmFsdCIgY29udGVudD0iSVNPIGxvZ28iIC8+CiAgCiAgICA8IS0tIFRpdGxlIChmb3IgdHdpdHRlciBhbmQgT3BlbiBHcmFwaCkgLS0+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOnRpdGxlIiBjb250ZW50PSJJU08gODAwMC04OjIwMTUiIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9IklTTyA4MDAwLTg6MjAxNSIgLz4KICAKICAgIDwhLS0gRGVzY3JpcHRpb24gKGZvciBnb29nbGUsIHR3aXR0ZXIgYW5kIE9wZW4gR3JhcGgpIC0tPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjpkZXNjcmlwdGlvbiIgY29udGVudD0iRGF0YSBxdWFsaXR5IOKAlCBQYXJ0IDg6IEluZm9ybWF0aW9uIGFuZCBkYXRhIHF1YWxpdHk6IENvbmNlcHRzIGFuZCBtZWFzdXJpbmciIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6ZGVzY3JpcHRpb24iIGNvbnRlbnQ9IkRhdGEgcXVhbGl0eSDigJQgUGFydCA4OiBJbmZvcm1hdGlvbiBhbmQgZGF0YSBxdWFsaXR5OiBDb25jZXB0cyBhbmQgbWVhc3VyaW5nIiAvPgogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IkRhdGEgcXVhbGl0eSDigJQgUGFydCA4OiBJbmZvcm1hdGlvbiBhbmQgZGF0YSBxdWFsaXR5OiBDb25jZXB0cyBhbmQgbWVhc3VyaW5nIiAvPgogIAoKICA8IS0tIEZhY2Vib29rIGFkbWlucyA6IExpb25lbCxNYXJpYSAtLT4KICA8bWV0YSBwcm9wZXJ0eT0iZmI6YWRtaW5zIiBjb250ZW50PSIxMDAwMDExMTYwNzk2NzYsMTAwMDAxNDQwMDAzMzA1IiAvPgoKICAKCjwvaGVhZD4KICA8Ym9keSBjbGFzcz0idGhlbWUtcmVkIiBpZD0ib2ZmY2FudmFzLWNvbnRlbnQiPgogICAgPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgKG5vc2NyaXB0KSAtLT4KICAgIDxub3NjcmlwdCBhcmlhLWhpZGRlbj0idHJ1ZSI+PGlmcmFtZSBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL25zLmh0bWw/aWQ9R1RNLVRGR0tRUUIiIGhlaWdodD0iMCIgd2lkdGg9IjAiIHN0eWxlPSJkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW4iPjwvaWZyYW1lPjwvbm9zY3JpcHQ+CiAgICA8IS0tIEVuZCBHb29nbGUgVGFnIE1hbmFnZXIgKG5vc2NyaXB0KSAtLT4KICAgIDxhIGNsYXNzPSJza2lwLW5hdmlnYXRpb24gYnRuIGJ0bi1pbmZvIHNyLW9ubHkgc3Itb25seS1mb2N1c2FibGUiIGhyZWY9IiNjb250ZW50Ij5Ta2lwIHRvIG1haW4gY29udGVudDwvYT4KICAgIDwhLS0gSGVhZGVyIElTTy5PUkcgLS0+CiAgICA8aGVhZGVyIHJvbGU9ImJhbm5lciIgYXJpYS1sYWJlbD0iSGVhZGVyIiBjbGFzcz0idGhlbWUtcmVkIGhlYWRlci1hY2VyICIgaWQ9InBhZ2UtdG9wIj4KICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWludmVyc2UgbmF2YmFyLWZpeGVkLXRvcCBuYXZiYXItZGVmYXVsdCBuYXZiYXItYWNlciB0aGVtZS1yZWQiIGRhdGEtc3B5PSJhZmZpeCIgZGF0YS1vZmZzZXQtdG9wPSIyMDAiPgogICAgICAgICAgPGJ1dHRvbiByb2xlPSJidXR0b24iIGlkPSJvZmZjYW52YXMtYnRuIiBjbGFzcz0iYnRuIGJ0bi10cmFuc3BhcmVudCBwdWxsLXJpZ2h0IiBkYXRhLXRvZ2dsZT0ib3Blbi1vZmZjYW52YXMiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLW1lbnUtaGFtYnVyZ2VyIj48L3NwYW4+PHNwYW4gY2xhc3M9ImhpZGRlbi14eHMiPiBNZW51PC9zcGFuPjwvYnV0dG9uPgoKICAgICAgICAgIDwhLS0gU0lERSBOQVZJR0FUSU9OIC0tPgogICAgICAgICAgPG5hdiByb2xlPSJuYXZpZ2F0aW9uIiBhcmlhLWxhYmVsPSJTaWRlIE5hdmlnYXRpb24iIGNsYXNzPSJzaWRlbmF2IiBpZD0ib2ZmY2FudmFzLXBhbmVsIj48dWwgcm9sZT0ibWVudWJhciIgY2xhc3M9Im5hdiBuYXZiYXItbmF2IG5hdi1sZXZlbDEiPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4gZHJvcGRvd24gZmlyc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3N0YW5kYXJkcy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlN0YW5kYXJkczwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9Im5hdiBuYXZiYXItbmF2IG5hdi1sZXZlbDIgZHJvcGRvd24tbWVudSI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBkcm9wZG93biBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvYmVuZWZpdHMtb2Ytc3RhbmRhcmRzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+QmVuZWZpdHM8L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBuYXYtbGV2ZWwzIGRyb3Bkb3duLW1lbnUiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvaXNvLWFuZC1zbWVzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+U01FczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9pc28tYW5kLWNvbnN1bWVycy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPkNvbnN1bWVyczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9pc28tYW5kLXBvbGljeS1tYWtlcnMuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5JU08gYW5kIHBvbGljeSBtYWtlcnM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gbGFzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc3RhbmRhcmRzLWluLWFjdGlvbi5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlN0YW5kYXJkcyBpbiBhY3Rpb248L2E+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvcG9wdWxhci1zdGFuZGFyZHMuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5Qb3B1bGFyIHN0YW5kYXJkczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4gZHJvcGRvd24iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvY29uZm9ybWl0eS1hc3Nlc3NtZW50Lmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+Q2VydGlmaWNhdGlvbiAmIGNvbmZvcm1pdHk8L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBuYXYtbGV2ZWwzIGRyb3Bkb3duLW1lbnUiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvY2VydGlmaWNhdGlvbi5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPkNlcnRpZmljYXRpb248L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvY2FzY28uaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5DQVNDTzwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii90aGUtaXNvLXN1cnZleS5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlRoZSBJU08gU3VydmV5PC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGxhc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3Jlc291cmNlcy1mb3ItY29uZm9ybWl0eS1hc3Nlc3NtZW50Lmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+UmVzb3VyY2VzPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGxhc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3NkZ3MuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5TREdzPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBkcm9wZG93biI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9hYm91dC11cy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPkFib3V0IHVzPC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0ibmF2IG5hdmJhci1uYXYgbmF2LWxldmVsMiBkcm9wZG93bi1tZW51Ij48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Imhhc0NoaWxkcmVuIGRyb3Bkb3duIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii93aGF0LXdlLWRvLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+V2hhdCB3ZSBkbzwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9Im5hdiBuYXZiYXItbmF2IG5hdi1sZXZlbDMgZHJvcGRvd24tbWVudSI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9kZXZlbG9waW5nLXN0YW5kYXJkcy5odG1sIiAgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5EZXZlbG9waW5nIHN0YW5kYXJkczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9yZXNlYXJjaC1hbmQtZWR1Y2F0aW9uLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+UmVzZWFyY2g8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvY2FwYWNpdHktYnVpbGRpbmcuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5DYXBhY2l0eSBidWlsZGluZzwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBsYXN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9lZHVjYXRpb24tYWJvdXQtc3RhbmRhcmRzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+RWR1Y2F0aW9uIGFib3V0IHN0YW5kYXJkczwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9zdHJ1Y3R1cmUuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5TdHJ1Y3R1cmU8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvbWVtYmVycy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPk1lbWJlcnM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvYW5ub3VuY2VtZW50cy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPkFubm91bmNlbWVudHM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Imhhc0NoaWxkcmVuIGRyb3Bkb3duIGxhc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3N0cmF0ZWd5MjAzMC5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlN0cmF0ZWd5PC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0ibmF2IG5hdmJhci1uYXYgbmF2LWxldmVsMyBkcm9wZG93bi1tZW51Ij48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvaG9tZS9hYm91dC11cy9zdHJhdGVneS0yMDMwL2RyaXZlcnMtb2YtY2hhbmdlLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+RHJpdmVycyBvZiBjaGFuZ2U8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvaG9tZS9hYm91dC11cy9zdHJhdGVneS0yMDMwL291ci1nb2Fscy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPk91ciBnb2FsczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9ob21lL2Fib3V0LXVzL3N0cmF0ZWd5LTIwMzAvcHJpb3JpdGllcy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlByaW9yaXRpZXM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gbGFzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvaG9tZS9hYm91dC11cy9zdHJhdGVneS0yMDMwL21lYXN1cmluZy1zdWNjZXNzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+TWVhc3VyaW5nIHN1Y2Nlc3M8L2E+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Imhhc0NoaWxkcmVuIGRyb3Bkb3duIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL25ld3MuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5OZXdzPC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0ibmF2IG5hdmJhci1uYXYgbmF2LWxldmVsMiBkcm9wZG93bi1tZW51Ij48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZXZlbnRzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+RXZlbnRzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL21lZGlhLWtpdC5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPk1lZGlhIGtpdDwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4gZHJvcGRvd24iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZGV2ZWxvcGluZy1zdGFuZGFyZHMuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5UYWtpbmcgcGFydDwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9Im5hdiBuYXZiYXItbmF2IG5hdi1sZXZlbDIgZHJvcGRvd24tbWVudSI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBkcm9wZG93biBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvd2hvLWRldmVsb3BzLXN0YW5kYXJkcy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPldobyBkZXZlbG9wcyBzdGFuZGFyZHM8L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBuYXYtbGV2ZWwzIGRyb3Bkb3duLW1lbnUiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvdGVjaG5pY2FsLWNvbW1pdHRlZXMuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5UZWNobmljYWwgQ29tbWl0dGVlczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9vdGhlci1ib2RpZXMtZGV2ZWxvcGluZy1zdGFuZGFyZHMuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5PdGhlciBib2RpZXM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gbGFzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvb3JnYW5pemF0aW9ucy1pbi1jb29wZXJhdGlvbi13aXRoLWlzby5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPk9yZ2FuaXphdGlvbnMgaW4gY29vcGVyYXRpb248L2E+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZGVsaXZlcmFibGVzLWFsbC5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPkRlbGl2ZXJhYmxlczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9nZXQtaW52b2x2ZWQuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5HZXQgaW52b2x2ZWQ8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gbGFzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvcmVzb3VyY2VzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+UmVzb3VyY2VzPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBkcm9wZG93biBpblBhdGggbGFzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc3RvcmUuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5TdG9yZTwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9Im5hdiBuYXZiYXItbmF2IG5hdi1sZXZlbDIgZHJvcGRvd24tbWVudSI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGluUGF0aCBhY3RpdmUgZmlyc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3N0YW5kYXJkcy1jYXRhbG9ndWUvYnJvd3NlLWJ5LWljcy5odG1sIiAgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5TdGFuZGFyZHMgY2F0YWxvZ3VlPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3B1YmxpY2F0aW9uLWxpc3QuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5QdWJsaWNhdGlvbnMgYW5kIHByb2R1Y3RzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGxhc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy9vYnAvdWkvI2FjY291bnQvcHJvZHVjdHMiICB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5NeSBhY2NvdW50PC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbmF2PjxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KCiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgb2ZmY2FudmFzLXJpZ2lkIj4KICAgICAgICAgICAgPGEgY2xhc3M9ImxvZ28gaXNvbG9nbyIgaHJlZj0iL2hvbWUuaHRtbCIgdGl0bGU9IkludGVybmF0aW9uYWwgT3JnYW5pemF0aW9uIGZvciBTdGFuZGFyZGl6YXRpb24iIGFsdD0iSVNPIGxvZ28iPjwvYT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXNvbG9nby1wcmludCI+PGltZyBzcmM9Imh0dHBzOi8vY2RuLmlzby5vcmcvcmVzb3VyY2VzL3dvb2QvMy4zLjUvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiIGFsdD0iSVNPIGxvZ28gZm9yIHByaW50Ii8+PC9kaXY+CgogICAgICAgICAgICA8dWwgaWQ9InV0aWxpdHlOYXYiIGFyaWEtbGFiZWw9IlV0aWxpdGllcyBOYXZpZ2F0aW9uIiBjbGFzcz0ibmF2IG5hdmJhci1uYXYgbmF2YmFyLXJpZ2h0Ij4KICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1nbHlwaGljb24gbmF2LXNlYXJjaCIgaWQ9Im5hdi1zZWFyY2giPgogICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9ImV4cGFuZGFibGUgaXNvc2VhcmNoIiByb2xlPSJzZWFyY2giPgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaGlkZGVuIiBkYXRhLXVybGJhc2U9Ii9jbXMvcmVuZGVyL2xpdmUvZW4iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhpZGRlbiIgZGF0YS1zZWFyY2hwYWdlcGF0aD0iL3NpdGVzL2lzb29yZy9zZWFyY2giPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPGxhYmVsIGlkPSJpbnB1dC1zZWFyY2giIGNsYXNzPSJjb250cm9sLWxhYmVsIGhpZGRlbi14cyIgZm9yPSJpbnB1dC1zZWFyY2giPlNlYXJjaDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzZWFyY2giIHBsYWNlaG9sZGVyPSIiIGFyaWEtbGFiZWxsZWRieT0iaW5wdXQtc2VhcmNoIj4KICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giIHR5cGU9InN1Ym1pdCIgYXJpYS1sYWJlbGxlZGJ5PSJpbnB1dC1zZWFyY2giPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtZ2x5cGhpY29uIj4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaG9wcGluZy1jYXJ0LWxpbmsiIGhyZWY9Ii93ZWJzdG9yZS9zaG9wcGluZ2Jhc2tldD9tZW1iZXJJZD1JU08mZ3VpbGFuZz1lbiIgdGl0bGU9IlNob3BwaW5nIGNhcnQiIGFyaWEtbGFiZWw9IlNob3BwaW5nIGNhcnQiPgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zaG9wcGluZy1jYXJ0IiBpZD0ic2hvcHBpbmdJdGVtcyI+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgCgo8bGkgY2xhc3M9ImRyb3Bkb3duIiBpZD0ibGFuZy1zd2l0Y2hlciI+CiAgPGEgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiBocmVmPSIjIj5FTiA8c3BhbiBjbGFzcz0iY2FyZXQiPjwvc3Bhbj48L2E+CiAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4KICAgIDxsaT48YSBocmVmPSIvZnIvc3RhbmRhcmQvNjA4MDUuaHRtbCI+ZnJhbsOnYWlzPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9ydS9zdGFuZGFyZC82MDgwNS5odG1sIj7RgNGD0YHRgdC60LjQuTwvYT48L2xpPgogIDwvdWw+CjwvbGk+PGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2PgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8IS0tIFRPUCBMRVZFTDEgTkFWSUdBVElPTiAtLT4KICAgICAgICAgICAgPG5hdiByb2xlPSJuYXZpZ2F0aW9uIiBhcmlhLWxhYmVsPSJNYWluIE5hdmlnYXRpb24iIGNsYXNzPSJzaWRlbmF2IiBpZD0ibWFpbk5hdiI+PHVsIHJvbGU9Im1lbnViYXIiIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBuYXZiYXItcmlnaHQgYWZmaXgtdG9wbmF2LWxldmVsMSI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9zdGFuZGFyZHMuaHRtbCI+U3RhbmRhcmRzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2Fib3V0LXVzLmh0bWwiPkFib3V0IHVzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL25ld3MuaHRtbCI+TmV3czwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9kZXZlbG9waW5nLXN0YW5kYXJkcy5odG1sIj5UYWtpbmcgcGFydDwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBpblBhdGggbGFzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc3RvcmUuaHRtbCI+U3RvcmU8L2E+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9uYXY+PGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBpZD0ic2VhcmNoLWN1cnRhaW4iPjwvZGl2PgogICAgICA8L2Rpdj4KCiAgICAgIAoKICAgIDwvaGVhZGVyPgogICAgPCEtLSBNQUlOIENPTlRFTlQgLS0+CiAgICA8bWFpbiByb2xlPSJtYWluIiBpZD0iY29udGVudCIgY2xhc3M9ImFjZXIiIGFyaWEtbGFiZWw9IkNvbnRlbnQiIHRhYmluZGV4PSItMSI+CiAgICAgIAoKCgoKCjxzcGFuIGNsYXNzPSJoaWRkZW4iIGlkPSJpbmRleFJlZmVyZW5jZSIgZGF0YS1pbmRleD0iNjA4MDUgLSBJU08gODAwMC04OjIwMTUgLSBEYXRhIHF1YWxpdHkg4oCUIFBhcnQgODogSW5mb3JtYXRpb24gYW5kIGRhdGEgcXVhbGl0eTogQ29uY2VwdHMgYW5kIG1lYXN1cmluZyI+PC9zcGFuPgoKICA8c3BhbiBjbGFzcz0iaGlkZGVuIiBpZD0iaXRlbVJlZmVyZW5jZSI+SVNPIDgwMDAtODoyMDE1PC9zcGFuPgoKPHNlY3Rpb24gaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvUHJvZHVjdCIgY2xhc3M9InNlY3Rpb24tbmF2aWdhdGlvbiI+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+CiAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuIiBpdGVtcHJvcD0iY2F0ZWdvcnkiPnA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4iIGl0ZW1wcm9wPSJwcm9kdWN0SUQiIGlkPSJjc051bWJlciI+NjA4MDU8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4iIGl0ZW1wcm9wPSJicmFuZCIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvT3JnYW5pemF0aW9uIj4KICAgICAgICAgIDxkaXYgaXRlbXByb3A9ImxvZ28iIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL0ltYWdlT2JqZWN0Ij4KICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InVybCIgY29udGVudD0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuMy9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIvPgogICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0id2lkdGgiIGNvbnRlbnQ9IjI4MyI+CiAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJoZWlnaHQiIGNvbnRlbnQ9IjI2MSI+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJuYW1lIiBjb250ZW50PSJJU08gLSBJbnRlcm5hdGlvbmFsIE9yZ2FuaXphdGlvbiBmb3IgU3RhbmRhcmRpemF0aW9uIj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPG5hdiByb2xlPSJuYXZpZ2F0aW9uIiBhcmlhLWxhYmVsPSJDaGlsZHJlbiBOYXZpZ2F0aW9uIiBjbGFzcz0iaGVhZGluZy1jb25kZW5zZWQgbmF2LXJlbGF0aXZlcyI+CgogIAogIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZCB3cmFwcGVkLWRhbmdlciB3cmFwcGVkLWgxIj48c3BhbiBjbGFzcz0iaWNvbiAiPjwvc3Bhbj48YSB0YXJnZXQ9IiIgaHJlZj0iL3N0YW5kYXJkcy1jYXRhbG9ndWUvYnJvd3NlLWJ5LWljcy5odG1sInRpdGxlPSJCcm93c2UgdGhlIGZ1bGwgY29sbGVjdGlvbiBvZiBJU08gc3RhbmRhcmRzIGFuZCBmaW5kIHRoZSBvbmVzIHRoYXQgYXBwbHkgdG8geW91ciBzZWN0b3IuIj5JQ1M8L2E+ID4mbmJzcDs8YSBocmVmPSIvZW4vaWNzLzAxLmh0bWwiPjAxPC9hPiA+Jm5ic3A7PGEgaHJlZj0iL2VuL2ljcy8wMS4wNDAuaHRtbCI+MDEuMDQwPC9hPiA+Jm5ic3A7PGEgaHJlZj0iL2VuL2ljcy8wMS4wNDAuMjUuaHRtbCI+MDEuMDQwLjI1PC9hPjwvZGl2PgogIAoKICA8aDE+SVNPIDgwMDAtODoyMDE1PC9oMT4KICA8aDIgY2xhc3M9Im5vLXVwcGVyY2FzZSI+RGF0YSBxdWFsaXR5IOKAlCBQYXJ0IDg6IEluZm9ybWF0aW9uIGFuZCBkYXRhIHF1YWxpdHk6IENvbmNlcHRzIGFuZCBtZWFzdXJpbmc8L2gyPgo8L25hdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9zZWN0aW9uPgoKCiAgPHNlY3Rpb24gY2xhc3M9InNlY3Rpb24tc20gYmctcHJpbWFyeSB2aXNpYmxlLXhzLWJsb2NrIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgIDxoNCBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICA8YSBocmVmPSIjc3RvcmUtYm94IiBjbGFzcz0icGFnZS1zY3JvbGwiPgogICAgICAgICAgICAgIEJ1eSB0aGlzIHN0YW5kYXJkCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9zZWN0aW9uPgoKPHNlY3Rpb24gaWQ9InByb2R1Y3QtZGV0YWlscyI+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC03Ij4KICAgICAgICAKICAgICAgICAgIDxoMz5BYnN0cmFjdCZuYnNwOzxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLW91dGxpbmUiIGlkPSJvYnAtcHJldmlldyIgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmlzby5vcmcvb2JwL3VpLyMhaXNvOnN0ZDo2MDgwNTplbiI+UHJldmlldzwvYT48L2gzPgogICAgICAgICAgPGRpdiBpdGVtcHJvcD0iZGVzY3JpcHRpb24iPgogICAgICAgICAgICA8cD48cD5JU08gODAwMC04OjIwMTUgZGVzY3JpYmVzIGZ1bmRhbWVudGFsIGNvbmNlcHRzIG9mIGluZm9ybWF0aW9uIGFuZCBkYXRhIHF1YWxpdHksIGFuZCBob3cgdGhlc2UgY29uY2VwdHMgYXBwbHkgdG8gcXVhbGl0eSBtYW5hZ2VtZW50IHByb2Nlc3NlcyBhbmQgcXVhbGl0eSBtYW5hZ2VtZW50IHN5c3RlbXMuPC9wPgo8cD5JdCBhbHNvIHNwZWNpZmllcyBwcmVyZXF1aXNpdGVzIGZvciBtZWFzdXJpbmcgaW5mb3JtYXRpb24gYW5kIGRhdGEgcXVhbGl0eSB3aGVuIGV4ZWN1dGVkIHdpdGhpbiBxdWFsaXR5IG1hbmFnZW1lbnQgcHJvY2Vzc2VzIGFuZCBxdWFsaXR5IG1hbmFnZW1lbnQgc3lzdGVtcy48L3A+PC9wPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8YnIvPgogICAgICAgIDxoMz4KICBHZW5lcmFsIGluZm9ybWF0aW9uCiAgPHN1cD48YSBocmVmPSIvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNi8wOC82MDgwNS5kZXRhaWwucnNzIiBjbGFzcz0ic3MtaWNvbiBzcy1zb2NpYWwtY2lyY2xlIHRleHQtd2FybmluZyB0ZXh0LXNtIiBkYXRhLXRvZ2dsZT0iaXNvLXRvb2x0aXAiIGRhdGEtb3JpZ2luYWwtdGl0bGU9IlN1YnNjcmliZSZuYnNwO3RvJm5ic3A7dXBkYXRlcyI+JiN4RTMxMDs8L2E+PC9zdXA+CiAgCjwvaDM+CgoKPHVsIGNsYXNzPSJyZWZpbmUiPgogIDxsaT4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS02Ij4KICAgICAgICAKCiAgICAgICAgICA8c3Ryb25nPlN0YXR1cyZuYnNwOzombmJzcDsmbmJzcDs8L3N0cm9uZz48c3Bhbj48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1vay1jaXJjbGUiIHRpdGxlPSJQdWJsaXNoZWQiPjwvc3Bhbj5QdWJsaXNoZWQ8L3NwYW4+CiAgICAgICAgCiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNiI+CiAgICAgICAgCiAgICAgICAgICA8c3Ryb25nPlB1YmxpY2F0aW9uIGRhdGUmbmJzcDs6IDwvc3Ryb25nPjxzcGFuIGl0ZW1wcm9wPSJyZWxlYXNlRGF0ZSI+MjAxNS0xMTwvc3Bhbj4KICAgICAgICAKICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2xpPgogIDxsaT4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS02Ij4KICAgICAgICAKICAgICAgICAgIDxzdHJvbmc+RWRpdGlvbiZuYnNwOzo8L3N0cm9uZz4gMQogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYiPgogICAgICAgIAogICAgICAgICAgPHN0cm9uZz5OdW1iZXIgb2YgcGFnZXMmbmJzcDs6PC9zdHJvbmc+IDE1CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9saT4KICAKICAgIDxsaT4KICAgICAgPGRpdiBjbGFzcz0iY2xlYXJmaXgiPgogICAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LWxhYmVsIj5UZWNobmljYWwgQ29tbWl0dGVlPC9kaXY+IDoKICAgICAgICA8ZGl2IGNsYXNzPSJlbnRyeS1uYW1lIGVudHJ5LWJsb2NrIj4KICAgICAgICAgIDxhIGhyZWY9Ii9jb21taXR0ZWUvNTQxNTguaHRtbCI+SVNPL1RDIDE4NC9TQyA0PC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LXRpdGxlIj5JbmR1c3RyaWFsIGRhdGE8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2xpPgogIAogIDxsaT4KICAgIDxkbCBjbGFzcz0iZGwtaW5saW5lIG5vLWJvdHRvbS1tYXJnaW4iPgogICAgICA8ZHQgY2xhc3M9ImVudHJ5LWxhYmVsIGVudHJ5LWJsb2NrIj48c3Ryb25nPklDUyA6IDwvc3Ryb25nPjwvZHQ+CiAgICAgIAogICAgICAgIDxkZD4KICAgICAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LW5hbWUgZW50cnktYmxvY2siPgogICAgICAgICAgICA8YSBocmVmPSIvaWNzLzAxLjA0MC4yNS5odG1sIj4KICAgICAgICAgICAgICAgIDAxLjA0MC4yNQogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LXRpdGxlIj5NYW51ZmFjdHVyaW5nIGVuZ2luZWVyaW5nIChWb2NhYnVsYXJpZXMpPC9kaXY+CiAgICAgICAgPC9kZD4KICAgICAgCiAgICAgICAgPGRkPgogICAgICAgICAgPGRpdiBjbGFzcz0iZW50cnktbmFtZSBlbnRyeS1ibG9jayI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9pY3MvMjUuMDQwLjQwLmh0bWwiPgogICAgICAgICAgICAgICAgMjUuMDQwLjQwCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZW50cnktdGl0bGUiPkluZHVzdHJpYWwgcHJvY2VzcyBtZWFzdXJlbWVudCBhbmQgY29udHJvbDwvZGl2PgogICAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kbD4KICA8L2xpPgo8L3VsPgoKICAgICAgPC9kaXY+CgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBjb2wtbWQtb2Zmc2V0LTEiPgogICAgICAgIAogIDxkaXYgY2xhc3M9IndlbGwgc2hhZG93LWxpZ2h0IHN0b3JlLWJveCBwcm9kdWN0LWJveCB0b3AtbWQtcHVzaC0zIiBpZD0ic3RvcmUtYm94Ij4KICAgIDxkaXYgY2xhc3M9ImJveC10ZXh0Ij4KICAgICAgPGgzPkJ1eSZuYnNwO3RoaXMgc3RhbmRhcmQ8L2gzPgogICAgICA8ZGl2IGNsYXNzPSJmaXQtdG8tYm94Ij4KICAgICAgICA8c3BhbiBjbGFzcz0ibGFuZ3VhZ2UtcGF0aCBoaWRkZW4iPmVuPC9zcGFuPgogICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgb3JkZXJQcm9kdWN0Ij4KICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgIDx0cj4KICAgICAgICAgICAgPHRoPjwvdGg+CiAgICAgICAgICAgIDx0aD5Gb3JtYXQ8L3RoPgogICAgICAgICAgICA8dGggaWQ9Imxhbmd1YWdlIj5MYW5ndWFnZTwvdGg+CiAgICAgICAgICA8L3RyPgogICAgICAgICAgPC90aGVhZD4KICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgIAoKICAgICAgICAgICAgPHRyIGNsYXNzPSJhY3RpdmUiPgogICAgICAgICAgICAgIDx0ZCBjbGFzcz0ic2VsZWN0aW9uIGNvbC14cy0xIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eXBlIGhpZGRlbiI+c3RkPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvdW50ZXIgaGlkZGVuIj4xPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaWNlIGhpZGRlbiI+ODg8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hvb3NlRm9ybWF0IGFjdGl2ZSI+PHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tb2siPjwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICA8dGQgaWQ9ImJraWZtdF8xIiBjbGFzcz0iY29sLXhzLTEwIj4KICAgICAgICAgICAgICAgIFBERgogICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgPHRkIGNsYXNzPSJvcmRlckxhbmd1YWdlIGNvbC14cy0xIj4KICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9ImJraV8xIiBhcmlhLWxhYmVsbGVkYnk9Imxhbmd1YWdlIj4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMDF1YjAwMDAwMHJEdkI4QUFLfmEwNWIwMDAwMDA1V1YyWkFBV35hMGZiMDAwMDAwM1YyZnJBQUN+YTBjYjAwMDAwMDRsbzB4QUFBIiBsYW5nPSJlbiIgc2VsZWN0ZWQ+CiAgICAgICAgICAgICAgICAgICAgICBFbmdsaXNoCiAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgIAoKICAgICAgICAgICAgPHRyIGNsYXNzPSIiPgogICAgICAgICAgICAgIDx0ZCBjbGFzcz0ic2VsZWN0aW9uIGNvbC14cy0xIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eXBlIGhpZGRlbiI+c3RkPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvdW50ZXIgaGlkZGVuIj4yPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaWNlIGhpZGRlbiI+ODg8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hvb3NlRm9ybWF0Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1vayBoaWRkZW4iPjwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICA8dGQgaWQ9ImJraWZtdF8yIiBjbGFzcz0iY29sLXhzLTEwIj4KICAgICAgICAgICAgICAgIFBhcGVyCiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICA8dGQgY2xhc3M9Im9yZGVyTGFuZ3VhZ2UgY29sLXhzLTEiPgogICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0iYmtpXzIiIGRpc2FibGVkIGFyaWEtbGFiZWxsZWRieT0ibGFuZ3VhZ2UiPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIwMXViMDAwMDAwckR2QjhBQUt+YTA1YjAwMDAwMDVXVjJlQUFHfmEwZmIwMDAwMDAzVjJmQ0FBU35hMGNiMDAwMDAwNGxvMElBQVEiIGxhbmc9ImVuIiBzZWxlY3RlZD4KICAgICAgICAgICAgICAgICAgICAgIEVuZ2xpc2gKICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgCiAgICAgICAgICA8L3Rib2R5PgogICAgICAgIDwvdGFibGU+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjbGVhcmZpeCIgaXRlbXByb3A9Im9mZmVycyIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvT2ZmZXIiPgogICAgICA8dWwgY2xhc3M9Imxpc3QtaW5saW5lIHB1bGwtcmlnaHQgb3JkZXJCYXNrZXQiIGlkPSJia2lhbmNob3JfMSI+CiAgICAgICAgPGxpIGNsYXNzPSJwcmljZSBvcmRlciI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0iY3VycmVuY3kiIGl0ZW1wcm9wPSJwcmljZUN1cnJlbmN5Ij5DSEY8L3NwYW4+PHNwYW4gY2xhc3M9ImFtb3VudCIgaWQ9InByb2R1Y3RQcmljZSIgaXRlbXByb3A9InByaWNlIj44ODwvc3Bhbj4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgaWQ9InN0YW5kYXJkLWJ1eSIgZGF0YS10b2dnbGU9Im1vZGFsIiBkYXRhLXRhcmdldD0iI2lzby1vcHRvdXQiIG9uY2xpY2s9ImphdmFzY3JpcHQ6YWRkVG9CYXNrZXQoJzEnLCAnZW4nLCAnc3RkJykiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zaG9wcGluZy1jYXJ0Ij48L3NwYW4+QnV5CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8L2xpPgogICAgICA8L3VsPgogICAgPC9kaXY+CiAgPC9kaXY+CgogIDwhLS0gU1RBUlQgT0YgTU9EQUwgKEJ1eSBJU08uT1JHIHdpdGggT1BUT1VUKSAtLT4KICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyIgaWQ9Imlzby1vcHRvdXQiPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5IGNsZWFyZml4Ij4KICAgICAgICAgICAgPGRpdiBpZD0ibW9kYWxPcHRPdXQiPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGlkPSJtb2RhbE5vT3B0T3V0Ij48L2Rpdj4KICAgICAgICAgICAgPHNwYW4gaWQ9InByb2NlZWRUb0NoZWNrb3V0IiBjbGFzcz0iaGlkZGVuIiBkYXRhLWxhYmVsPSJQcm9jZWVkIHRvIGNoZWNrb3V0Ij48L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGlkPSJjb250aW51ZVNob3BwaW5nIiBjbGFzcz0iaGlkZGVuIiBkYXRhLWxhYmVsPSJBZGQgdG8gYmFza2V0IGFuZCBjb250aW51ZSBzaG9wcGluZyI+PC9zcGFuPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPCEtLSBFTkQgT0YgTU9EQUwgLS0+CgoKICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9zZWN0aW9uPgoKCjxzZWN0aW9uIGlkPSJsaWZlY3ljbGUiPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgogICAgICAgIDxoMz5MaWZlIGN5Y2xlPC9oMz4KICAgICAgICA8YnIvPgogICAgICAgIDxkaXYgY2xhc3M9ImxpZmVjeWNsZSI+CiAgICAgICAgICA8dWwgY2xhc3M9InN0ZXBzIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxsaSBjbGFzcz0idGltZS1zdGVwIj4KICAgICAgICAgICAgICA8aDQgY2xhc3M9InRleHQtaGVscCI+Tm93PC9oND4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RlcCBzdGVwLXN1Y2Nlc3MgYWN0aXZlIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLWhlYWQiPlB1Ymxpc2hlZDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIDxoNT5JU08gODAwMC04OjIwMTU8L2g1PgogICAgICAgICAgICAgICAgICA8YnIvPkEgc3RhbmRhcmQgaXMgcmV2aWV3ZWQgZXZlcnkgNSB5ZWFyczxici8+CiAgICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iI3N0YWdlcyIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSBjdXJyZW50LXN0YWdlIHRleHQtc20iPlN0YWdlOiA8c3Ryb25nPjkwLjYwPC9zdHJvbmc+IChVbmRlciByZXZpZXcpPHNwYW4gY2xhc3M9ImNhcmV0Ij48L3NwYW4+PC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2IHN0YWdlcyBjb2xsYXBzZSIgaWQ9InN0YWdlcyI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBzdGF0ZS1pbmZvIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj48c3Ryb25nPjAwPC9zdHJvbmc+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+UHJlbGltaW5hcnk8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gc3RhdGUtaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+PHN0cm9uZz4xMDwvc3Ryb25nPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPlByb3Bvc2FsPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjYXJldCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCMxMF85OSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4xMC45OTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTEtMTAtMjg8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZXcgcHJvamVjdCBhcHByb3ZlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gc3RhdGUtaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+PHN0cm9uZz4yMDwvc3Ryb25nPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPlByZXBhcmF0b3J5PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIHN0YXRlLWluZm8iPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjxzdHJvbmc+MzA8L3N0cm9uZz48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5Db21taXR0ZWU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNhcmV0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzMwXzAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjMwLjAwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxMy0wMy0yMTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW1pdHRlZSBkcmFmdCAoQ0QpIHJlZ2lzdGVyZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjMzBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MzAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDEzLTAzLTIyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ0Qgc3R1ZHkvYmFsbG90IGluaXRpYXRlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCMzMF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4zMC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTMtMDUtMjQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbG9zZSBvZiB2b3RpbmcvIGNvbW1lbnQgcGVyaW9kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzMwXzk5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjMwLjk5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxMy0wNS0yODwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENEIGFwcHJvdmVkIGZvciByZWdpc3RyYXRpb24gYXMgRElTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBzdGF0ZS1pbmZvIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj48c3Ryb25nPjQwPC9zdHJvbmc+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+RW5xdWlyeTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNDBfMDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NDAuMDA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE0LTAzLTE3PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRElTIHJlZ2lzdGVyZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNDBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NDAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE0LTA1LTE5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRElTIGJhbGxvdCBpbml0aWF0ZWQ6IDEyIHdlZWtzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzQwXzYwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjQwLjYwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxNC0wOC0yMTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsb3NlIG9mIHZvdGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM0MF85OSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj40MC45OTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTQtMDktMDk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGdWxsIHJlcG9ydCBjaXJjdWxhdGVkOiBESVMgYXBwcm92ZWQgZm9yIHJlZ2lzdHJhdGlvbiBhcyBGRElTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBzdGF0ZS1pbmZvIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj48c3Ryb25nPjUwPC9zdHJvbmc+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+QXBwcm92YWw8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNhcmV0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzUwXzAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjUwLjAwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxNS0wNy0yNzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbmFsIHRleHQgcmVjZWl2ZWQgb3IgRkRJUyByZWdpc3RlcmVkIGZvciBmb3JtYWwgYXBwcm92YWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNTBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NTAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE1LTA5LTEwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvb2Ygc2VudCB0byBzZWNyZXRhcmlhdCBvciBGRElTIGJhbGxvdCBpbml0aWF0ZWQ6IDggd2Vla3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNTBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NTAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE1LTA5LTI4PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xvc2Ugb2Ygdm90aW5nLiBQcm9vZiByZXR1cm5lZCBieSBzZWNyZXRhcmlhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gc3RhdGUtc3VjY2VzcyI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+PHN0cm9uZz42MDwvc3Ryb25nPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPlB1YmxpY2F0aW9uPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjYXJldCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM2MF8wMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj42MC4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTUtMDktMjg8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHVuZGVyIHB1YmxpY2F0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzYwXzYwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjYwLjYwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxNS0xMS0xMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVybmF0aW9uYWwgU3RhbmRhcmQgcHVibGlzaGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBiZy1zdWNjZXNzIGFjdGl2ZSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+PHN0cm9uZz45MDwvc3Ryb25nPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPlJldmlldzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgIGNsYXNzPSdsaXN0LXNlcGFyYXRpb24nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjOTBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDIwLTEwLTE1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCB1bmRlciBzeXN0ZW1hdGljIHJldmlldwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzkwXzYwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjYwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAyMS0wMy0wNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsb3NlIG9mIHJldmlldwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM5MF85MiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC45Mjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVybmF0aW9uYWwgU3RhbmRhcmQgdG8gYmUgcmV2aXNlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM5MF85MyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC45Mzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVybmF0aW9uYWwgU3RhbmRhcmQgY29uZmlybWVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzkwXzk5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjk5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2l0aGRyYXdhbCBvZiBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHByb3Bvc2VkIGJ5IFRDIG9yIFNDCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBzdGF0ZS1tdXRlZCI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+PHN0cm9uZz45NTwvc3Ryb25nPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPldpdGhkcmF3YWw8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNhcmV0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzk1Xzk5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjk1Ljk5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2l0aGRyYXdhbCBvZiBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L3VsPgoKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9zZWN0aW9uPgo8c2VjdGlvbiBjbGFzcz0iYmctaW5mbyIgaWQ9ImNvbnRhY3QiPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCI+CiAgICAgICAgPGg0PkdvdCBhIHF1ZXN0aW9uPzwvaDQ+Cgo8cD5DaGVjayBvdXQgb3VyIDxhIGhyZWY9Ii9mcmVxdWVudGx5LWFza2VkLXF1ZXN0aW9ucy1mYXFzLmh0bWwiIHRpdGxlPSJGcmVxdWVudGx5IEFza2VkIFF1ZXN0aW9ucyAoRkFRcykiPkZBUXM8L2E+PC9wPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPgogICAgICAgIDxkaXYgY2xhc3M9InZjYXJkIGNvbnRhY3Qgbm8tZmlndXJlIGNsZWFyZml4IiBpdGVtc2NvcGU9IiIgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1BlcnNvbiI+CjxkaXYgY2xhc3M9ImNvbnRlbnQtYm94IG5vLWltYWdlIj4KPGRpdiBjbGFzcz0iZm4gbiI+PHNwYW4gY2xhc3M9ImdpdmVuLW5hbWUiIGl0ZW1wcm9wPSJnaXZlbk5hbWUiPkN1c3RvbWVyIGNhcmU8L3NwYW4+PC9kaXY+Cgo8ZGl2IGNsYXNzPSJ0ZWwiIGl0ZW1wcm9wPSJ0ZWxlcGhvbmUiPis0MSAyMiA3NDkgMDggODg8L2Rpdj4KCjxkaXYgY2xhc3M9ImVtYWlsIiBpdGVtcHJvcD0iZW1haWwiPjxhIGhyZWY9Im1haWx0bzpjdXN0b21lcnNlcnZpY2VAaXNvLm9yZyI+Y3VzdG9tZXJzZXJ2aWNlQGlzby5vcmc8L2E+PC9kaXY+Cgo8aHIgLz4KPGRpdiBjbGFzcz0ibm90ZSI+CjxwIGNsYXNzPSJzbWFsbCI+T3BlbmluZyBob3Vyczo8YnIgLz4KTW9uZGF5IHRvIEZyaWRheSAtIDA5OjAwLTEyOjAwLCAxNDowMC0xNzowMCAoVVRDKzEpPC9wPgo8L2Rpdj4KPC9kaXY+CjwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPgogICAgICAgIDxkaXYgY2xhc3M9IndlbGwgdGV4dC1jZW50ZXIgY2xlYXJmaXgiPgogIDxoND5LZWVwIHVwIHRvIGRhdGUgd2l0aCBJU088L2g0PgoKPHA+U2lnbiB1cCB0byBvdXIgbmV3c2xldHRlciBmb3IgdGhlIGxhdGVzdCBuZXdzLCB2aWV3cyBhbmQgcHJvZHVjdCBpbmZvcm1hdGlvbi48L3A+PGRpdj48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBkYXRhLWZhbmN5Ym94PSIiIGRhdGEtdHlwZT0iaWZyYW1lIiBocmVmPSJodHRwczovL2NvbmZpcm1zdWJzY3JpcHRpb24uY29tL2gvZC8zNDEyREE3OTkzQUMzQjdDIj5TdWJzY3JpYmU8L2E+PC9kaXY+CjxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+LmZhbmN5Ym94LXNsaWRlLS1pZnJhbWUgLmZhbmN5Ym94LWNvbnRlbnQgewogd2lkdGggIDogNTAwcHg7CiBoZWlnaHQgOiA2MDBweDsKIG1heC13aWR0aCAgOiA4MCU7CiBtYXgtaGVpZ2h0IDogODAlOwogbWFyZ2luOiAwOwp9Ci5mYW5jeWJveC1zbGlkZS0taWZyYW1lIC5mYW5jeWJveC1jb250ZW50IC5sLXBhZ2UtY29udGFpbmVyIHsKcGFkZGluZy10b3A6IDEuNXJlbSAhaW1wb3J0YW50Owp9Cjwvc3R5bGU+CjwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L3NlY3Rpb24+PGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJuYXYtYnJlYWRjcnVtYiBwcmludC1mb290ZXIgYmctZGFya2dyYXkiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tOCBzbWFsbCI+CiAgICAgICAgICAgICAgPCEtLSBCUkVBRENSVU1CIC0tPgogICAgICAgICAgICAgIDxvbCBjbGFzcz0iYnJlYWRjcnVtYiI+CiAgICAKICAgICAgPGxpPjxhIGhyZWY9Ii9ob21lLmh0bWwiIHRpdGxlPSJIb21lIHBhZ2UiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWhvbWUiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+PC9hPjwvbGk+CiAgICAKICAgICAgICA8bGk+CiAgICAgICAgICAKICAgICAgICAgICAgICA8YSBocmVmPSIvc3RvcmUuaHRtbCI+U3RvcmU8L2E+CiAgICAgICAgICAgIAogICAgICAgIDwvbGk+CiAgICAgIAogICAgICAgIDxsaT4KICAgICAgICAgIAo8YSBocmVmPSIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiID5TdGFuZGFyZHMgY2F0YWxvZ3VlPC9hPgoKICAgICAgICA8L2xpPgogICAgICAKICAgICAgICA8bGk+CiAgICAgICAgICAKICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiPklDUzwvYT4KICAgICAgICAgICAgCiAgICAgICAgPC9saT4KICAgICAgPGxpPjxhIGhyZWY9Ii9lbi9pY3MvMDEuaHRtbCI+MDE8L2E+PC9saT4KICAgIAogICAgICA8bGk+PGEgaHJlZj0iL2VuL2ljcy8wMS4wNDAuaHRtbCI+MDEuMDQwPC9hPjwvbGk+CiAgICAKICAgICAgPGxpPjxhIGhyZWY9Ii9lbi9pY3MvMDEuMDQwLjI1Lmh0bWwiPjAxLjA0MC4yNTwvYT48L2xpPgogICAgPGxpPklTTyA4MDAwLTg6MjAxNTwvbGk+CiAgPC9vbD48ZGl2IGNsYXNzPSJjbGVhciI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCBoaWRkZW4tcHJpbnQgdGV4dC1yaWdodCBzbWFsbCI+CiAgICAgICAgICAgICAgPGEgcm9sZT0iYnV0dG9uIiBjbGFzcz0iYWNjb3JkaW9uLXRvZ2dsZSBjb2xsYXBzZWQiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgaHJlZj0iI2NvbGxhcHNlU2l0ZW1hcCIgdGFyZ2V0PSJfc2VsZiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY29sbGFwc2VTaXRlbWFwIj5TaXRlbWFwPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIGJvcmRlci10b3AiIGlkPSJjb2xsYXBzZVNpdGVtYXAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgIDwhLS0gU0lURU1BUCAtLT4KICAgICAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IlNpdGVtYXAiIGNsYXNzPSJzaXRlbWFwLWZvb3RlciBjbGVhcmZpeCBzbWFsbCIgaWQ9Im5hdi1zaXRlbWFwIj48dWwgcm9sZT0ibWVudWJhciIgY2xhc3M9Im5hdi1sZXZlbDEgbGlzdC1pbmxpbmUtNSBjbGVhcmZpeCI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc3RhbmRhcmRzLmh0bWwiPlN0YW5kYXJkczwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9Im5hdi1sZXZlbDIgbGlzdC11bnN0eWxlZCI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9iZW5lZml0cy1vZi1zdGFuZGFyZHMuaHRtbCI+QmVuZWZpdHM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvcG9wdWxhci1zdGFuZGFyZHMuaHRtbCI+UG9wdWxhciBzdGFuZGFyZHM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvY29uZm9ybWl0eS1hc3Nlc3NtZW50Lmh0bWwiPkNlcnRpZmljYXRpb24gJiBjb25mb3JtaXR5PC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGxhc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3NkZ3MuaHRtbCI+U0RHczwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvYWJvdXQtdXMuaHRtbCI+QWJvdXQgdXM8L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSJuYXYtbGV2ZWwyIGxpc3QtdW5zdHlsZWQiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvd2hhdC13ZS1kby5odG1sIj5XaGF0IHdlIGRvPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3N0cnVjdHVyZS5odG1sIj5TdHJ1Y3R1cmU8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvbWVtYmVycy5odG1sIj5NZW1iZXJzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGxhc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3N0cmF0ZWd5MjAzMC5odG1sIj5TdHJhdGVneTwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvbmV3cy5odG1sIj5OZXdzPC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0ibmF2LWxldmVsMiBsaXN0LXVuc3R5bGVkIj48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZXZlbnRzLmh0bWwiPkV2ZW50czwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9tZWRpYS1raXQuaHRtbCI+TWVkaWEga2l0PC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9kZXZlbG9waW5nLXN0YW5kYXJkcy5odG1sIj5UYWtpbmcgcGFydDwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9Im5hdi1sZXZlbDIgbGlzdC11bnN0eWxlZCI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii93aG8tZGV2ZWxvcHMtc3RhbmRhcmRzLmh0bWwiPldobyBkZXZlbG9wcyBzdGFuZGFyZHM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZGVsaXZlcmFibGVzLWFsbC5odG1sIj5EZWxpdmVyYWJsZXM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZ2V0LWludm9sdmVkLmh0bWwiPkdldCBpbnZvbHZlZDwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBsYXN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9yZXNvdXJjZXMuaHRtbCI+UmVzb3VyY2VzPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBpblBhdGggbGFzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc3RvcmUuaHRtbCI+U3RvcmU8L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSJuYXYtbGV2ZWwyIGxpc3QtdW5zdHlsZWQiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBpblBhdGggYWN0aXZlIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9zdGFuZGFyZHMtY2F0YWxvZ3VlL2Jyb3dzZS1ieS1pY3MuaHRtbCIgPlN0YW5kYXJkcyBjYXRhbG9ndWU8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvcHVibGljYXRpb24tbGlzdC5odG1sIj5QdWJsaWNhdGlvbnMgYW5kIHByb2R1Y3RzPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbmF2PjxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CgogICAgICAKICAgICAgPGZvb3RlciByb2xlPSJjb250ZW50aW5mbyIgYXJpYS1sYWJlbD0iRm9vdGVyIiBjbGFzcz0iZm9vdGVyLWlzbyBmb290ZXItZGFyayBiZy1kYXJrZXJncmF5Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLWxpbmtzIGNlbnRlci1ibG9jayI+CiAgICAgICAgICAgIDwhLS0gRk9PVEVSIExJTktTIC0tPgogICAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IklubGluZSBOYXZpZ2F0aW9uIiAgPjx1bCByb2xlPSJtZW51YmFyIiBjbGFzcz0ibGlzdC1pbmxpbmUgY2xlYXJmaXggbmF2LWxldmVsMSI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9pc28tbmFtZS1hbmQtbG9nby5odG1sIj5JU08gbmFtZSBhbmQgbG9nbzwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9wcml2YWN5LWFuZC1jb3B5cmlnaHQuaHRtbCI+UHJpdmFjeSBhbmQgY29weXJpZ2h0PC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3dvcmtpbmctd2l0aC1pc28uaHRtbCIgPkpvYnM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnJlcXVlbnRseS1hc2tlZC1xdWVzdGlvbnMtZmFxcy5odG1sIj5GQVFzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGxhc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2NvbnRhY3QtaXNvLmh0bWwiPkNvbnRhY3QgSVNPPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbmF2PjxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLXNvY2lhbCBzcy1pY29uIGNsZWFyZml4Ij4KICAgICAgICAgICAgPHVsIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL09yZ2FuaXphdGlvbiI+CiAgICAgICAgICAgICAgPGxpbmsgaXRlbXByb3A9InVybCIgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy8iPgogICAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2lzb3N0YW5kYXJkcyIgdGl0bGU9IkZhY2Vib29rIj7vmJA8L2E+PC9saT4KICAgICAgICAgICAgICA8bGk+PGEgaXRlbXByb3A9InNhbWVBcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vaXNvc3RhbmRhcmRzIiB0aXRsZT0iVHdpdHRlciI+75iRPC9hPjwvbGk+CiAgICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS91c2VyL1BsYW5ldElTTyIgdGl0bGU9IllvdVR1YmUiPu+YsDwvYT48L2xpPgogICAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2NvbXBhbnkvaXNvc3RhbmRhcmRzIiB0aXRsZT0iTGlua2VkaW4iPu+YkjwvYT48L2xpPgogICAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9pc29zdGFuZGFyZHMiIHRpdGxlPSJJbnN0YWdyYW0iPu+ZgTwvYT48L2xpPgogICAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cuZmxpY2tyLmNvbS9waG90b3MvaXNvc3RhbmRhcmRzIiB0aXRsZT0iRmxpY2tyIj7vmYA8L2E+PC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPHAgY2xhc3M9ImxlYWQiPkdyZWF0IHRoaW5ncyBoYXBwZW4gd2hlbiB0aGUgd29ybGQgYWdyZWVzPC9wPgogICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggY29sLW1kLW9mZnNldC0yIHB1bGwtbGVmdCI+CiAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQteHMiPldlIGFyZSBjb21taXR0ZWQgdG8gZW5zdXJpbmcgdGhhdCBvdXIgd2Vic2l0ZSBpcyBhY2Nlc3NpYmxlIHRvIGV2ZXJ5b25lLiBJZiB5b3UgaGF2ZSBhbnkgcXVlc3Rpb25zIG9yIHN1Z2dlc3Rpb25zIHJlZ2FyZGluZyB0aGUgYWNjZXNzaWJpbGl0eSBvZiB0aGlzIHNpdGUsIHBsZWFzZSA8YSBocmVmPSJtYWlsdG86d2VibWFzdGVyQGlzby5vcmc/c3ViamVjdD1BY2Nlc3NpYmlsaXR5IiBzdHlsZT0id2hpdGUtc3BhY2U6IG5vd3JhcCI+Y29udGFjdCB1czwvYT4uPC9wPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXNtIj48YSBocmVmPSIjY29weXJpZ2h0IiB0YXJnZXQ9Il9zZWxmIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJjb3B5cmlnaHQiPsKpIEFsbCBSaWdodHMgUmVzZXJ2ZWQ8L2E+IDxzcGFuIGlkPSJjb3B5cmlnaHQiIGNsYXNzPSJjb2xsYXBzZSI+QWxsIElTTyBwdWJsaWNhdGlvbnMgYW5kIG1hdGVyaWFscyBhcmUgcHJvdGVjdGVkIGJ5IGNvcHlyaWdodCBhbmQgYXJlIHN1YmplY3QgdG8gdGhlIHVzZXLigJlzIGFjY2VwdGFuY2Ugb2YgSVNP4oCZcyBjb25kaXRpb25zIG9mIGNvcHlyaWdodC4gQW55IHVzZSwgaW5jbHVkaW5nIHJlcHJvZHVjdGlvbiByZXF1aXJlcyBvdXIgd3JpdHRlbiBwZXJtaXNzaW9uLiBBbGwgY29weXJpZ2h0IHJlcXVlc3RzIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gPGEgaHJlZj0ibWFpbHRvOmNvcHlyaWdodEBpc28ub3JnIj5jb3B5cmlnaHRAaXNvLm9yZzwvYT4uPC9zcGFuPjwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BiYXIiPgogICAgICAgICAgPGRpdiBjbGFzcz0idG9wYmFyLWNvbnRlbnQiPgogICAgICAgICAgICA8YSBjbGFzcz0ibG9nbyBpc29sb2dvIGxvZ28teHMgdGhlbWUtcmVkIHBvd2VyZWRieSBwYWdlLXNjcm9sbCBsb2dvLXNjcm9sbFRvcCIgaHJlZj0iI3BhZ2UtdG9wIiB0aXRsZT0iU2Nyb2xsIHRvIHRvcCI+PC9hPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpc29sb2dvLXByaW50Ij48aW1nIHNyYz0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuNS9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIgYWx0PSJJU08gbG9nbyBmb3IgcHJpbnQiIC8+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvd2VyZWRieS10eHQiPlBvd2VyZWQgYnk8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InJ1YmJlciI+PC9kaXY+CiAgICAgIDwvZm9vdGVyPgoKICAgIDwvbWFpbj4KCiAgICAKCgogIDwvYm9keT4KPC9odG1sPg==
    http_version:
  recorded_at: Tue, 26 Oct 2021 13:01:12 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 9","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.1.1), Ruby (3.0.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 26 Oct 2021 13:01:13 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '6'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Tue, 26 Oct 2021 13:01:14 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/00/35/3589.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=FE0588BC2AD19C64F5B5CB4263989925; Path=/; Secure; HttpOnly
      Location:
      - "/standard/3589.html"
      Content-Length:
      - '0'
      Date:
      - Tue, 26 Oct 2021 13:01:14 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Tue, 26 Oct 2021 13:01:15 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/3589.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=187303BBD590F3B2867E49B349A536D5; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Tue, 26 Oct 2021 07:01:16 MDT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Tue, 26 Oct 2021 13:01:17 GMT
recorded_with: VCR 5.0.0
