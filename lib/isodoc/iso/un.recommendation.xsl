<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:un="https://www.metanorma.org/ns/un" xmlns:mathml="http://www.w3.org/1998/Math/MathML" xmlns:xalan="http://xml.apache.org/xalan" xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" xmlns:java="http://xml.apache.org/xalan/java" exclude-result-prefixes="java" version="1.0">

	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>


	<xsl:key name="kfn" match="*[local-name() = 'fn'][not(ancestor::*[(local-name() = 'table' or local-name() = 'figure') and not(ancestor::*[local-name() = 'name'])])]" use="@reference"/>
	
	

	
	
	<xsl:variable name="debug">false</xsl:variable>

	<xsl:variable name="contents_">
		<contents>
			<xsl:apply-templates select="/un:un-standard/un:sections/*" mode="contents"/>
			<xsl:apply-templates select="/un:un-standard/un:annex" mode="contents"/>
			<xsl:apply-templates select="/un:un-standard/un:bibliography/un:references" mode="contents"/>
			<xsl:call-template name="processTablesFigures_Contents"/>
		</contents>
	</xsl:variable>
	<xsl:variable name="contents" select="xalan:nodeset($contents_)"/>
	
	
	<xsl:variable name="title" select="/un:un-standard/un:bibdata/un:title[@language = 'en' and @type = 'main']"/>
	
	<xsl:variable name="doctype" select="/un:un-standard/un:bibdata/un:ext/un:doctype"/>

	<xsl:variable name="doctypenumber">		
		<xsl:call-template name="capitalize">
			<xsl:with-param name="str" select="$doctype"/>
		</xsl:call-template>
		<xsl:text> No. </xsl:text>
		<xsl:value-of select="/un:un-standard/un:bibdata/un:docnumber"/>
	</xsl:variable>
	
	<xsl:template match="/">
		<xsl:call-template name="namespaceCheck"/>
		<fo:root xml:lang="{$lang}">
			<xsl:variable name="root-style">
				<root-style xsl:use-attribute-sets="root-style"/>
			</xsl:variable>
			<xsl:call-template name="insertRootStyle">
				<xsl:with-param name="root-style" select="$root-style"/>
			</xsl:call-template>
			<fo:layout-master-set>
				<!-- Cover page -->
				<fo:simple-page-master master-name="cover-page" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="20mm" margin-bottom="10mm" margin-left="50mm" margin-right="21mm"/>
					<fo:region-before extent="20mm"/>
					<fo:region-after extent="10mm"/>
					<fo:region-start extent="50mm"/>
					<fo:region-end extent="19mm"/>
				</fo:simple-page-master>
				
				<fo:simple-page-master master-name="document-preface" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="19.5mm" margin-right="19.5mm"/>
					<fo:region-before region-name="header" extent="{$marginTop}mm"/>
					<fo:region-after region-name="footer" extent="{$marginBottom}mm"/>
					<fo:region-start region-name="left" extent="19.5mm"/>
					<fo:region-end region-name="right" extent="19.5mm"/>
				</fo:simple-page-master>
				
				<fo:simple-page-master master-name="blank" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="19.5mm" margin-right="19.5mm"/>
					<fo:region-start region-name="left" extent="19.5mm"/>
					<fo:region-end region-name="right" extent="19.5mm"/>
				</fo:simple-page-master>
				
				<!-- Document pages -->
				<fo:simple-page-master master-name="document" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header" extent="{$marginTop}mm"/>
					<fo:region-after region-name="footer" extent="{$marginBottom}mm"/>
					<fo:region-start region-name="left" extent="19.5mm"/>
					<fo:region-end region-name="right" extent="19.5mm"/>
				</fo:simple-page-master>
				
				<fo:page-sequence-master master-name="document-preface-master">
					<fo:repeatable-page-master-alternatives>
						<fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/>
						<fo:conditional-page-master-reference master-reference="document-preface" odd-or-even="odd"/>
						<fo:conditional-page-master-reference master-reference="document-preface" odd-or-even="even"/>
					</fo:repeatable-page-master-alternatives>
				</fo:page-sequence-master>
				
			</fo:layout-master-set>
			
			<fo:declarations>
				<xsl:call-template name="addPDFUAmeta"/>
			</fo:declarations>
			
			<xsl:call-template name="addBookmarks">
				<xsl:with-param name="contents" select="$contents"/>
			</xsl:call-template>
			
			<!-- Cover Page -->
			<fo:page-sequence master-reference="cover-page" force-page-count="even">
				<fo:flow flow-name="xsl-region-body">
					<fo:block-container absolute-position="fixed" left="0mm" top="72mm">
						<fo:block>
							<fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Front))}" width="188mm" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Image Front"/>
						</fo:block>
					</fo:block-container>
					<fo:block-container absolute-position="fixed" left="120mm" top="250mm" text-align="center">
						<fo:block>
							<fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Logo))}" width="28mm" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Image Front"/>
						</fo:block>
						<fo:block font-family="Arial" font-size="16pt" font-weight="bold">UNITED NATIONS</fo:block>
					</fo:block-container>
					<fo:block-container absolute-position="fixed" left="63mm" top="78mm" width="120mm" text-align="right">
						<fo:block font-family="Arial" font-size="29pt" font-style="italic" font-weight="bold" color="rgb(0, 174, 241)">
							<xsl:value-of select="$doctypenumber"/>
						</fo:block>
					</fo:block-container>
					<fo:block-container absolute-position="fixed" left="67mm" top="205mm" width="115mm" height="40mm" text-align="right" display-align="after">
						<fo:block font-family="Arial" font-size="15pt" font-weight="bold" color="rgb(0, 174, 241)">
							<xsl:value-of select="/un:un-standard/un:bibdata/un:ext/un:editorialgroup/un:committee"/>
						</fo:block>
					</fo:block-container>
					<fo:block text-align="right">
						<fo:block font-family="Arial Black" font-size="19pt" margin-top="2mm" letter-spacing="1pt">
							<xsl:value-of select="/un:un-standard/un:bibdata/un:contributor/un:organization/un:name"/>
						</fo:block>
					</fo:block>
					<fo:block-container absolute-position="fixed" left="50mm" top="30mm" width="139mm" height="40mm" text-align="right" display-align="after">
						<fo:block font-family="Arial" font-size="24.5pt" font-weight="bold" margin-right="3mm" role="H1"> <!-- margin-top="19mm" -->
							<xsl:if test="string-length($title) &gt; 70">
								<xsl:attribute name="font-size">22pt</xsl:attribute>
							</xsl:if>
							<xsl:value-of select="$title"/>
						</fo:block>
					</fo:block-container>
				</fo:flow>
			</fo:page-sequence>
			<!-- End Cover Page -->
			
			<fo:page-sequence master-reference="document-preface">
				<fo:flow flow-name="xsl-region-body" font-family="Arial">
					<fo:block font-size="14pt" font-weight="bold" text-align="center">United Nations Economic Commission for Europe</fo:block>
					<fo:block font-size="12pt" font-weight="normal" text-align="center" margin-top="46pt" margin-bottom="128pt" keep-together="always">United Nations Centre for Trade Facilitation and Electronic Business</fo:block>
					<fo:block font-size="22pt" font-weight="bold" text-align="center" role="H1">
						<xsl:value-of select="$title"/>
						<xsl:value-of select="$linebreak"/>
						<xsl:value-of select="$doctypenumber"/>
					</fo:block>
					
					<fo:block-container absolute-position="fixed" left="0mm" top="197mm" width="210mm" text-align="center">
						<fo:block>
							<fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Logo))}" width="26mm" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Image Front"/>
						</fo:block>
						<fo:block font-family="Arial" font-size="16pt" font-weight="bold" margin-top="6pt">
							<xsl:text>United Nations</xsl:text>
							<xsl:value-of select="$linebreak"/>
							<xsl:text>New York and Geneva, </xsl:text>
							<xsl:value-of select="/un:un-standard/un:bibdata/un:copyright/un:from"/>
						</fo:block>
					</fo:block-container>
					
				</fo:flow>
			</fo:page-sequence>
			
			
			<!-- Preface Pages -->
			<fo:page-sequence master-reference="document-preface" force-page-count="no-force" line-height="115%">
				<xsl:call-template name="insertHeaderPreface"/>
				<fo:flow flow-name="xsl-region-body" line-height="115%" text-align="justify">
					<fo:block>
						<xsl:apply-templates select="/un:un-standard/un:boilerplate/un:legal-statement"/>
						<xsl:apply-templates select="/un:un-standard/un:boilerplate/un:copyright-statement"/>
					</fo:block>
				</fo:flow>
			</fo:page-sequence>
			
			<fo:page-sequence master-reference="document-preface-master" initial-page-number="3" format="i" force-page-count="even" line-height="115%">
				<fo:static-content flow-name="xsl-footnote-separator">
					<fo:block-container margin-left="-9mm">
						<fo:block>
							<fo:leader leader-pattern="rule" leader-length="30%"/>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<xsl:call-template name="insertHeaderPreface"/>
				<xsl:call-template name="insertFooter"/>
				<fo:flow flow-name="xsl-region-body" text-align="justify">
					<fo:block>						
						<xsl:call-template name="processPrefaceSectionsDefault"/>
					</fo:block>
				</fo:flow>
			</fo:page-sequence>
			
			<fo:page-sequence master-reference="document-preface-master" force-page-count="even" line-height="115%">
				<xsl:call-template name="insertHeaderPreface"/>
				<fo:flow flow-name="xsl-region-body" text-align="justify">
					<xsl:variable name="title-toc">
						<xsl:call-template name="getTitle">
							<xsl:with-param name="name" select="'title-toc'"/>
						</xsl:call-template>
					</xsl:variable>
					<fo:block font-size="14pt" margin-top="4pt" margin-bottom="8pt" role="H1"><xsl:value-of select="$title-toc"/></fo:block>
					<xsl:variable name="title-page">
						<xsl:call-template name="getLocalizedString">
							<xsl:with-param name="key">locality.page</xsl:with-param>
							<xsl:with-param name="lang" select="$lang"/>
						</xsl:call-template>
					</xsl:variable>
					<fo:block font-size="9pt" text-align="right" font-style="italic" margin-bottom="6pt"><xsl:value-of select="$title-page"/></fo:block>
					<fo:block role="TOC">
						<xsl:for-each select="$contents//item[not (@type = 'annex' or @parent = 'annex') and @display = 'true']">
							
							<fo:block role="TOCI">
								
								<fo:block text-align-last="justify" margin-left="12mm" text-indent="-12mm">
									<xsl:if test="@level = 2 and @section != ''">
										<xsl:attribute name="margin-left">20mm</xsl:attribute>										
									</xsl:if>
									<xsl:if test="@level &gt;= 3 and @section != ''">
										<xsl:attribute name="margin-left"><xsl:value-of select="(@level - 2) * 28"/>mm</xsl:attribute>										
									</xsl:if>
									<fo:basic-link internal-destination="{@id}" fox:alt-text="{title}">
										<xsl:if test="@section != ''">
											<fo:inline>
												<xsl:attribute name="padding-right">
													<xsl:choose>
														<xsl:when test="@level = 1">4mm</xsl:when>
														<xsl:when test="@level = 2">5mm</xsl:when>
														<xsl:otherwise>4mm</xsl:otherwise>
													</xsl:choose>
												</xsl:attribute>
												<xsl:value-of select="@section"/>												
											</fo:inline>
										</xsl:if>
										
										<xsl:apply-templates select="title"/>
										<xsl:text> </xsl:text>
										
										<fo:inline keep-together.within-line="always">
											<fo:leader leader-pattern="dots"/>
											<fo:page-number-citation ref-id="{@id}"/>
										</fo:inline>
									</fo:basic-link>
								</fo:block>
							</fo:block>
							
						</xsl:for-each>
						
						<xsl:if test="$contents//item[@type = 'annex' and @display = 'true']">
							<fo:block text-align="center" margin-top="12pt" margin-bottom="12pt" keep-with-next="always">ANNEXES</fo:block>
							<xsl:for-each select="$contents//item[@type = 'annex' and @display = 'true']">
								<fo:block role="TOCI">
									<fo:block text-align-last="justify" margin-left="12mm" text-indent="-12mm">
										<fo:basic-link internal-destination="{@id}" fox:alt-text="{@section}">
											<xsl:if test="@section != ''">
												<fo:inline padding-right="3mm">
													<xsl:choose>
														<xsl:when test="contains(@section, 'Annex')">
															<xsl:value-of select="substring-after(@section, 'Annex')"/>
															<xsl:text>: </xsl:text>
														</xsl:when>
														<xsl:otherwise>
															<xsl:value-of select="@section"/>
														</xsl:otherwise>
													</xsl:choose>
												</fo:inline>
											</xsl:if>
											
											<xsl:apply-templates/>
											
											<fo:inline keep-together.within-line="always">
												<fo:leader leader-pattern="dots"/>
												<fo:page-number-citation ref-id="{@id}"/>
											</fo:inline>
										</fo:basic-link>
									</fo:block>
								</fo:block>
							</xsl:for-each>
						</xsl:if>
							
						<!-- List of Tables -->
						<xsl:if test="$contents//tables/table">
							<xsl:call-template name="insertListOf_Title">
								<xsl:with-param name="title" select="$title-list-tables"/>
							</xsl:call-template>
							<xsl:for-each select="$contents//tables/table">
								<xsl:call-template name="insertListOf_Item"/>
							</xsl:for-each>
						</xsl:if>
							
						<!-- List of Figures -->
						<xsl:if test="$contents//figures/figure">
							<xsl:call-template name="insertListOf_Title">
								<xsl:with-param name="title" select="$title-list-figures"/>
							</xsl:call-template>
							<xsl:for-each select="$contents//figures/figure">
								<xsl:call-template name="insertListOf_Item"/>
							</xsl:for-each>
						</xsl:if>
							
					</fo:block>
				</fo:flow>
			</fo:page-sequence>
			
			
			<!-- End Preface Pages -->
			
			<!-- Document Pages -->
			<fo:page-sequence master-reference="document" initial-page-number="1" format="1" force-page-count="no-force" line-height="115%">
				<fo:static-content flow-name="xsl-footnote-separator">
					<fo:block margin-left="-20mm">
						<fo:leader leader-pattern="rule" leader-length="35%"/>
					</fo:block>
				</fo:static-content>
				<xsl:call-template name="insertHeader"/>
				<xsl:call-template name="insertFooter"/>
				<fo:flow flow-name="xsl-region-body">
					
					<xsl:if test="$debug = 'true'">
						<xsl:text disable-output-escaping="yes">&lt;!--</xsl:text>
							DEBUG
							contents=<xsl:copy-of select="$contents"/>
						<xsl:text disable-output-escaping="yes">--&gt;</xsl:text>
					</xsl:if>
					
					<fo:block>
						<xsl:apply-templates select="/un:un-standard/un:sections/*"/>
						<xsl:apply-templates select="/un:un-standard/un:annex"/>
						<xsl:apply-templates select="/un:un-standard/un:bibliography/un:references"/>
					</fo:block>
					
					
					<fo:block-container margin-left="50mm" width="30mm" border-bottom="1pt solid black">
						<fo:block> </fo:block>
					</fo:block-container>
					
				</fo:flow>
			</fo:page-sequence>
			<!-- End Document Pages -->
			
			<!-- Back Page -->
			<fo:page-sequence master-reference="cover-page" force-page-count="no-force">
				<fo:flow flow-name="xsl-region-body">
					<fo:block> </fo:block>
					<fo:block break-after="page"/>
					<fo:block-container absolute-position="fixed" left="0mm" top="72mm">
						<fo:block>
							<fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Back))}" width="210mm" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Image Front"/>
						</fo:block>
					</fo:block-container>
					<fo:block-container absolute-position="fixed" font-family="Arial" font-size="10pt" top="240mm" left="20mm" line-height="110%">
						<fo:block>
							<xsl:apply-templates select="/un:un-standard/un:boilerplate/un:feedback-statement"/>
						</fo:block>
					</fo:block-container>
				</fo:flow>
			</fo:page-sequence>
		</fo:root>
	</xsl:template> 
	
	<xsl:template name="insertListOf_Title">
		<xsl:param name="title"/>
		<fo:block text-align="center" margin-top="12pt" margin-bottom="12pt" keep-with-next="always">
			<xsl:value-of select="$title"/>
		</fo:block>
	</xsl:template>

	<xsl:template name="insertListOf_Item">
		<fo:block role="TOCI">
			<fo:block text-align-last="justify" margin-left="12mm" text-indent="-12mm">
				<fo:basic-link internal-destination="{@id}">
					<xsl:call-template name="setAltText">
						<xsl:with-param name="value" select="@alt-text"/>
					</xsl:call-template>
					<xsl:apply-templates select="." mode="contents"/>
					<fo:inline keep-together.within-line="always">
						<fo:leader leader-pattern="dots"/>
						<fo:page-number-citation ref-id="{@id}"/>
					</fo:inline>
				</fo:basic-link>
			</fo:block>
		</fo:block>
	</xsl:template>

	<!-- ============================= -->
	<!-- CONTENTS                                       -->
	<!-- ============================= -->
	
	<xsl:template match="un:un-standard/un:sections/*" mode="contents">
		<xsl:apply-templates mode="contents"/>
	</xsl:template>
	
	
	<!-- element with title -->
	<xsl:template match="*[un:title]" mode="contents">
		<xsl:variable name="level">
			<xsl:call-template name="getLevel">
				<xsl:with-param name="depth" select="un:title/@depth"/>
			</xsl:call-template>
		</xsl:variable>
		
		
		<xsl:variable name="display">
			<xsl:choose>				
				<xsl:when test="ancestor-or-self::un:annex and $level &gt;= 2">false</xsl:when>
				<xsl:when test="$level &gt; $toc_level">false</xsl:when>
				<xsl:when test="@inline-header='true'">false</xsl:when>
				<xsl:otherwise>true</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:variable name="skip">
			<xsl:choose>
				<xsl:when test="ancestor-or-self::un:bibitem">true</xsl:when>
				<xsl:when test="ancestor-or-self::un:term">true</xsl:when>
				<xsl:when test="@inline-header='true'">true</xsl:when>
				<xsl:otherwise>false</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:if test="$display = 'true'">		
		
			<xsl:variable name="section">
				<xsl:call-template name="getSection"/>
			</xsl:variable>
			
			<xsl:variable name="title">
				<xsl:call-template name="getName"/>
			</xsl:variable>
			
			<xsl:variable name="type">
				<xsl:value-of select="local-name()"/>
			</xsl:variable>
			
			<item id="{@id}" level="{$level}" section="{$section}" type="{$type}" display="{$display}">
				<title>
					<xsl:apply-templates select="xalan:nodeset($title)" mode="contents_item"/>
				</title>
				<xsl:apply-templates mode="contents"/>
			</item>
			
		</xsl:if>	
		
	</xsl:template>
	
	<xsl:template match="un:strong" mode="contents_item" priority="2">
		<xsl:apply-templates mode="contents_item"/>
	</xsl:template>
	
	<xsl:template match="un:br" mode="contents_item" priority="2">
		<fo:inline> </fo:inline>
	</xsl:template>

	<xsl:template match="un:references" mode="contents">
		<xsl:apply-templates mode="contents"/>
	</xsl:template>
	
	<!-- ============================= -->
	<!-- ============================= -->
		
		
		
	<xsl:template match="un:legal-statement//un:clause/un:title" priority="2">
		<xsl:variable name="level">
			<xsl:call-template name="getLevel"/>
		</xsl:variable>
		<fo:block font-weight="bold" role="H{$level}">
			<xsl:choose>
				<xsl:when test="text() = 'Note'">
					<xsl:attribute name="font-size">14pt</xsl:attribute>
					<xsl:attribute name="margin-top">28pt</xsl:attribute>
					<xsl:attribute name="margin-bottom">34pt</xsl:attribute>
					<xsl:apply-templates/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="font-size">12pt</xsl:attribute>
					<xsl:attribute name="text-align">center</xsl:attribute>
					<xsl:attribute name="margin-top">36pt</xsl:attribute>
					<xsl:attribute name="margin-bottom">26pt</xsl:attribute>
					<xsl:apply-templates/>
				</xsl:otherwise>
			</xsl:choose>
		</fo:block>
	</xsl:template>
		
	<xsl:template match="un:legal-statement//un:clause//un:title//un:br" priority="2">
		<fo:block margin-bottom="16pt"> </fo:block>
	</xsl:template>
	
	<xsl:template match="un:legal-statement//un:clause//un:p" priority="2">
		<fo:block margin-bottom="12pt">
			<xsl:if test="@align">
				<xsl:attribute name="text-align"><xsl:value-of select="@align"/></xsl:attribute>
				<xsl:if test="@align = 'center'">
					<xsl:attribute name="font-size">12pt</xsl:attribute>
					<xsl:attribute name="font-weight">bold</xsl:attribute>
					<xsl:attribute name="margin-top">96pt</xsl:attribute>
					<xsl:attribute name="margin-bottom">96pt</xsl:attribute>
				</xsl:if>
			</xsl:if>
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template>
		
		<xsl:template match="un:copyright-statement//un:clause//un:p" priority="2">
			<xsl:variable name="num"><xsl:number/></xsl:variable>
			<fo:block>
				<xsl:choose>
					<xsl:when test="$num = 1">
						<!-- ECE/TRADE/437 -->
						<fo:block font-size="12pt" text-align="center" margin-bottom="32pt"><fo:inline padding-left="8mm" padding-right="8mm" padding-top="1mm" padding-bottom="1mm" border="1pt solid black"><xsl:apply-templates/></fo:inline></fo:block>
					</xsl:when>
					<xsl:otherwise>
						<fo:block text-align="center">
							<xsl:apply-templates/>
						</fo:block>
					</xsl:otherwise>
				</xsl:choose>
			</fo:block>
		</xsl:template>
		
		<xsl:template match="un:feedback-statement//un:clause" priority="2">
			<xsl:apply-templates/>
			<xsl:call-template name="show_fs_table"/>
		</xsl:template>
		
		<xsl:template match="un:feedback-statement//un:clause//un:p" priority="2">
			<fo:block>
				<xsl:if test="@id = 'boilerplate-feedback-address'">
					<xsl:attribute name="margin-top">5mm</xsl:attribute>
				</xsl:if>
				<xsl:apply-templates/>
			</fo:block>
		</xsl:template>
		
		<xsl:template match="un:feedback-statement//un:clause//un:p//un:link" priority="2"/>
	
		<xsl:template name="show_fs_table">
			<fo:block>
				<fo:table table-layout="fixed" width="100mm">
					<fo:table-column column-width="21mm"/>
					<fo:table-column column-width="79mm"/>
					<fo:table-body>
						<xsl:for-each select="//un:feedback-statement//un:clause//un:p//un:link">
							<fo:table-row>
								<fo:table-cell>
									<fo:block>
										<xsl:choose>
											<xsl:when test="contains(@target, '@')">E-mail:</xsl:when>
											<xsl:when test="contains(@target, 'http')">Website:</xsl:when>
											<xsl:otherwise>Telephone:</xsl:otherwise>
										</xsl:choose>
									</fo:block>
								</fo:table-cell>
								<fo:table-cell>
									<fo:block><xsl:apply-templates/></fo:block>
								</fo:table-cell>
							</fo:table-row>
						</xsl:for-each>
					</fo:table-body>
				</fo:table>
			</fo:block>
		</xsl:template>

						
	
					
					
		
	<!-- ============================= -->
	<!-- PARAGRAPHS                                    -->
	<!-- ============================= -->	
	
	<xsl:template match="un:preface//un:p" priority="3">
		<fo:block margin-bottom="12pt">
			<xsl:attribute name="text-align">
				<xsl:choose>
					<xsl:when test="@align"><xsl:value-of select="@align"/></xsl:when>
					<xsl:otherwise>justify</xsl:otherwise>
				</xsl:choose>
			</xsl:attribute>			
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template>
	
	<xsl:template match="un:clause[@inline-header = 'true']" priority="3">
		<fo:list-block provisional-distance-between-starts="10mm" space-after="6pt">				
			<xsl:call-template name="setId"/>
			<xsl:attribute name="text-align">
				<xsl:choose>
					<xsl:when test="child::*/@align"><xsl:value-of select="child::*/@align"/></xsl:when>
					<xsl:otherwise>justify</xsl:otherwise>
				</xsl:choose>
			</xsl:attribute>
			<fo:list-item>
				<fo:list-item-label end-indent="label-end()">
					<fo:block>
						<xsl:apply-templates select="un:title" mode="inline-header"/>
					</fo:block>
				</fo:list-item-label>
				<fo:list-item-body text-indent="body-start()">
					<fo:block>
						<xsl:apply-templates/>
					</fo:block>
				</fo:list-item-body>
			</fo:list-item>
		</fo:list-block>		
	</xsl:template>
	
	<xsl:template match="un:title" mode="inline-header">
		<xsl:variable name="level">
			<xsl:call-template name="getLevel"/>
		</xsl:variable>
		<fo:inline role="H{$level}">
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template>
	
	<xsl:template match="un:p" name="paragraph">
		<xsl:param name="split_keep-within-line"/>
		<fo:block>
			<xsl:if test="following-sibling::*">
				<xsl:attribute name="margin-bottom">6pt</xsl:attribute>
			</xsl:if>
			<xsl:attribute name="text-align">
				<xsl:choose>
					<xsl:when test="@align"><xsl:value-of select="@align"/></xsl:when>
					<xsl:otherwise>justify</xsl:otherwise>
				</xsl:choose>
			</xsl:attribute>
			<xsl:apply-templates>
				<xsl:with-param name="split_keep-within-line" select="$split_keep-within-line"/>
			</xsl:apply-templates>
		</fo:block>
	</xsl:template>
	
	<xsl:template match="un:fn/un:p">
		<fo:block>
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template>

	<xsl:template match="un:li//un:p">
		<fo:block text-align="justify" margin-bottom="6pt">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template>
		
	
	<!-- ============================= -->	
	<!-- ============================= -->	
	
	
	
	
	<!-- ====== -->
	<!-- title      -->
	<!-- ====== -->
	
	<xsl:template match="un:preface//un:title" priority="3">
		<xsl:variable name="level">
			<xsl:call-template name="getLevel"/>
		</xsl:variable>
		<xsl:variable name="font-size">
			<xsl:choose>
				<xsl:when test="$level = 1 and ancestor::un:preface">17pt</xsl:when>				
				<xsl:when test="$level = 2">14pt</xsl:when>
				<xsl:otherwise>12pt</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<fo:block font-size="{$font-size}" font-weight="bold" margin-top="30pt" margin-bottom="16pt" keep-with-next="always" role="H{$level}">
			<xsl:apply-templates/>
			<xsl:apply-templates select="following-sibling::*[1][local-name() = 'variant-title'][@type = 'sub']" mode="subtitle"/>
		</fo:block>
	</xsl:template>
	
	<xsl:template match="un:annex//un:title" priority="3">
		<xsl:variable name="level">
			<xsl:call-template name="getLevel"/>
		</xsl:variable>
		<xsl:variable name="font-size">
			<xsl:choose>				
				<xsl:when test="$level = 1">17pt</xsl:when>
				<xsl:when test="$level = 2">12pt</xsl:when>				
				<xsl:otherwise>12pt</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:choose>
			<xsl:when test="$level = 1">
				<fo:block font-size="{$font-size}" font-weight="bold" space-before="3pt" margin-top="12pt" margin-bottom="16pt" keep-with-next="always" line-height="18pt" role="H{$level}">					
					<xsl:apply-templates/>
					<xsl:apply-templates select="following-sibling::*[1][local-name() = 'variant-title'][@type = 'sub']" mode="subtitle"/>
				</fo:block>
			</xsl:when>
			<xsl:when test="$level &gt;= 2">
				<fo:block font-size="{$font-size}" font-weight="bold" space-before="3pt" margin-bottom="12pt" margin-left="-9.5mm" line-height="108%" keep-with-next="always" role="H{$level}"> <!-- line-height="14.5pt" text-indent="-9.5mm" -->					
					<xsl:if test="$level = 2">
						<xsl:attribute name="margin-top">16pt</xsl:attribute>
					</xsl:if>
					<xsl:if test="$level = 3">
						<xsl:attribute name="margin-top">16pt</xsl:attribute>
					</xsl:if>
					<xsl:call-template name="insertTitleAsListItem"/>
				</fo:block>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	
	<xsl:template match="un:title[parent::un:clause[@inline-header = 'true']]" priority="3"/>
	
	<xsl:template match="un:title" name="title">

		<xsl:variable name="level">
			<xsl:call-template name="getLevel"/>
		</xsl:variable>
		
		<xsl:variable name="font-size">
			<xsl:choose>				
				<xsl:when test="$level = 1">17pt</xsl:when>
				<xsl:when test="$level = 2">14pt</xsl:when>
				<xsl:otherwise>12pt</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		
				
		<xsl:choose>			
			<xsl:when test="ancestor::un:sections">
				<fo:block font-size="{$font-size}" font-weight="bold" space-before="3pt" margin-bottom="12pt" margin-left="-9.5mm" line-height="108%" keep-with-next="always" role="H{$level}"> <!-- line-height="14.5pt" text-indent="-9.5mm" -->
					<xsl:if test="$level = 1">
						<!-- <xsl:attribute name="margin-left">-8.5mm</xsl:attribute> -->
						<xsl:attribute name="margin-top">18pt</xsl:attribute>
						<xsl:attribute name="margin-bottom">16pt</xsl:attribute>
					</xsl:if>
					<xsl:if test="$level = 2">
						<xsl:attribute name="margin-top">16pt</xsl:attribute>
					</xsl:if>
					<xsl:if test="$level = 3">
						<xsl:attribute name="margin-top">16pt</xsl:attribute>
					</xsl:if>
					<xsl:call-template name="insertTitleAsListItem"/>
				</fo:block>
			</xsl:when>
			
			<xsl:otherwise>
				<fo:block font-size="{$font-size}" font-weight="bold" text-align="left" keep-with-next="always" role="H{$level}">						
						<xsl:apply-templates/>
						<xsl:apply-templates select="following-sibling::*[1][local-name() = 'variant-title'][@type = 'sub']" mode="subtitle"/>
					</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<!-- ====== -->
	<!-- ====== -->
	
	
	
	
	<!-- ============================ -->
	<!-- for further use -->
	<!-- ============================ -->

	
	
	<xsl:template match="un:figure" priority="2">
		<fo:block-container id="{@id}">
			<xsl:if test="ancestor::un:admonition">				
				<xsl:attribute name="margin-left">-5mm</xsl:attribute>
				<xsl:attribute name="margin-right">-5mm</xsl:attribute>
			</xsl:if>			
			<xsl:apply-templates select="un:name"/>
			<fo:block>
				<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
			</fo:block>
			<xsl:call-template name="fn_display_figure"/>
			<xsl:for-each select="un:note">
				<xsl:call-template name="note"/>
			</xsl:for-each>
		</fo:block-container>
	</xsl:template>
	
	
	
	<!-- ============================ -->
	<!-- ============================ -->	
	
	<xsl:template name="insertHeaderPreface">
		<fo:static-content flow-name="header" role="artifact">
			<fo:block-container height="25.5mm" display-align="before" border-bottom="0.5pt solid black">
				<fo:block font-weight="bold" padding-top="20.5mm" text-align="center">
					<!-- <xsl:text>UN/CEFACT </xsl:text> -->
					<xsl:value-of select="$doctypenumber"/>
				</fo:block>
			</fo:block-container>
		</fo:static-content>
	</xsl:template>
	
	<xsl:template name="insertHeader">
		<fo:static-content flow-name="header" role="artifact">
			<fo:block-container height="28.5mm" display-align="before" border-bottom="0.5pt solid black">
				<fo:block font-weight="bold" padding-top="20.5mm" text-align="center">
					<!-- <xsl:text>UN/CEFACT </xsl:text> -->
					<xsl:value-of select="$doctypenumber"/>
				</fo:block>
			</fo:block-container>
		</fo:static-content>
	</xsl:template>
	
	<xsl:template name="insertFooter">
		<fo:static-content flow-name="footer" role="artifact">
			<fo:block-container height="29mm" display-align="after">
				<fo:block font-size="9pt" font-weight="bold" text-align="center" padding-bottom="24mm"><fo:page-number/></fo:block>
			</fo:block-container>
		</fo:static-content>
	</xsl:template>


	<xsl:variable name="Image-Front">
		<xsl:text>iVBORw0KGgoAAAANSUhEUgAACKgAAAgZCAYAAAAs8cpGAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA8BpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMDE0IDc5LjE1Njc5NywgMjAxNC8wOC8yMC0wOTo1MzowMiAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDoyNjJFMzc5RjI5OTQxMUVBOTY2NENEQjlFQjcyMzIwMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDoyNjJFMzc5RTI5OTQxMUVBOTY2NENEQjlFQjcyMzIwMiIgeG1wOkNyZWF0b3JUb29sPSJBY3JvYmF0IFBERk1ha2VyIDE4IGZvciBXb3JkIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InV1aWQ6OTM1MzU0ZmUtYzRmYS00Y2I4LTlkOGMtYjk0M2E4OTk2YzhiIiBzdFJlZjpkb2N1bWVudElEPSJ1dWlkOjhlMzkwMGEzLTMwZWUtNGRlNy04NDc0LTlhZTA5ZTFjZjhmMiIvPiA8ZGM6Y3JlYXRvcj4gPHJkZjpTZXE+IDxyZGY6bGk+U3RlcGhl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</xsl:text>
	</xsl:variable>

	<xsl:variable name="Image-Back">
		<xsl:text></xsl:text>
	</xsl:variable>

	<xsl:variable name="Image-Logo">
		<xsl:text>iVBORw0KGgoAAAANSUhEUgAAAUgAAAEfCAYAAAAjn198AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA8BpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMDE0IDc5LjE1Njc5NywgMjAxNC8wOC8yMC0wOTo1MzowMiAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo4M0JCQjMxNzJBNjcxMUVBQjQ3MkM1NDNGQjcxMjlFQyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo4M0JCQjMxNjJBNjcxMUVBQjQ3MkM1NDNGQjcxMjlFQyIgeG1wOkNyZWF0b3JUb29sPSJBY3JvYmF0IFBERk1ha2VyIDE4IGZvciBXb3JkIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InV1aWQ6OTM1MzU0ZmUtYzRmYS00Y2I4LTlkOGMtYjk0M2E4OTk2YzhiIiBzdFJlZjpkb2N1bWVudElEPSJ1dWlkOjhlMzkwMGEzLTMwZWUtNGRlNy04NDc0LTlhZTA5ZTFjZjhmMiIvPiA8ZGM6Y3JlYXRvcj4gPHJkZjpTZXE+IDxyZGY6bGk+U3RlcGhl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</xsl:text>
	</xsl:variable>
	
<xsl:param name="svg_images"/><xsl:variable name="images" select="document($svg_images)"/><xsl:param name="basepath"/><xsl:param name="external_index"/><xsl:param name="syntax-highlight">false</xsl:param><xsl:param name="add_math_as_text">true</xsl:param><xsl:param name="table_if">false</xsl:param><xsl:param name="table_widths"/><xsl:variable name="table_widths_from_if" select="xalan:nodeset($table_widths)"/><xsl:variable name="table_widths_from_if_calculated_">
		<xsl:for-each select="$table_widths_from_if//table">
			<xsl:copy>
				<xsl:copy-of select="@*"/>
				<xsl:call-template name="calculate-column-widths-autolayout-algorithm"/>
			</xsl:copy>
		</xsl:for-each>
	</xsl:variable><xsl:variable name="table_widths_from_if_calculated" select="xalan:nodeset($table_widths_from_if_calculated_)"/><xsl:param name="table_if_debug">false</xsl:param><xsl:variable name="isGenerateTableIF_">
		false
	</xsl:variable><xsl:variable name="isGenerateTableIF" select="normalize-space($isGenerateTableIF_)"/><xsl:variable name="lang">
		<xsl:call-template name="getLang"/>
	</xsl:variable><xsl:variable name="papersize" select="java:toLowerCase(java:java.lang.String.new(normalize-space(//*[contains(local-name(), '-standard')]/*[local-name() = 'misc-container']/*[local-name() = 'presentation-metadata']/*[local-name() = 'papersize'])))"/><xsl:variable name="papersize_width_">
		<xsl:choose>
			<xsl:when test="$papersize = 'letter'">215.9</xsl:when>
			<xsl:when test="$papersize = 'a4'">210</xsl:when>
		</xsl:choose>
	</xsl:variable><xsl:variable name="papersize_width" select="normalize-space($papersize_width_)"/><xsl:variable name="papersize_height_">
		<xsl:choose>
			<xsl:when test="$papersize = 'letter'">279.4</xsl:when>
			<xsl:when test="$papersize = 'a4'">297</xsl:when>
		</xsl:choose>
	</xsl:variable><xsl:variable name="papersize_height" select="normalize-space($papersize_height_)"/><xsl:variable name="pageWidth_">
		<xsl:choose>
			<xsl:when test="$papersize_width != ''"><xsl:value-of select="$papersize_width"/></xsl:when>
			<xsl:otherwise>
				210
			</xsl:otherwise>
		</xsl:choose>
	</xsl:variable><xsl:variable name="pageWidth" select="normalize-space($pageWidth_)"/><xsl:variable name="pageHeight_">
		<xsl:choose>
			<xsl:when test="$papersize_height != ''"><xsl:value-of select="$papersize_height"/></xsl:when>
			<xsl:otherwise>
				297
			</xsl:otherwise>
		</xsl:choose>
	</xsl:variable><xsl:variable name="pageHeight" select="normalize-space($pageHeight_)"/><xsl:variable name="marginLeftRight1_">
		40
	</xsl:variable><xsl:variable name="marginLeftRight1" select="normalize-space($marginLeftRight1_)"/><xsl:variable name="marginLeftRight2_">
		40
	</xsl:variable><xsl:variable name="marginLeftRight2" select="normalize-space($marginLeftRight2_)"/><xsl:variable name="marginTop_">
		30
	</xsl:variable><xsl:variable name="marginTop" select="normalize-space($marginTop_)"/><xsl:variable name="marginBottom_">
		34
	</xsl:variable><xsl:variable name="marginBottom" select="normalize-space($marginBottom_)"/><xsl:variable name="titles_">
		
		
		<!-- These titles of Table of contents renders different than determined in localized-strings -->
		<title-toc lang="en">
			
				<xsl:text>Contents</xsl:text>
			
			
			
		</title-toc>
		<title-toc lang="fr">
			<xsl:text>Sommaire</xsl:text>
		</title-toc>
		<title-toc lang="zh">
			
					<xsl:text>Contents</xsl:text>
				
		</title-toc>
		
		<title-descriptors lang="en">Descriptors</title-descriptors>
		
		<title-part lang="en">
			
			
			
		</title-part>
		<title-part lang="fr">
			
			
			
		</title-part>
		<title-part lang="ru">
			
			
		</title-part>
		<title-part lang="zh">第 # 部分:</title-part>
		
		<title-subpart lang="en">Sub-part #</title-subpart>
		<title-subpart lang="fr">Partie de sub #</title-subpart>
		
		<title-list-tables lang="en">List of Tables</title-list-tables>
		
		<title-list-figures lang="en">List of Figures</title-list-figures>
		
		<title-table-figures lang="en">Table of Figures</title-table-figures>
		
		<title-list-recommendations lang="en">List of Recommendations</title-list-recommendations>
		
		<title-summary lang="en">Summary</title-summary>
		
		<title-continued lang="ru">(продолжение)</title-continued>
		<title-continued lang="en">(continued)</title-continued>
		<title-continued lang="fr">(continué)</title-continued>
		
	</xsl:variable><xsl:variable name="titles" select="xalan:nodeset($titles_)"/><xsl:variable name="title-list-tables">
		<xsl:variable name="toc_table_title" select="//*[contains(local-name(), '-standard')]/*[local-name() = 'misc-container']/*[local-name() = 'toc'][@type='table']/*[local-name() = 'title']"/>
		<xsl:value-of select="$toc_table_title"/>
		<xsl:if test="normalize-space($toc_table_title) = ''">
			<xsl:call-template name="getTitle">
				<xsl:with-param name="name" select="'title-list-tables'"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:variable><xsl:variable name="title-list-figures">
		<xsl:variable name="toc_figure_title" select="//*[contains(local-name(), '-standard')]/*[local-name() = 'misc-container']/*[local-name() = 'toc'][@type='figure']/*[local-name() = 'title']"/>
		<xsl:value-of select="$toc_figure_title"/>
		<xsl:if test="normalize-space($toc_figure_title) = ''">
			<xsl:call-template name="getTitle">
				<xsl:with-param name="name" select="'title-list-figures'"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:variable><xsl:variable name="title-list-recommendations">
		<xsl:variable name="toc_requirement_title" select="//*[contains(local-name(), '-standard')]/*[local-name() = 'misc-container']/*[local-name() = 'toc'][@type='requirement']/*[local-name() = 'title']"/>
		<xsl:value-of select="$toc_requirement_title"/>
		<xsl:if test="normalize-space($toc_requirement_title) = ''">
			<xsl:call-template name="getTitle">
				<xsl:with-param name="name" select="'title-list-recommendations'"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:variable><xsl:variable name="bibdata">
		<xsl:copy-of select="//*[contains(local-name(), '-standard')]/*[local-name() = 'bibdata']"/>
		<xsl:copy-of select="//*[contains(local-name(), '-standard')]/*[local-name() = 'localized-strings']"/>
	</xsl:variable><xsl:variable name="linebreak">&#8232;</xsl:variable><xsl:variable name="tab_zh">　</xsl:variable><xsl:variable name="non_breaking_hyphen">‑</xsl:variable><xsl:variable name="thin_space"> </xsl:variable><xsl:variable name="zero_width_space">​</xsl:variable><xsl:variable name="hair_space"> </xsl:variable><xsl:variable name="en_dash">–</xsl:variable><xsl:template name="getTitle">
		<xsl:param name="name"/>
		<xsl:param name="lang"/>
		<xsl:variable name="lang_">
			<xsl:choose>
				<xsl:when test="$lang != ''">
					<xsl:value-of select="$lang"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:call-template name="getLang"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="language" select="normalize-space($lang_)"/>
		<xsl:variable name="title_" select="$titles/*[local-name() = $name][@lang = $language]"/>
		<xsl:choose>
			<xsl:when test="normalize-space($title_) != ''">
				<xsl:value-of select="$title_"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$titles/*[local-name() = $name][@lang = 'en']"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:variable name="lower">abcdefghijklmnopqrstuvwxyz</xsl:variable><xsl:variable name="upper">ABCDEFGHIJKLMNOPQRSTUVWXYZ</xsl:variable><xsl:variable name="en_chars" select="concat($lower,$upper,',.`1234567890-=~!@#$%^*()_+[]{}\|?/')"/><xsl:variable name="font_noto_sans">Noto Sans, Noto Sans HK, Noto Sans JP, Noto Sans KR, Noto Sans SC, Noto Sans TC</xsl:variable><xsl:variable name="font_noto_sans_mono">Noto Sans Mono, Noto Sans Mono CJK HK, Noto Sans Mono CJK JP, Noto Sans Mono CJK KR, Noto Sans Mono CJK SC, Noto Sans Mono CJK TC</xsl:variable><xsl:variable name="font_noto_serif">Noto Serif, Noto Serif HK, Noto Serif JP, Noto Serif KR, Noto Serif SC, Noto Serif TC</xsl:variable><xsl:attribute-set name="root-style">
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-family">Times New Roman, STIX Two Math, <xsl:value-of select="$font_noto_serif"/></xsl:attribute>
			<xsl:attribute name="font-family-generic">Serif</xsl:attribute>
			<xsl:attribute name="font-size">10pt</xsl:attribute>
		
	</xsl:attribute-set><xsl:template name="insertRootStyle">
		<xsl:param name="root-style"/>
		<xsl:variable name="root-style_" select="xalan:nodeset($root-style)"/>
		
		<xsl:variable name="additional_fonts_">
			<xsl:for-each select="//*[contains(local-name(), '-standard')][1]/*[local-name() = 'misc-container']/*[local-name() = 'presentation-metadata'][*[local-name() = 'name'] = 'fonts']/*[local-name() = 'value'] |       //*[contains(local-name(), '-standard')][1]/*[local-name() = 'presentation-metadata'][*[local-name() = 'name'] = 'fonts']/*[local-name() = 'value']">
				<xsl:value-of select="."/><xsl:if test="position() != last()">, </xsl:if>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="additional_fonts" select="normalize-space($additional_fonts_)"/>
		
		<xsl:variable name="font_family_generic" select="$root-style_/root-style/@font-family-generic"/>
		
		<xsl:for-each select="$root-style_/root-style/@*">
		
			<xsl:choose>
				<xsl:when test="local-name() = 'font-family-generic'"><!-- skip, it's using for determine 'sans' or 'serif' --></xsl:when>
				<xsl:when test="local-name() = 'font-family'">
				
					<xsl:variable name="font_regional_prefix">
						<xsl:choose>
							<xsl:when test="$font_family_generic = 'Sans'">Noto Sans</xsl:when>
							<xsl:otherwise>Noto Serif</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
				
					<xsl:attribute name="{local-name()}">
					
						<xsl:variable name="font_extended">
							<xsl:choose>
								<xsl:when test="$lang = 'zh'"><xsl:value-of select="$font_regional_prefix"/> SC</xsl:when>
								<xsl:when test="$lang = 'hk'"><xsl:value-of select="$font_regional_prefix"/> HK</xsl:when>
								<xsl:when test="$lang = 'jp'"><xsl:value-of select="$font_regional_prefix"/> JP</xsl:when>
								<xsl:when test="$lang = 'kr'"><xsl:value-of select="$font_regional_prefix"/> KR</xsl:when>
								<xsl:when test="$lang = 'sc'"><xsl:value-of select="$font_regional_prefix"/> SC</xsl:when>
								<xsl:when test="$lang = 'tc'"><xsl:value-of select="$font_regional_prefix"/> TC</xsl:when>
							</xsl:choose>
						</xsl:variable>
						<xsl:if test="normalize-space($font_extended) != ''">
							<xsl:value-of select="$font_regional_prefix"/><xsl:text>, </xsl:text>
							<xsl:value-of select="$font_extended"/><xsl:text>, </xsl:text>
						</xsl:if>
					
						<xsl:value-of select="."/>
						
						<xsl:if test="$additional_fonts != ''">
							<xsl:text>, </xsl:text><xsl:value-of select="$additional_fonts"/>
						</xsl:if>
					</xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:copy-of select="."/>
				</xsl:otherwise>
			</xsl:choose>
		
			<!-- <xsl:choose>
				<xsl:when test="local-name() = 'font-family'">
					<xsl:attribute name="{local-name()}">
						<xsl:value-of select="."/>, <xsl:value-of select="$additional_fonts"/>
					</xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:copy-of select="."/>
				</xsl:otherwise>
			</xsl:choose> -->
		</xsl:for-each>
	</xsl:template><xsl:attribute-set name="copyright-statement-style">
		
	</xsl:attribute-set><xsl:attribute-set name="copyright-statement-title-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="copyright-statement-p-style">
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="license-statement-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="license-statement-title-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="license-statement-p-style">
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="legal-statement-style">
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="legal-statement-title-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="legal-statement-p-style">
		
	</xsl:attribute-set><xsl:attribute-set name="feedback-statement-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="feedback-statement-title-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="feedback-statement-p-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="link-style">
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="sourcecode-container-style">
		
	</xsl:attribute-set><xsl:attribute-set name="sourcecode-style">
		<xsl:attribute name="white-space">pre</xsl:attribute>
		<xsl:attribute name="wrap-option">wrap</xsl:attribute>
		<xsl:attribute name="role">Code</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
				
		
		
		
		
		
			<xsl:attribute name="font-family">Courier New, <xsl:value-of select="$font_noto_sans_mono"/></xsl:attribute>			
			<xsl:attribute name="margin-top">6pt</xsl:attribute>
			<xsl:attribute name="margin-bottom">6pt</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="permission-style">
		
	</xsl:attribute-set><xsl:attribute-set name="permission-name-style">
		
	</xsl:attribute-set><xsl:attribute-set name="permission-label-style">
		
	</xsl:attribute-set><xsl:attribute-set name="requirement-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="requirement-name-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		
		
	</xsl:attribute-set><xsl:attribute-set name="requirement-label-style">
		
	</xsl:attribute-set><xsl:attribute-set name="subject-style">
	</xsl:attribute-set><xsl:attribute-set name="inherit-style">
	</xsl:attribute-set><xsl:attribute-set name="description-style">
	</xsl:attribute-set><xsl:attribute-set name="specification-style">
	</xsl:attribute-set><xsl:attribute-set name="measurement-target-style">
	</xsl:attribute-set><xsl:attribute-set name="verification-style">
	</xsl:attribute-set><xsl:attribute-set name="import-style">
	</xsl:attribute-set><xsl:attribute-set name="recommendation-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="recommendation-name-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="recommendation-label-style">
		
	</xsl:attribute-set><xsl:attribute-set name="termexample-style">
		
		
		
		
		
		
		

	</xsl:attribute-set><xsl:attribute-set name="example-style">
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="example-body-style">
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="example-name-style">
		
		
		
		
		
		
		
		
		
		
		
		
		
				
		
			<xsl:attribute name="keep-with-next">always</xsl:attribute>
			<xsl:attribute name="font-size">10pt</xsl:attribute>
			<xsl:attribute name="font-weight">bold</xsl:attribute>			
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
				
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="example-p-style">
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-size">11pt</xsl:attribute>
			<xsl:attribute name="margin-top">12pt</xsl:attribute>
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
			<xsl:attribute name="margin-left">15mm</xsl:attribute>			
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="termexample-name-style">
		
		
		
		
				
				
	</xsl:attribute-set><xsl:variable name="table-border_">
		
		
	</xsl:variable><xsl:variable name="table-border" select="normalize-space($table-border_)"/><xsl:attribute-set name="table-container-style">
		<xsl:attribute name="margin-left">0mm</xsl:attribute>
		<xsl:attribute name="margin-right">0mm</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
					
		
		
			<xsl:attribute name="space-after">12pt</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="table-style">
		<xsl:attribute name="table-omit-footer-at-break">true</xsl:attribute>
		<xsl:attribute name="table-layout">fixed</xsl:attribute>
		<xsl:attribute name="margin-left">0mm</xsl:attribute>
		<xsl:attribute name="margin-right">0mm</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			
		
	</xsl:attribute-set><xsl:attribute-set name="table-name-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
			
		
		
		
				
		
				
		
		
		
				
		
			<xsl:attribute name="font-weight">bold</xsl:attribute>
			<xsl:attribute name="text-align">left</xsl:attribute>
			<xsl:attribute name="margin-top">12pt</xsl:attribute>
			<xsl:attribute name="margin-bottom">0pt</xsl:attribute>
			<xsl:attribute name="keep-with-next">always</xsl:attribute>
			<xsl:attribute name="text-indent">0mm</xsl:attribute>
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="table-row-style">
		<xsl:attribute name="min-height">4mm</xsl:attribute>
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="table-header-row-style" use-attribute-sets="table-row-style">
		<xsl:attribute name="font-weight">bold</xsl:attribute>
		
		
		
		
		
		
		
				
		
	</xsl:attribute-set><xsl:attribute-set name="table-footer-row-style" use-attribute-sets="table-row-style">
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="table-body-row-style" use-attribute-sets="table-row-style">

	</xsl:attribute-set><xsl:attribute-set name="table-header-cell-style">
		<xsl:attribute name="font-weight">bold</xsl:attribute>
		<xsl:attribute name="border">solid black 1pt</xsl:attribute>
		<xsl:attribute name="padding-left">1mm</xsl:attribute>
		<xsl:attribute name="padding-right">1mm</xsl:attribute>
		<xsl:attribute name="display-align">center</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="text-indent">0mm</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="table-cell-style">
		<xsl:attribute name="display-align">center</xsl:attribute>
		<xsl:attribute name="border">solid black 1pt</xsl:attribute>
		<xsl:attribute name="padding-left">1mm</xsl:attribute>
		<xsl:attribute name="padding-right">1mm</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="text-indent">0mm</xsl:attribute>
			
		
	</xsl:attribute-set><xsl:attribute-set name="table-footer-cell-style">
		<xsl:attribute name="border">solid black 1pt</xsl:attribute>
		<xsl:attribute name="padding-left">1mm</xsl:attribute>
		<xsl:attribute name="padding-right">1mm</xsl:attribute>
		<xsl:attribute name="padding-top">1mm</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="table-note-style">
		<xsl:attribute name="font-size">10pt</xsl:attribute>
		<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
		
		
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="table-fn-style">
		<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
		
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="table-fn-number-style">
		<xsl:attribute name="font-size">80%</xsl:attribute>
		<xsl:attribute name="padding-right">5mm</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="vertical-align">super</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="fn-container-body-style">
		<xsl:attribute name="text-indent">0</xsl:attribute>
		<xsl:attribute name="start-indent">0</xsl:attribute>
		
		
	</xsl:attribute-set><xsl:attribute-set name="table-fn-body-style">
		
	</xsl:attribute-set><xsl:attribute-set name="figure-fn-number-style">
		<xsl:attribute name="font-size">80%</xsl:attribute>
		<xsl:attribute name="padding-right">5mm</xsl:attribute>
		<xsl:attribute name="vertical-align">super</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="figure-fn-body-style">
		<xsl:attribute name="text-align">justify</xsl:attribute>
		<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="dt-row-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="dt-cell-style">
	</xsl:attribute-set><xsl:attribute-set name="dt-block-style">
		<xsl:attribute name="margin-top">6pt</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="dl-name-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		<xsl:attribute name="margin-bottom">6pt</xsl:attribute>
			
		
		
		
		
		
				
		
		
		
				
		
			<xsl:attribute name="font-weight">bold</xsl:attribute>
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="dd-cell-style">
		<xsl:attribute name="padding-left">2mm</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="appendix-style">
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="appendix-example-style">
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="xref-style">
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="eref-style">
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="note-style">
		
		
		
		
				
				
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="margin-top">3pt</xsl:attribute>			
			<xsl:attribute name="border-top">0.1mm solid black</xsl:attribute>
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
		
		
	</xsl:attribute-set><xsl:variable name="note-body-indent">10mm</xsl:variable><xsl:variable name="note-body-indent-table">5mm</xsl:variable><xsl:attribute-set name="note-name-style">
		
		
		
		
		
		
		
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="table-note-name-style">
		<xsl:attribute name="padding-right">2mm</xsl:attribute>
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="note-p-style">
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="margin-top">3pt</xsl:attribute>			
			<!-- <xsl:attribute name="border-top">0.1mm solid black</xsl:attribute> -->
			<xsl:attribute name="space-after">12pt</xsl:attribute>			
			<xsl:attribute name="text-indent">0</xsl:attribute>
			<xsl:attribute name="padding-top">1.5mm</xsl:attribute>
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="termnote-style">
		
		
				
		
		
					
			<xsl:attribute name="margin-top">4pt</xsl:attribute>			
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="termnote-name-style">
		
				
		
		
	</xsl:attribute-set><xsl:attribute-set name="termnote-p-style">
		
	</xsl:attribute-set><xsl:attribute-set name="quote-style">
		<xsl:attribute name="margin-left">12mm</xsl:attribute>
		<xsl:attribute name="margin-right">12mm</xsl:attribute>
		
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="quote-source-style">		
		<xsl:attribute name="text-align">right</xsl:attribute>
		
				
	</xsl:attribute-set><xsl:attribute-set name="termsource-style">
		
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="termsource-text-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="origin-style">
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="term-style">
		
	</xsl:attribute-set><xsl:attribute-set name="term-name-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		<xsl:attribute name="font-weight">bold</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="figure-style">
		
	</xsl:attribute-set><xsl:attribute-set name="figure-name-style">
		
		
		
				
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
			<xsl:attribute name="text-align">center</xsl:attribute>
			<xsl:attribute name="font-size">9pt</xsl:attribute>
			<xsl:attribute name="margin-bottom">6pt</xsl:attribute>
			<xsl:attribute name="keep-with-next">always</xsl:attribute>
			<xsl:attribute name="keep-together.within-column">always</xsl:attribute>
		
			
	</xsl:attribute-set><xsl:attribute-set name="formula-style">
		<xsl:attribute name="margin-top">6pt</xsl:attribute>
		<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="formula-stem-block-style">
		<xsl:attribute name="text-align">center</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="formula-stem-number-style">
		<xsl:attribute name="text-align">right</xsl:attribute>
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="image-style">
		<xsl:attribute name="text-align">center</xsl:attribute>
		
		
		
		
		
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
			<xsl:attribute name="keep-with-next">always</xsl:attribute>			
		
		
	</xsl:attribute-set><xsl:attribute-set name="figure-pseudocode-p-style">
		
	</xsl:attribute-set><xsl:attribute-set name="image-graphic-style">
		<xsl:attribute name="width">100%</xsl:attribute>
		<xsl:attribute name="content-height">100%</xsl:attribute>
		<xsl:attribute name="scaling">uniform</xsl:attribute>			
		
		
			<xsl:attribute name="content-height">scale-to-fit</xsl:attribute>
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="tt-style">
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="sourcecode-name-style">
		<xsl:attribute name="font-size">11pt</xsl:attribute>
		<xsl:attribute name="font-weight">bold</xsl:attribute>
		<xsl:attribute name="text-align">center</xsl:attribute>
		<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		<xsl:attribute name="keep-with-previous">always</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="preferred-block-style">
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="preferred-term-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		<xsl:attribute name="font-weight">bold</xsl:attribute>
		
		
	</xsl:attribute-set><xsl:attribute-set name="domain-style">
				
	</xsl:attribute-set><xsl:attribute-set name="admitted-style">
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="deprecates-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="definition-style">
		
		
		
	</xsl:attribute-set><xsl:variable name="color-added-text">
		<xsl:text>rgb(0, 255, 0)</xsl:text>
	</xsl:variable><xsl:attribute-set name="add-style">
		
				<xsl:attribute name="color">red</xsl:attribute>
				<xsl:attribute name="text-decoration">underline</xsl:attribute>
				<!-- <xsl:attribute name="color">black</xsl:attribute>
				<xsl:attribute name="background-color"><xsl:value-of select="$color-added-text"/></xsl:attribute>
				<xsl:attribute name="padding-top">1mm</xsl:attribute>
				<xsl:attribute name="padding-bottom">0.5mm</xsl:attribute> -->
			
	</xsl:attribute-set><xsl:variable name="add-style">
			<add-style xsl:use-attribute-sets="add-style"/>
		</xsl:variable><xsl:template name="append_add-style">
		<xsl:copy-of select="xalan:nodeset($add-style)/add-style/@*"/>
	</xsl:template><xsl:variable name="color-deleted-text">
		<xsl:text>red</xsl:text>
	</xsl:variable><xsl:attribute-set name="del-style">
		<xsl:attribute name="color"><xsl:value-of select="$color-deleted-text"/></xsl:attribute>
		<xsl:attribute name="text-decoration">line-through</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="mathml-style">
		<xsl:attribute name="font-family">STIX Two Math</xsl:attribute>
		
		
	</xsl:attribute-set><xsl:attribute-set name="list-style">
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="provisional-distance-between-starts">3mm</xsl:attribute>
			<xsl:attribute name="margin-left">7mm</xsl:attribute>
			<xsl:attribute name="text-indent">0mm</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="list-name-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
			
		
		
		
		
				
		
		
		
				
		
			<xsl:attribute name="font-weight">bold</xsl:attribute>
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="list-item-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="list-item-label-style">
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="list-item-body-style">
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="toc-style">
		<xsl:attribute name="line-height">135%</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="fn-reference-style">
		<xsl:attribute name="font-size">80%</xsl:attribute>
		<xsl:attribute name="keep-with-previous.within-line">always</xsl:attribute>
		
		
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="fn-style">
		<xsl:attribute name="keep-with-previous.within-line">always</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="fn-num-style">
		<xsl:attribute name="keep-with-previous.within-line">always</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-size">55%</xsl:attribute>
			<xsl:attribute name="vertical-align">super</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="fn-body-style">
		<xsl:attribute name="font-weight">normal</xsl:attribute>
		<xsl:attribute name="font-style">normal</xsl:attribute>
		<xsl:attribute name="text-indent">0</xsl:attribute>
		<xsl:attribute name="start-indent">0</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-size">9pt</xsl:attribute>
			<xsl:attribute name="line-height">125%</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="fn-body-num-style">
		<xsl:attribute name="keep-with-next.within-line">always</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-size">60%</xsl:attribute>
			<xsl:attribute name="padding-right">1mm</xsl:attribute>
			<xsl:attribute name="vertical-align">super</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="admonition-style">
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="border">0.25pt solid black</xsl:attribute>
			<xsl:attribute name="margin-top">7mm</xsl:attribute>
			<xsl:attribute name="margin-left">-9mm</xsl:attribute>
			<xsl:attribute name="margin-right">-14mm</xsl:attribute>
			<xsl:attribute name="padding-top">3mm</xsl:attribute>
			<xsl:attribute name="margin-bottom">16pt</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="admonition-container-style">
		<xsl:attribute name="margin-left">0mm</xsl:attribute>
		<xsl:attribute name="margin-right">0mm</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="margin-left">20mm</xsl:attribute>
			<xsl:attribute name="margin-right">20mm</xsl:attribute>
			<xsl:attribute name="text-indent">0mm</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="admonition-name-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-weight">bold</xsl:attribute>
			<xsl:attribute name="margin-left">20mm</xsl:attribute>
			<xsl:attribute name="margin-right">25mm</xsl:attribute>
			<xsl:attribute name="text-align">center</xsl:attribute>
			<xsl:attribute name="margin-top">6pt</xsl:attribute>
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
			<xsl:attribute name="keep-with-next">always</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="admonition-p-style">
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="text-align">justify</xsl:attribute>
			<xsl:attribute name="margin-bottom">6pt</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-normative-style">
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="margin-top">6pt</xsl:attribute>
			<xsl:attribute name="margin-left">14mm</xsl:attribute>
			<xsl:attribute name="text-indent">-14mm</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-normative-list-style">
		<xsl:attribute name="provisional-distance-between-starts">12mm</xsl:attribute>
		<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
		
		
		
		<!-- <xsl:if test="$namespace = 'ieee'">
			<xsl:attribute name="margin-bottom">6pt</xsl:attribute>
			<xsl:attribute name="provisional-distance-between-starts">9.5mm</xsl:attribute>
		</xsl:if> -->
		
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-non-normative-style">
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-non-normative-list-style">
		<xsl:attribute name="provisional-distance-between-starts">12mm</xsl:attribute>
		<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-normative-list-body-style">
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-non-normative-list-body-style">
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-note-fn-style">
		<xsl:attribute name="keep-with-previous.within-line">always</xsl:attribute>
		<xsl:attribute name="font-size">65%</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="vertical-align">super</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-note-fn-number-style">
		<xsl:attribute name="keep-with-next.within-line">always</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-size">60%</xsl:attribute>
			<xsl:attribute name="vertical-align">super</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-note-fn-body-style">
		<xsl:attribute name="font-size">10pt</xsl:attribute>
		<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		<xsl:attribute name="start-indent">0pt</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="references-non-normative-style">
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="hljs-doctag">
		<xsl:attribute name="color">#d73a49</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-keyword">
		<xsl:attribute name="color">#d73a49</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-meta_hljs-keyword">
		<xsl:attribute name="color">#d73a49</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-template-tag">
		<xsl:attribute name="color">#d73a49</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-template-variable">
		<xsl:attribute name="color">#d73a49</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-type">
		<xsl:attribute name="color">#d73a49</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-variable_and_language_">
		<xsl:attribute name="color">#d73a49</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-title">
		<xsl:attribute name="color">#6f42c1</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-title_and_class_">
		<xsl:attribute name="color">#6f42c1</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-title_and_class__and_inherited__">
		<xsl:attribute name="color">#6f42c1</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-title_and_function_">
		<xsl:attribute name="color">#6f42c1</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-attr">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-attribute">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-literal">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-meta">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-number">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-operator">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-variable">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-selector-attr">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-selector-class">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-selector-id">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-regexp">
		<xsl:attribute name="color">#032f62</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-string">
		<xsl:attribute name="color">#032f62</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-meta_hljs-string">
		<xsl:attribute name="color">#032f62</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-built_in">
		<xsl:attribute name="color">#e36209</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-symbol">
		<xsl:attribute name="color">#e36209</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-comment">
		<xsl:attribute name="color">#6a737d</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-code">
		<xsl:attribute name="color">#6a737d</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-formula">
		<xsl:attribute name="color">#6a737d</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-name">
		<xsl:attribute name="color">#22863a</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-quote">
		<xsl:attribute name="color">#22863a</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-selector-tag">
		<xsl:attribute name="color">#22863a</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-selector-pseudo">
		<xsl:attribute name="color">#22863a</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-subst">
		<xsl:attribute name="color">#24292e</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-section">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
		<xsl:attribute name="font-weight">bold</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-bullet">
		<xsl:attribute name="color">#735c0f</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-emphasis">
		<xsl:attribute name="color">#24292e</xsl:attribute>
		<xsl:attribute name="font-style">italic</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-strong">
		<xsl:attribute name="color">#24292e</xsl:attribute>
		<xsl:attribute name="font-weight">bold</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-addition">
		<xsl:attribute name="color">#22863a</xsl:attribute>
		<xsl:attribute name="background-color">#f0fff4</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-deletion">
		<xsl:attribute name="color">#b31d28</xsl:attribute>
		<xsl:attribute name="background-color">#ffeef0</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-char_and_escape_">
	</xsl:attribute-set><xsl:attribute-set name="hljs-link">
	</xsl:attribute-set><xsl:attribute-set name="hljs-params">
	</xsl:attribute-set><xsl:attribute-set name="hljs-property">
	</xsl:attribute-set><xsl:attribute-set name="hljs-punctuation">
	</xsl:attribute-set><xsl:attribute-set name="hljs-tag">
	</xsl:attribute-set><xsl:attribute-set name="indexsect-title-style">
		<xsl:attribute name="role">H1</xsl:attribute>
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="indexsect-clause-title-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		
		
		
		
		
	</xsl:attribute-set><xsl:variable name="border-block-added">2.5pt solid rgb(0, 176, 80)</xsl:variable><xsl:variable name="border-block-deleted">2.5pt solid rgb(255, 0, 0)</xsl:variable><xsl:variable name="ace_tag">ace-tag_</xsl:variable><xsl:template name="processPrefaceSectionsDefault_Contents">
		<xsl:variable name="nodes_preface_">
			<xsl:for-each select="/*/*[local-name()='preface']/*[not(local-name() = 'note' or local-name() = 'admonition')]">
				<node id="{@id}"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="nodes_preface" select="xalan:nodeset($nodes_preface_)"/>
		
		<xsl:for-each select="/*/*[local-name()='preface']/*[not(local-name() = 'note' or local-name() = 'admonition')]">
			<xsl:sort select="@displayorder" data-type="number"/>
			
			<!-- process Section's title -->
			<xsl:variable name="preceding-sibling_id" select="$nodes_preface/node[@id = current()/@id]/preceding-sibling::node[1]/@id"/>
			<xsl:if test="$preceding-sibling_id != ''">
				<xsl:apply-templates select="parent::*/*[@type = 'section-title' and @id = $preceding-sibling_id and not(@displayorder)]" mode="contents_no_displayorder"/>
			</xsl:if>
			
			<xsl:apply-templates select="." mode="contents"/>
		</xsl:for-each>
	</xsl:template><xsl:template name="processMainSectionsDefault_Contents">
	
		<xsl:variable name="nodes_sections_">
			<xsl:for-each select="/*/*[local-name()='sections']/*">
				<node id="{@id}"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="nodes_sections" select="xalan:nodeset($nodes_sections_)"/>
		
		<xsl:for-each select="/*/*[local-name()='sections']/* | /*/*[local-name()='bibliography']/*[local-name()='references'][@normative='true'] |    /*/*[local-name()='bibliography']/*[local-name()='clause'][*[local-name()='references'][@normative='true']]">
			<xsl:sort select="@displayorder" data-type="number"/>
			
			<!-- process Section's title -->
			<xsl:variable name="preceding-sibling_id" select="$nodes_sections/node[@id = current()/@id]/preceding-sibling::node[1]/@id"/>
			<xsl:if test="$preceding-sibling_id != ''">
				<xsl:apply-templates select="parent::*/*[@type = 'section-title' and @id = $preceding-sibling_id and not(@displayorder)]" mode="contents_no_displayorder"/>
			</xsl:if>
			
			<xsl:apply-templates select="." mode="contents"/>
		</xsl:for-each>
		
		<xsl:for-each select="/*/*[local-name()='annex']">
			<xsl:sort select="@displayorder" data-type="number"/>
			<xsl:apply-templates select="." mode="contents"/>
		</xsl:for-each>
		
		<xsl:for-each select="/*/*[local-name()='bibliography']/*[not(@normative='true') and not(*[local-name()='references'][@normative='true'])] |          /*/*[local-name()='bibliography']/*[local-name()='clause'][*[local-name()='references'][not(@normative='true')]]">
			<xsl:sort select="@displayorder" data-type="number"/>
			<xsl:apply-templates select="." mode="contents"/>
		</xsl:for-each>
	</xsl:template><xsl:template name="processTablesFigures_Contents">
		<xsl:param name="always"/>
		<xsl:if test="(//*[contains(local-name(), '-standard')]/*[local-name() = 'misc-container']/*[local-name() = 'toc'][@type='table']/*[local-name() = 'title']) or normalize-space($always) = 'true'">
			<xsl:call-template name="processTables_Contents"/>
		</xsl:if>
		<xsl:if test="(//*[contains(local-name(), '-standard')]/*[local-name() = 'misc-container']/*[local-name() = 'toc'][@type='figure']/*[local-name() = 'title']) or normalize-space($always) = 'true'">
			<xsl:call-template name="processFigures_Contents"/>
		</xsl:if>
	</xsl:template><xsl:template name="processTables_Contents">
		<tables>
			<xsl:for-each select="//*[local-name() = 'table'][@id and *[local-name() = 'name'] and normalize-space(@id) != '']">
				<table id="{@id}" alt-text="{*[local-name() = 'name']}">
					<xsl:copy-of select="*[local-name() = 'name']"/>
				</table>
			</xsl:for-each>
		</tables>
	</xsl:template><xsl:template name="processFigures_Contents">
		<figures>
			<xsl:for-each select="//*[local-name() = 'figure'][@id and *[local-name() = 'name'] and not(@unnumbered = 'true') and normalize-space(@id) != ''] | //*[@id and starts-with(*[local-name() = 'name'], 'Figure ') and normalize-space(@id) != '']">
				<figure id="{@id}" alt-text="{*[local-name() = 'name']}">
					<xsl:copy-of select="*[local-name() = 'name']"/>
				</figure>
			</xsl:for-each>
		</figures>
	</xsl:template><xsl:template name="processPrefaceSectionsDefault">
		<xsl:for-each select="/*/*[local-name()='preface']/*[not(local-name() = 'note' or local-name() = 'admonition')]">
			<xsl:sort select="@displayorder" data-type="number"/>
			<xsl:apply-templates select="."/>
		</xsl:for-each>
	</xsl:template><xsl:template name="processMainSectionsDefault">
		<xsl:for-each select="/*/*[local-name()='sections']/* | /*/*[local-name()='bibliography']/*[local-name()='references'][@normative='true']">
			<xsl:sort select="@displayorder" data-type="number"/>
			<xsl:apply-templates select="."/>
			
		</xsl:for-each>
		
		<xsl:for-each select="/*/*[local-name()='annex']">
			<xsl:sort select="@displayorder" data-type="number"/>
			<xsl:apply-templates select="."/>
		</xsl:for-each>
		
		<xsl:for-each select="/*/*[local-name()='bibliography']/*[not(@normative='true')] |          /*/*[local-name()='bibliography']/*[local-name()='clause'][*[local-name()='references'][not(@normative='true')]]">
			<xsl:sort select="@displayorder" data-type="number"/>
			<xsl:apply-templates select="."/>
		</xsl:for-each>
	</xsl:template><xsl:variable name="tag_fo_inline_keep-together_within-line_open">###fo:inline keep-together_within-line###</xsl:variable><xsl:variable name="tag_fo_inline_keep-together_within-line_close">###/fo:inline keep-together_within-line###</xsl:variable><xsl:template match="text()" name="text">
		
				<xsl:variable name="regex_standard_reference">([A-Z]{2,}(/[A-Z]{2,})* \d+(-\d+)*(:\d{4})?)</xsl:variable>
				<xsl:variable name="text" select="java:replaceAll(java:java.lang.String.new(.),$regex_standard_reference,concat($tag_fo_inline_keep-together_within-line_open,'$1',$tag_fo_inline_keep-together_within-line_close))"/>
				<xsl:call-template name="replace_fo_inline_tags">
					<xsl:with-param name="tag_open" select="$tag_fo_inline_keep-together_within-line_open"/>
					<xsl:with-param name="tag_close" select="$tag_fo_inline_keep-together_within-line_close"/>
					<xsl:with-param name="text" select="$text"/>
				</xsl:call-template>
			
	</xsl:template><xsl:template name="replace_fo_inline_tags">
		<xsl:param name="tag_open"/>
		<xsl:param name="tag_close"/>
		<xsl:param name="text"/>
		<xsl:choose>
			<xsl:when test="contains($text, $tag_open)">
				<xsl:value-of select="substring-before($text, $tag_open)"/>
				<!-- <xsl:text disable-output-escaping="yes">&lt;fo:inline keep-together.within-line="always"&gt;</xsl:text> -->
				<xsl:variable name="text_after" select="substring-after($text, $tag_open)"/>
				<fo:inline keep-together.within-line="always">
					<xsl:value-of select="substring-before($text_after, $tag_close)"/>
				</fo:inline>
				<!-- <xsl:text disable-output-escaping="yes">&lt;/fo:inline&gt;</xsl:text> -->
				<xsl:call-template name="replace_fo_inline_tags">
					<xsl:with-param name="tag_open" select="$tag_open"/>
					<xsl:with-param name="tag_close" select="$tag_close"/>
					<xsl:with-param name="text" select="substring-after($text_after, $tag_close)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise><xsl:value-of select="$text"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name()='br']">
		<xsl:value-of select="$linebreak"/>
	</xsl:template><xsl:template match="*[local-name() = 'keep-together_within-line']">
		<xsl:param name="split_keep-within-line"/>
		
		<!-- <fo:inline>split_keep-within-line='<xsl:value-of select="$split_keep-within-line"/>'</fo:inline> -->
		<xsl:choose>
		
			<xsl:when test="normalize-space($split_keep-within-line) = 'true'">
				<xsl:variable name="sep">_</xsl:variable>
				<xsl:variable name="items">
					<xsl:call-template name="split">
						<xsl:with-param name="pText" select="."/>
						<xsl:with-param name="sep" select="$sep"/>
						<xsl:with-param name="normalize-space">false</xsl:with-param>
						<xsl:with-param name="keep_sep">true</xsl:with-param>
					</xsl:call-template>
				</xsl:variable>
				<xsl:for-each select="xalan:nodeset($items)/item">
					<xsl:choose>
						<xsl:when test=". = $sep">
							<xsl:value-of select="$sep"/><xsl:value-of select="$zero_width_space"/>
						</xsl:when>
						<xsl:otherwise>
							<fo:inline keep-together.within-line="always"><xsl:apply-templates/></fo:inline>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			</xsl:when>
			
			<xsl:otherwise>
				<fo:inline keep-together.within-line="always"><xsl:apply-templates/></fo:inline>
			</xsl:otherwise>
			
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name()='copyright-statement']">
		<fo:block xsl:use-attribute-sets="copyright-statement-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name()='copyright-statement']//*[local-name()='title']">
		
				<!-- process in the template 'title' -->
				<xsl:call-template name="title"/>
			
	</xsl:template><xsl:template match="*[local-name()='copyright-statement']//*[local-name()='p']">
		
		
				<!-- process in the template 'paragraph' -->
				<xsl:call-template name="paragraph"/>
			
	</xsl:template><xsl:template match="*[local-name()='license-statement']">
		<fo:block xsl:use-attribute-sets="license-statement-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name()='license-statement']//*[local-name()='title']">
		
				<!-- process in the template 'title' -->
				<xsl:call-template name="title"/>
			
	</xsl:template><xsl:template match="*[local-name()='license-statement']//*[local-name()='p']">
		
				<!-- process in the template 'paragraph' -->
				<xsl:call-template name="paragraph"/>
			
	</xsl:template><xsl:template match="*[local-name()='legal-statement']">
		<fo:block xsl:use-attribute-sets="legal-statement-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name()='legal-statement']//*[local-name()='title']">
		
				<!-- process in the template 'title' -->
				<xsl:call-template name="title"/>
			
	
	</xsl:template><xsl:template match="*[local-name()='legal-statement']//*[local-name()='p']">
		<xsl:param name="margin"/>
		
				<!-- process in the template 'paragraph' -->
				<xsl:call-template name="paragraph">
					<xsl:with-param name="margin" select="$margin"/>
				</xsl:call-template>
			
	</xsl:template><xsl:template match="*[local-name()='feedback-statement']">
		<fo:block xsl:use-attribute-sets="feedback-statement-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name()='feedback-statement']//*[local-name()='title']">
		
				<!-- process in the template 'title' -->
				<xsl:call-template name="title"/>
			
	</xsl:template><xsl:template match="*[local-name()='feedback-statement']//*[local-name()='p']">
		<xsl:param name="margin"/>
		
				<!-- process in the template 'paragraph' -->
				<xsl:call-template name="paragraph">
					<xsl:with-param name="margin" select="$margin"/>
				</xsl:call-template>
			
	</xsl:template><xsl:template match="*[local-name()='td']//text() | *[local-name()='th']//text() | *[local-name()='dt']//text() | *[local-name()='dd']//text()" priority="1">
		<xsl:choose>
			<xsl:when test="parent::*[local-name() = 'keep-together_within-line']">
				<xsl:value-of select="."/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="addZeroWidthSpacesToTextNodes"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="addZeroWidthSpacesToTextNodes">
		<xsl:variable name="text"><text><xsl:call-template name="text"/></text></xsl:variable>
		<!-- <xsl:copy-of select="$text"/> -->
		<xsl:for-each select="xalan:nodeset($text)/text/node()">
			<xsl:choose>
				<xsl:when test="self::text()"><xsl:call-template name="add-zero-spaces-java"/></xsl:when>
				<xsl:otherwise><xsl:copy-of select="."/></xsl:otherwise> <!-- copy 'as-is' for <fo:inline keep-together.within-line="always" ...  -->
			</xsl:choose>
		</xsl:for-each>
	</xsl:template><xsl:template match="*[local-name()='table']" name="table">
	
		<xsl:variable name="table-preamble">
			
			
		</xsl:variable>
		
		<xsl:variable name="table">
	
			<xsl:variable name="simple-table">
				<xsl:call-template name="getSimpleTable">
					<xsl:with-param name="id" select="@id"/>
				</xsl:call-template>
			</xsl:variable>
			<!-- <xsl:variable name="simple-table" select="xalan:nodeset($simple-table_)"/> -->
		
			<!-- simple-table=<xsl:copy-of select="$simple-table"/> -->
		
			
			<!-- Display table's name before table as standalone block -->
			<!-- $namespace = 'iso' or  -->
			
					<xsl:apply-templates select="*[local-name()='name']"/> <!-- table's title rendered before table -->
				
			
			
					<xsl:call-template name="table_name_fn_display"/>
				
			
			<xsl:variable name="cols-count" select="count(xalan:nodeset($simple-table)/*/tr[1]/td)"/>
			
			<xsl:variable name="colwidths">
				<xsl:if test="not(*[local-name()='colgroup']/*[local-name()='col'])">
					<xsl:call-template name="calculate-column-widths">
						<xsl:with-param name="cols-count" select="$cols-count"/>
						<xsl:with-param name="table" select="$simple-table"/>
					</xsl:call-template>
				</xsl:if>
			</xsl:variable>
			<!-- <xsl:variable name="colwidths" select="xalan:nodeset($colwidths_)"/> -->
			
			<!-- DEBUG -->
			<xsl:if test="$table_if_debug = 'true'">
				<fo:block font-size="60%">
					<xsl:apply-templates select="xalan:nodeset($colwidths)" mode="print_as_xml"/>
				</fo:block>
			</xsl:if>
			
			
			<!-- <xsl:copy-of select="$colwidths"/> -->
			
			<!-- <xsl:text disable-output-escaping="yes">&lt;!- -</xsl:text>
			DEBUG
			colwidths=<xsl:copy-of select="$colwidths"/>
		<xsl:text disable-output-escaping="yes">- -&gt;</xsl:text> -->
			
			
			
			<xsl:variable name="margin-side">
				<xsl:choose>
					<xsl:when test="sum(xalan:nodeset($colwidths)//column) &gt; 75">15</xsl:when>
					<xsl:otherwise>0</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			
			
			<fo:block-container xsl:use-attribute-sets="table-container-style">
			
				
					<xsl:attribute name="margin-left"><xsl:value-of select="-$margin-side"/>mm</xsl:attribute>
					<xsl:attribute name="margin-right"><xsl:value-of select="-$margin-side"/>mm</xsl:attribute>
				
			
				
			
				
			
				
				
				
				
				
			
				
				
				
				
				
					<xsl:if test="not(ancestor::*[local-name()='sections'])">
						<xsl:attribute name="font-size">10pt</xsl:attribute>
					</xsl:if>
				
				<!-- end table block-container attributes -->
				
				<!-- display table's name before table for PAS inside block-container (2-columnn layout) -->
				
				
				<xsl:variable name="table_width_default">100%</xsl:variable>
				<xsl:variable name="table_width">
					<!-- for centered table always 100% (@width will be set for middle/second cell of outer table) -->
					
							<xsl:choose>
								<xsl:when test="@width"><xsl:value-of select="@width"/></xsl:when>
								<xsl:otherwise><xsl:value-of select="$table_width_default"/></xsl:otherwise>
							</xsl:choose>
						
				</xsl:variable>
				
				
				<xsl:variable name="table_attributes">
				
					<xsl:element name="table_attributes" use-attribute-sets="table-style">
						<xsl:attribute name="width"><xsl:value-of select="normalize-space($table_width)"/></xsl:attribute>
						
						
							<xsl:attribute name="margin-left"><xsl:value-of select="$margin-side"/>mm</xsl:attribute>
							<xsl:attribute name="margin-right"><xsl:value-of select="$margin-side"/>mm</xsl:attribute>
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
							<xsl:if test="ancestor::*[local-name()='sections']">
								<xsl:attribute name="border-top">1.5pt solid black</xsl:attribute>
								<xsl:attribute name="border-bottom">1.5pt solid black</xsl:attribute>
							</xsl:if>					
						
					</xsl:element>
				</xsl:variable>
				
				<xsl:if test="$isGenerateTableIF = 'true'">
					<!-- to determine start of table -->
					<fo:block id="{concat('table_if_start_',@id)}" keep-with-next="always" font-size="1pt">Start table '<xsl:value-of select="@id"/>'.</fo:block>
				</xsl:if>
				
				<fo:table id="{@id}">
					
					<xsl:if test="$isGenerateTableIF = 'true'">
						<xsl:attribute name="wrap-option">no-wrap</xsl:attribute>
					</xsl:if>
					
					<xsl:for-each select="xalan:nodeset($table_attributes)/table_attributes/@*">					
						<xsl:attribute name="{local-name()}">
							<xsl:value-of select="."/>
						</xsl:attribute>
					</xsl:for-each>
					
					<xsl:variable name="isNoteOrFnExist" select="./*[local-name()='note'] or .//*[local-name()='fn'][local-name(..) != 'name']"/>				
					<xsl:if test="$isNoteOrFnExist = 'true'">
						<xsl:attribute name="border-bottom">0pt solid black</xsl:attribute> <!-- set 0pt border, because there is a separete table below for footer  -->
					</xsl:if>
					
					
					<xsl:choose>
						<xsl:when test="$isGenerateTableIF = 'true'">
							<!-- generate IF for table widths -->
							<!-- example:
								<tr>
									<td valign="top" align="left" id="tab-symdu_1_1">
										<p>Symbol</p>
										<word id="tab-symdu_1_1_word_1">Symbol</word>
									</td>
									<td valign="top" align="left" id="tab-symdu_1_2">
										<p>Description</p>
										<word id="tab-symdu_1_2_word_1">Description</word>
									</td>
								</tr>
							-->
							<xsl:apply-templates select="xalan:nodeset($simple-table)" mode="process_table-if"/>
							
						</xsl:when>
						<xsl:otherwise>
					
							<xsl:choose>
								<xsl:when test="*[local-name()='colgroup']/*[local-name()='col']">
									<xsl:for-each select="*[local-name()='colgroup']/*[local-name()='col']">
										<fo:table-column column-width="{@width}"/>
									</xsl:for-each>
								</xsl:when>
								<xsl:otherwise>
									<xsl:call-template name="insertTableColumnWidth">
										<xsl:with-param name="colwidths" select="$colwidths"/>
									</xsl:call-template>
								</xsl:otherwise>
							</xsl:choose>
							
							<xsl:choose>
								<xsl:when test="not(*[local-name()='tbody']) and *[local-name()='thead']">
									<xsl:apply-templates select="*[local-name()='thead']" mode="process_tbody"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:apply-templates select="node()[not(local-name() = 'name') and not(local-name() = 'note')          and not(local-name() = 'thead') and not(local-name() = 'tfoot')]"/> <!-- process all table' elements, except name, header, footer and note that renders separaterely -->
								</xsl:otherwise>
							</xsl:choose>
					
						</xsl:otherwise>
					</xsl:choose>
					
				</fo:table>
				
				<xsl:variable name="colgroup" select="*[local-name()='colgroup']"/>				
				<xsl:for-each select="*[local-name()='tbody']"><!-- select context to tbody -->
					<xsl:call-template name="insertTableFooterInSeparateTable">
						<xsl:with-param name="table_attributes" select="$table_attributes"/>
						<xsl:with-param name="colwidths" select="$colwidths"/>				
						<xsl:with-param name="colgroup" select="$colgroup"/>				
					</xsl:call-template>
				</xsl:for-each>
				
				
				
				
				
				
				<xsl:if test="*[local-name()='bookmark']"> <!-- special case: table/bookmark -->
					<fo:block keep-with-previous="always" line-height="0.1">
						<xsl:for-each select="*[local-name()='bookmark']">
							<xsl:call-template name="bookmark"/>
						</xsl:for-each>
					</fo:block>
				</xsl:if>
				
			</fo:block-container>
		</xsl:variable>
		
		<xsl:variable name="isAdded" select="@added"/>
		<xsl:variable name="isDeleted" select="@deleted"/>
		
		<xsl:choose>
			<xsl:when test="@width">
	
				<!-- centered table when table name is centered (see table-name-style) -->
				
				
				
					<xsl:choose>
						<xsl:when test="$isAdded = 'true' or $isDeleted = 'true'">
							<xsl:copy-of select="$table-preamble"/>
							<fo:block>
								<xsl:call-template name="setTrackChangesStyles">
									<xsl:with-param name="isAdded" select="$isAdded"/>
									<xsl:with-param name="isDeleted" select="$isDeleted"/>
								</xsl:call-template>
								<xsl:copy-of select="$table"/>
							</fo:block>
						</xsl:when>
						<xsl:otherwise>
							<xsl:copy-of select="$table-preamble"/>
							<xsl:copy-of select="$table"/>
						</xsl:otherwise>
					</xsl:choose>
				
				
			</xsl:when>
			<xsl:otherwise>
				<xsl:choose>
					<xsl:when test="$isAdded = 'true' or $isDeleted = 'true'">
						<xsl:copy-of select="$table-preamble"/>
						<fo:block>
							<xsl:call-template name="setTrackChangesStyles">
								<xsl:with-param name="isAdded" select="$isAdded"/>
								<xsl:with-param name="isDeleted" select="$isDeleted"/>
							</xsl:call-template>
							<xsl:copy-of select="$table"/>
						</fo:block>
					</xsl:when>
					<xsl:otherwise>
						<xsl:copy-of select="$table-preamble"/>
						<xsl:copy-of select="$table"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:otherwise>
		</xsl:choose>
		
	</xsl:template><xsl:template match="*[local-name()='table']/*[local-name() = 'name']">
		<xsl:param name="continued"/>
		<xsl:if test="normalize-space() != ''">
		
			
				
					<fo:block xsl:use-attribute-sets="table-name-style">

						
						
						
						
						<xsl:choose>
							<xsl:when test="$continued = 'true'"> 
								
							</xsl:when>
							<xsl:otherwise>
								<xsl:apply-templates/>
							</xsl:otherwise>
						</xsl:choose>
						
						
					</fo:block>
			
				
			
		</xsl:if>
	</xsl:template><xsl:template name="calculate-columns-numbers">
		<xsl:param name="table-row"/>
		<xsl:variable name="columns-count" select="count($table-row/*)"/>
		<xsl:variable name="sum-colspans" select="sum($table-row/*/@colspan)"/>
		<xsl:variable name="columns-with-colspan" select="count($table-row/*[@colspan])"/>
		<xsl:value-of select="$columns-count + $sum-colspans - $columns-with-colspan"/>
	</xsl:template><xsl:template name="calculate-column-widths">
		<xsl:param name="table"/>
		<xsl:param name="cols-count"/>
		
				<xsl:call-template name="calculate-column-widths-proportional">
					<xsl:with-param name="cols-count" select="$cols-count"/>
					<xsl:with-param name="table" select="$table"/>
				</xsl:call-template>
			
	</xsl:template><xsl:template name="calculate-column-widths-proportional">
		<xsl:param name="table"/>
		<xsl:param name="cols-count"/>
		<xsl:param name="curr-col" select="1"/>
		<xsl:param name="width" select="0"/>
		
		<!-- table=<xsl:copy-of select="$table"/> -->
		
		<xsl:if test="$curr-col &lt;= $cols-count">
			<xsl:variable name="widths">
				<xsl:choose>
					<xsl:when test="not($table)"><!-- this branch is not using in production, for debug only -->
						<xsl:for-each select="*[local-name()='thead']//*[local-name()='tr']">
							<xsl:variable name="words">
								<xsl:call-template name="tokenize">
									<xsl:with-param name="text" select="translate(*[local-name()='th'][$curr-col],'- —:', '    ')"/>
								</xsl:call-template>
							</xsl:variable>
							<xsl:variable name="max_length">
								<xsl:call-template name="max_length">
									<xsl:with-param name="words" select="xalan:nodeset($words)"/>
								</xsl:call-template>
							</xsl:variable>
							<width>
								<xsl:value-of select="$max_length"/>
							</width>
						</xsl:for-each>
						<xsl:for-each select="*[local-name()='tbody']//*[local-name()='tr']">
							<xsl:variable name="words">
								<xsl:call-template name="tokenize">
									<xsl:with-param name="text" select="translate(*[local-name()='td'][$curr-col],'- —:', '    ')"/>
								</xsl:call-template>
							</xsl:variable>
							<xsl:variable name="max_length">
								<xsl:call-template name="max_length">
									<xsl:with-param name="words" select="xalan:nodeset($words)"/>
								</xsl:call-template>
							</xsl:variable>
							<width>
								<xsl:value-of select="$max_length"/>
							</width>
							
						</xsl:for-each>
					</xsl:when>
					<xsl:otherwise>
						<!-- <curr_col><xsl:value-of select="$curr-col"/></curr_col> -->
						
						<!-- <table><xsl:copy-of select="$table"/></table>
						 -->
						<xsl:for-each select="xalan:nodeset($table)/*/*[local-name()='tr']">
							<xsl:variable name="td_text">
								<xsl:apply-templates select="td[$curr-col]" mode="td_text"/>
							</xsl:variable>
							<!-- <td_text><xsl:value-of select="$td_text"/></td_text> -->
							<xsl:variable name="words">
								<xsl:variable name="string_with_added_zerospaces">
									<xsl:call-template name="add-zero-spaces-java">
										<xsl:with-param name="text" select="$td_text"/>
									</xsl:call-template>
								</xsl:variable>
								<!-- <xsl:message>string_with_added_zerospaces=<xsl:value-of select="$string_with_added_zerospaces"/></xsl:message> -->
								<xsl:call-template name="tokenize">
									<!-- <xsl:with-param name="text" select="translate(td[$curr-col],'- —:', '    ')"/> -->
									<!-- 2009 thinspace -->
									<!-- <xsl:with-param name="text" select="translate(normalize-space($td_text),'- —:', '    ')"/> -->
									<xsl:with-param name="text" select="normalize-space(translate($string_with_added_zerospaces, '​­', '  '))"/> <!-- replace zero-width-space and soft-hyphen to space -->
								</xsl:call-template>
							</xsl:variable>
							<!-- words=<xsl:copy-of select="$words"/> -->
							<xsl:variable name="max_length">
								<xsl:call-template name="max_length">
									<xsl:with-param name="words" select="xalan:nodeset($words)"/>
								</xsl:call-template>
							</xsl:variable>
							<!-- <xsl:message>max_length=<xsl:value-of select="$max_length"/></xsl:message> -->
							<width>
								<xsl:variable name="divider">
									<xsl:choose>
										<xsl:when test="td[$curr-col]/@divide">
											<xsl:value-of select="td[$curr-col]/@divide"/>
										</xsl:when>
										<xsl:otherwise>1</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:value-of select="$max_length div $divider"/>
							</width>
							
						</xsl:for-each>
					
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			
			<!-- widths=<xsl:copy-of select="$widths"/> -->
			
			<column>
				<xsl:for-each select="xalan:nodeset($widths)//width">
					<xsl:sort select="." data-type="number" order="descending"/>
					<xsl:if test="position()=1">
							<xsl:value-of select="."/>
					</xsl:if>
				</xsl:for-each>
			</column>
			<xsl:call-template name="calculate-column-widths-proportional">
				<xsl:with-param name="cols-count" select="$cols-count"/>
				<xsl:with-param name="curr-col" select="$curr-col +1"/>
				<xsl:with-param name="table" select="$table"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template><xsl:template match="*[@keep-together.within-line or local-name() = 'keep-together_within-line']/text()" priority="2" mode="td_text">
		<!-- <xsl:message>DEBUG t1=<xsl:value-of select="."/></xsl:message>
		<xsl:message>DEBUG t2=<xsl:value-of select="java:replaceAll(java:java.lang.String.new(.),'.','X')"/></xsl:message> -->
		<xsl:value-of select="java:replaceAll(java:java.lang.String.new(.),'.','X')"/>
		
		<!-- if all capitals english letters or digits -->
		<xsl:if test="normalize-space(translate(., concat($upper,'0123456789'), '')) = ''">
			<xsl:call-template name="repeat">
				<xsl:with-param name="char" select="'X'"/>
				<xsl:with-param name="count" select="string-length(normalize-space(.)) * 0.5"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template><xsl:template match="text()" mode="td_text">
		<xsl:value-of select="translate(., $zero_width_space, ' ')"/><xsl:text> </xsl:text>
	</xsl:template><xsl:template match="*[local-name()='termsource']" mode="td_text">
		<xsl:value-of select="*[local-name()='origin']/@citeas"/>
	</xsl:template><xsl:template match="*[local-name()='link']" mode="td_text">
		<xsl:value-of select="@target"/>
	</xsl:template><xsl:template match="*[local-name()='math']" mode="td_text" name="math_length">
		<xsl:if test="$isGenerateTableIF = 'false'">
			<xsl:variable name="mathml_">
				<xsl:for-each select="*">
					<xsl:if test="local-name() != 'unit' and local-name() != 'prefix' and local-name() != 'dimension' and local-name() != 'quantity'">
						<xsl:copy-of select="."/>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="mathml" select="xalan:nodeset($mathml_)"/>

			<xsl:variable name="math_text">
				<xsl:value-of select="normalize-space($mathml)"/>
				<xsl:for-each select="$mathml//@open"><xsl:value-of select="."/></xsl:for-each>
				<xsl:for-each select="$mathml//@close"><xsl:value-of select="."/></xsl:for-each>
			</xsl:variable>
			<xsl:value-of select="translate($math_text, ' ', '#')"/><!-- mathml images as one 'word' without spaces -->
		</xsl:if>
	</xsl:template><xsl:template name="calculate-column-widths-autolayout-algorithm">
		<xsl:param name="parent_table_page-width"/> <!-- for nested tables, in re-calculate step -->
		
		<!-- via intermediate format -->

		<!-- The algorithm uses two passes through the table data and scales linearly with the size of the table -->
	 
		<!-- In the first pass, line wrapping is disabled, and the user agent keeps track of the minimum and maximum width of each cell. -->
	 
		<!-- Since line wrap has been disabled, paragraphs are treated as long lines unless broken by BR elements. -->
		 
		<!-- get current table id -->
		<xsl:variable name="table_id" select="@id"/>
		<!-- find table by id in the file 'table_widths' -->
	<!-- 	<xsl:variable name="table-if_" select="$table_widths_from_if//table[@id = $table_id]"/>
		<xsl:variable name="table-if" select="xalan:nodeset($table-if_)"/> -->
		
		<!-- table='<xsl:copy-of select="$table"/>' -->
		<!-- table_id='<xsl:value-of select="$table_id"/>\ -->
		<!-- table-if='<xsl:copy-of select="$table-if"/>' -->
		<!-- table_widths_from_if='<xsl:copy-of select="$table_widths_from_if"/>' -->
		
		<xsl:variable name="table_with_cell_widths_">
			<xsl:apply-templates select="." mode="determine_cell_widths-if"/> <!-- read column's width from IF -->
		</xsl:variable>
		<xsl:variable name="table_with_cell_widths" select="xalan:nodeset($table_with_cell_widths_)"/>
		
		<!-- <xsl:if test="$table_if_debug = 'true'">
			<xsl:copy-of select="$table_with_cell_widths"/>
		</xsl:if> -->
		
		
		<!-- The minimum and maximum cell widths are then used to determine the corresponding minimum and maximum widths for the columns. -->
		
		<xsl:variable name="column_widths_">
			<!-- iteration of columns -->
			<xsl:for-each select="$table_with_cell_widths//tr[1]/td">
				<xsl:variable name="pos" select="position()"/>
				<column>
					<xsl:attribute name="width_max">
						<xsl:for-each select="ancestor::tbody//tr/td[$pos]/@width_max">
							<xsl:sort select="." data-type="number" order="descending"/>
							<xsl:if test="position() = 1"><xsl:value-of select="."/></xsl:if>
						</xsl:for-each>
					</xsl:attribute>
					<xsl:attribute name="width_min">
						<xsl:for-each select="ancestor::tbody//tr/td[$pos]/@width_min">
							<xsl:sort select="." data-type="number" order="descending"/>
							<xsl:if test="position() = 1"><xsl:value-of select="."/></xsl:if>
						</xsl:for-each>
					</xsl:attribute>
				</column>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="column_widths" select="xalan:nodeset($column_widths_)"/>
		
		<!-- <column_widths>
			<xsl:copy-of select="$column_widths"/>
		</column_widths> -->
		
		<!-- These in turn, are used to find the minimum and maximum width for the table. -->
		<xsl:variable name="table_widths_">
			<table>
				<xsl:attribute name="width_max">
					<xsl:value-of select="sum($column_widths/column/@width_max)"/>
				</xsl:attribute>
				<xsl:attribute name="width_min">
					<xsl:value-of select="sum($column_widths/column/@width_min)"/>
				</xsl:attribute>
			</table>
		</xsl:variable>
		<xsl:variable name="table_widths" select="xalan:nodeset($table_widths_)"/>
		
		<xsl:variable name="page_width">
			<xsl:choose>
				<xsl:when test="$parent_table_page-width != ''">
					<xsl:value-of select="$parent_table_page-width"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="@page-width"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:if test="$table_if_debug = 'true'">
			<table_width>
				<xsl:copy-of select="$table_widths"/>
			</table_width>
			<debug>$page_width=<xsl:value-of select="$page_width"/></debug>
		</xsl:if>
		
		
		<!-- There are three cases: -->
		<xsl:choose>
			<!-- 1. The minimum table width is equal to or wider than the available space -->
			<xsl:when test="$table_widths/table/@width_min &gt;= $page_width and 1 = 2"> <!-- this condition isn't working see case 3 below -->
				<!-- call old algorithm -->
				<case1/>
				<!-- <xsl:variable name="cols-count" select="count(xalan:nodeset($table)/*/tr[1]/td)"/>
				<xsl:call-template name="calculate-column-widths-proportional">
					<xsl:with-param name="cols-count" select="$cols-count"/>
					<xsl:with-param name="table" select="$table"/>
				</xsl:call-template> -->
			</xsl:when>
			<!-- 2. The maximum table width fits within the available space. In this case, set the columns to their maximum widths. -->
			<xsl:when test="$table_widths/table/@width_max &lt;= $page_width">
				<case2/>
				<autolayout/>
				<xsl:for-each select="$column_widths/column/@width_max">
					<column divider="100"><xsl:value-of select="."/></column>
				</xsl:for-each>
			</xsl:when>
			<!-- 3. The maximum width of the table is greater than the available space, but the minimum table width is smaller. 
			In this case, find the difference between the available space and the minimum table width, lets call it W. 
			Lets also call D the difference between maximum and minimum width of the table. 
			For each column, let d be the difference between maximum and minimum width of that column. 
			Now set the column's width to the minimum width plus d times W over D. 
			This makes columns with large differences between minimum and maximum widths wider than columns with smaller differences. -->
			<xsl:when test="($table_widths/table/@width_max &gt; $page_width and $table_widths/table/@width_min &lt; $page_width) or ($table_widths/table/@width_min &gt;= $page_width)">
				<!-- difference between the available space and the minimum table width -->
				<xsl:variable name="W" select="$page_width - $table_widths/table/@width_min"/>
				<W><xsl:value-of select="$W"/></W>
				<!-- difference between maximum and minimum width of the table -->
				<xsl:variable name="D" select="$table_widths/table/@width_max - $table_widths/table/@width_min"/>
				<D><xsl:value-of select="$D"/></D>
				<case3/>
				<autolayout/>
				<xsl:if test="$table_widths/table/@width_min &gt;= $page_width">
					<split_keep-within-line>true</split_keep-within-line>
				</xsl:if>
				<xsl:for-each select="$column_widths/column">
					<!-- difference between maximum and minimum width of that column.  -->
					<xsl:variable name="d" select="@width_max - @width_min"/>
					<d><xsl:value-of select="$d"/></d>
					<width_min><xsl:value-of select="@width_min"/></width_min>
					<e><xsl:value-of select="$d * $W div $D"/></e>
					<!-- set the column's width to the minimum width plus d times W over D.  -->
					<column divider="100">
						<xsl:value-of select="round(@width_min + $d * $W div $D)"/> <!--  * 10 -->
					</column>
				</xsl:for-each>
				
			</xsl:when>
			<xsl:otherwise><unknown_case/></xsl:otherwise>
		</xsl:choose>
		
	</xsl:template><xsl:template name="get-calculated-column-widths-autolayout-algorithm">
		
		<!-- if nested 'dl' or 'table' -->
		<xsl:variable name="parent_table_id" select="normalize-space(ancestor::*[local-name() = 'table' or local-name() = 'dl'][1]/@id)"/>
		<parent_table_id><xsl:value-of select="$parent_table_id"/></parent_table_id>
			
		<parent_element><xsl:value-of select="local-name(..)"/></parent_element>
			
		<xsl:variable name="parent_table_page-width_">
			<xsl:if test="$parent_table_id != ''">
				<!-- determine column number in the parent table -->
				<xsl:variable name="parent_table_column_number">
					<xsl:choose>
						<xsl:when test="parent::*[local-name() = 'dd']">2</xsl:when>
						<xsl:otherwise> <!-- parent is table -->
							<xsl:value-of select="count(ancestor::*[local-name() = 'td'][1]/preceding-sibling::*[local-name() = 'td']) + 1"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<!-- find table by id in the file 'table_widths' and get all Nth `<column>...</column> -->
				<xsl:value-of select="$table_widths_from_if_calculated//table[@id = $parent_table_id]/column[number($parent_table_column_number)]"/>
			</xsl:if>
		</xsl:variable>
		<xsl:variable name="parent_table_page-width" select="normalize-space($parent_table_page-width_)"/>
		
		<!-- get current table id -->
		<xsl:variable name="table_id" select="@id"/>
		
		<xsl:choose>
			<xsl:when test="$parent_table_id = '' or $parent_table_page-width = ''">
				<!-- find table by id in the file 'table_widths' and get all `<column>...</column> -->
				<xsl:copy-of select="$table_widths_from_if_calculated//table[@id = $table_id]/node()"/>
			</xsl:when>
			<xsl:otherwise>
				<!-- recalculate columns width based on parent table width -->
				<xsl:for-each select="$table_widths_from_if//table[@id = $table_id]">
					<xsl:call-template name="calculate-column-widths-autolayout-algorithm">
						<xsl:with-param name="parent_table_page-width" select="$parent_table_page-width"/> <!-- padding-left = 2mm  = 50000-->
					</xsl:call-template>
				</xsl:for-each>
			</xsl:otherwise>
		</xsl:choose>
		
	</xsl:template><xsl:template match="@*|node()" mode="determine_cell_widths-if">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="determine_cell_widths-if"/>
		</xsl:copy>
	</xsl:template><xsl:template match="td | th" mode="determine_cell_widths-if">
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			
			 <!-- The maximum width is given by the widest line.  -->
			<xsl:attribute name="width_max">
				<xsl:for-each select="p_len">
					<xsl:sort select="." data-type="number" order="descending"/>
					<xsl:if test="position() = 1"><xsl:value-of select="."/></xsl:if>
				</xsl:for-each>
			</xsl:attribute>
			
			<!-- The minimum width is given by the widest text element (word, image, etc.) -->
			<xsl:variable name="width_min">
				<xsl:for-each select="word_len">
					<xsl:sort select="." data-type="number" order="descending"/>
					<xsl:if test="position() = 1"><xsl:value-of select="."/></xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:attribute name="width_min">
				<xsl:value-of select="$width_min"/>
			</xsl:attribute>
			
			<xsl:if test="$width_min = 0">
				<xsl:attribute name="width_min">1</xsl:attribute>
			</xsl:if>
			
			<xsl:apply-templates select="node()" mode="determine_cell_widths-if"/>
			
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name()='thead']">
		<xsl:param name="cols-count"/>
		<fo:table-header>
			
			
			<xsl:apply-templates/>
		</fo:table-header>
	</xsl:template><xsl:template name="table-header-title">
		<xsl:param name="cols-count"/>
		<!-- row for title -->
		<fo:table-row>
			<fo:table-cell number-columns-spanned="{$cols-count}" border-left="1.5pt solid white" border-right="1.5pt solid white" border-top="1.5pt solid white" border-bottom="1.5pt solid black">
				
				
				
				
						<xsl:apply-templates select="ancestor::*[local-name()='table']/*[local-name()='name']">
							<xsl:with-param name="continued">true</xsl:with-param>
						</xsl:apply-templates>
						
						
				
					
				
				
			</fo:table-cell>
		</fo:table-row>
	</xsl:template><xsl:template match="*[local-name()='thead']" mode="process_tbody">		
		<fo:table-body>
			<xsl:apply-templates/>
		</fo:table-body>
	</xsl:template><xsl:template match="*[local-name()='tfoot']">
		<xsl:apply-templates/>
	</xsl:template><xsl:template name="insertTableFooter">
		<xsl:param name="cols-count"/>
		<xsl:if test="../*[local-name()='tfoot']">
			<fo:table-footer>			
				<xsl:apply-templates select="../*[local-name()='tfoot']"/>
			</fo:table-footer>
		</xsl:if>
	</xsl:template><xsl:template name="insertTableFooterInSeparateTable">
		<xsl:param name="table_attributes"/>
		<xsl:param name="colwidths"/>
		<xsl:param name="colgroup"/>
		
		<xsl:variable name="isNoteOrFnExist" select="../*[local-name()='note'] or ..//*[local-name()='fn'][local-name(..) != 'name']"/>
		
		<xsl:variable name="isNoteOrFnExistShowAfterTable">
			
		</xsl:variable>
		
		<xsl:if test="$isNoteOrFnExist = 'true' or normalize-space($isNoteOrFnExistShowAfterTable) = 'true'">
		
			<xsl:variable name="cols-count">
				<xsl:choose>
					<xsl:when test="xalan:nodeset($colgroup)//*[local-name()='col']">
						<xsl:value-of select="count(xalan:nodeset($colgroup)//*[local-name()='col'])"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="count(xalan:nodeset($colwidths)//column)"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			
			
			<xsl:variable name="tableWithNotesAndFootnotes">
			
				<fo:table keep-with-previous="always">
					<xsl:for-each select="xalan:nodeset($table_attributes)/table_attributes/@*">
						<xsl:variable name="name" select="local-name()"/>
						<xsl:choose>
							<xsl:when test="$name = 'border-top'">
								<xsl:attribute name="{$name}">0pt solid black</xsl:attribute>
							</xsl:when>
							<xsl:when test="$name = 'border'">
								<xsl:attribute name="{$name}"><xsl:value-of select="."/></xsl:attribute>
								<xsl:attribute name="border-top">0pt solid black</xsl:attribute>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="{$name}"><xsl:value-of select="."/></xsl:attribute>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:for-each>
					
					
					
					<xsl:choose>
						<xsl:when test="xalan:nodeset($colgroup)//*[local-name()='col']">
							<xsl:for-each select="xalan:nodeset($colgroup)//*[local-name()='col']">
								<fo:table-column column-width="{@width}"/>
							</xsl:for-each>
						</xsl:when>
						<xsl:otherwise>
							<!-- $colwidths=<xsl:copy-of select="$colwidths"/> -->
							<xsl:call-template name="insertTableColumnWidth">
								<xsl:with-param name="colwidths" select="$colwidths"/>
							</xsl:call-template>
						</xsl:otherwise>
					</xsl:choose>
					
					<fo:table-body>
						<fo:table-row>
							<fo:table-cell xsl:use-attribute-sets="table-footer-cell-style" number-columns-spanned="{$cols-count}">
								
								

								
								
								<!-- fn will be processed inside 'note' processing -->
								
								
								
								
								
								
								<!-- for BSI (not PAS) display Notes before footnotes -->
								
								
								<!-- except gb and bsi  -->
								
										<xsl:apply-templates select="../*[local-name()='note']"/>
									
								
								
								<!-- horizontal row separator -->
								
								
								<!-- fn processing -->
								
										<xsl:call-template name="table_fn_display"/>
									
								
								
								<!-- for PAS display Notes after footnotes -->
								
								
							</fo:table-cell>
						</fo:table-row>
					</fo:table-body>
					
				</fo:table>
			</xsl:variable>
			
			<xsl:if test="normalize-space($tableWithNotesAndFootnotes) != ''">
				<xsl:copy-of select="$tableWithNotesAndFootnotes"/>
			</xsl:if>
			
			
			
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name()='tbody']">
		
		<xsl:variable name="cols-count">
			<xsl:choose>
				<xsl:when test="../*[local-name()='thead']">					
					<xsl:call-template name="calculate-columns-numbers">
						<xsl:with-param name="table-row" select="../*[local-name()='thead']/*[local-name()='tr'][1]"/>
					</xsl:call-template>
				</xsl:when>
				<xsl:otherwise>					
					<xsl:call-template name="calculate-columns-numbers">
						<xsl:with-param name="table-row" select="./*[local-name()='tr'][1]"/>
					</xsl:call-template>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		
		
		<xsl:apply-templates select="../*[local-name()='thead']">
			<xsl:with-param name="cols-count" select="$cols-count"/>
		</xsl:apply-templates>
		
		<xsl:call-template name="insertTableFooter">
			<xsl:with-param name="cols-count" select="$cols-count"/>
		</xsl:call-template>
		
		<fo:table-body>
			

			<xsl:apply-templates/>
			
		</fo:table-body>
		
	</xsl:template><xsl:template match="/" mode="process_table-if">
		<xsl:param name="table_or_dl">table</xsl:param>
		<xsl:apply-templates mode="process_table-if">
			<xsl:with-param name="table_or_dl" select="$table_or_dl"/>
		</xsl:apply-templates>
	</xsl:template><xsl:template match="*[local-name()='tbody']" mode="process_table-if">
		<xsl:param name="table_or_dl">table</xsl:param>
		
		<fo:table-body>
			<xsl:for-each select="*[local-name() = 'tr']">
				<xsl:variable name="col_count" select="count(*)"/>

				<!-- iteration for each tr/td -->
				
				<xsl:choose>
					<xsl:when test="$table_or_dl = 'table'">
						<xsl:for-each select="*[local-name() = 'td' or local-name() = 'th']/*">
							<fo:table-row number-columns-spanned="{$col_count}">
								<!-- <test_table><xsl:copy-of select="."/></test_table> -->
								<xsl:call-template name="td"/>
							</fo:table-row>
						</xsl:for-each>
					</xsl:when>
					<xsl:otherwise> <!-- $table_or_dl = 'dl' -->
						<xsl:for-each select="*[local-name() = 'td' or local-name() = 'th']">
							<xsl:variable name="is_dt" select="position() = 1"/>
							
							<xsl:for-each select="*">
								<!-- <test><xsl:copy-of select="."/></test> -->
								<fo:table-row number-columns-spanned="{$col_count}">
									<xsl:choose>
										<xsl:when test="$is_dt">
											<xsl:call-template name="insert_dt_cell"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:call-template name="insert_dd_cell"/>
										</xsl:otherwise>
									</xsl:choose>
								</fo:table-row>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:otherwise>
				</xsl:choose>
				
			</xsl:for-each>
		</fo:table-body>
	</xsl:template><xsl:template match="*[local-name()='thead']/*[local-name()='tr']" priority="2">
		<fo:table-row xsl:use-attribute-sets="table-header-row-style">
		
			
			
			


			

			
			
			<xsl:call-template name="setTableRowAttributes"/>
			
			<xsl:apply-templates/>
		</fo:table-row>
	</xsl:template><xsl:template match="*[local-name()='tfoot']/*[local-name()='tr']" priority="2">
		<fo:table-row xsl:use-attribute-sets="table-footer-row-style">
			
			<xsl:call-template name="setTableRowAttributes"/>
			<xsl:apply-templates/>
		</fo:table-row>
	</xsl:template><xsl:template match="*[local-name()='tr']">
		<fo:table-row xsl:use-attribute-sets="table-body-row-style">
		
			
		
			
		
			
		
			<xsl:call-template name="setTableRowAttributes"/>
			<xsl:apply-templates/>
		</fo:table-row>
	</xsl:template><xsl:template name="setTableRowAttributes">
	
		
	
		

		
		
		
	</xsl:template><xsl:template match="*[local-name()='th']">
		<fo:table-cell xsl:use-attribute-sets="table-header-cell-style"> <!-- text-align="{@align}" -->
			<xsl:call-template name="setTextAlignment">
				<xsl:with-param name="default">center</xsl:with-param>
			</xsl:call-template>
			
			
			
			

			
			
			
							
				<xsl:if test="ancestor::*[local-name()='sections']">
					<xsl:attribute name="border">solid black 0pt</xsl:attribute>
					<xsl:attribute name="display-align">before</xsl:attribute>
					<xsl:attribute name="padding-top">1mm</xsl:attribute>
				</xsl:if>
				<xsl:if test="ancestor::*[local-name()='annex']">
					<xsl:attribute name="font-weight">normal</xsl:attribute>
					<xsl:attribute name="padding-top">1mm</xsl:attribute>
					<xsl:attribute name="background-color">rgb(218, 218, 218)</xsl:attribute>
					<xsl:if test="starts-with(text(), '1') or starts-with(text(), '2') or starts-with(text(), '3') or starts-with(text(), '4') or starts-with(text(), '5') or       starts-with(text(), '6') or starts-with(text(), '7') or starts-with(text(), '8') or starts-with(text(), '9')">
						<xsl:attribute name="color">rgb(46, 116, 182)</xsl:attribute>
						<xsl:attribute name="font-weight">bold</xsl:attribute>
					</xsl:if>
				</xsl:if>
			
			
			<xsl:if test="$lang = 'ar'">
				<xsl:attribute name="padding-right">1mm</xsl:attribute>
			</xsl:if>
			
			<xsl:call-template name="setTableCellAttributes"/>

			<fo:block>
				<xsl:apply-templates/>
			</fo:block>
		</fo:table-cell>
	</xsl:template><xsl:template name="setTableCellAttributes">
		<xsl:if test="@colspan">
			<xsl:attribute name="number-columns-spanned">
				<xsl:value-of select="@colspan"/>
			</xsl:attribute>
		</xsl:if>
		<xsl:if test="@rowspan">
			<xsl:attribute name="number-rows-spanned">
				<xsl:value-of select="@rowspan"/>
			</xsl:attribute>
		</xsl:if>
		<xsl:call-template name="display-align"/>
	</xsl:template><xsl:template name="display-align">
		<xsl:if test="@valign">
			<xsl:attribute name="display-align">
				<xsl:choose>
					<xsl:when test="@valign = 'top'">before</xsl:when>
					<xsl:when test="@valign = 'middle'">center</xsl:when>
					<xsl:when test="@valign = 'bottom'">after</xsl:when>
					<xsl:otherwise>before</xsl:otherwise>
				</xsl:choose>					
			</xsl:attribute>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name()='td']" name="td">
		<fo:table-cell xsl:use-attribute-sets="table-cell-style"> <!-- text-align="{@align}" -->
			<xsl:call-template name="setTextAlignment">
				<xsl:with-param name="default">left</xsl:with-param>
			</xsl:call-template>
			
			<xsl:if test="$lang = 'ar'">
				<xsl:attribute name="padding-right">1mm</xsl:attribute>
			</xsl:if>
			
			
			
			 <!-- bsi -->
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
				<xsl:if test="ancestor::*[local-name()='sections']">
					<xsl:attribute name="border">solid black 0pt</xsl:attribute>
					<xsl:attribute name="padding-top">1mm</xsl:attribute>					
				</xsl:if>
			
			
			<xsl:if test=".//*[local-name() = 'table']"> <!-- if there is nested table -->
				<xsl:attribute name="padding-right">1mm</xsl:attribute>
			</xsl:if>
			
			<xsl:call-template name="setTableCellAttributes"/>
			
			<xsl:if test="$isGenerateTableIF = 'true'">
				<xsl:attribute name="border">1pt solid black</xsl:attribute> <!-- border is mandatory, to determine page width -->
				<xsl:attribute name="text-align">left</xsl:attribute>
			</xsl:if>
			
			<fo:block>
			
				<xsl:if test="$isGenerateTableIF = 'true'">
					<xsl:attribute name="id"><xsl:value-of select="@id"/></xsl:attribute>
				</xsl:if>
			
			
				
				
				<xsl:apply-templates/>
				
				<xsl:if test="$isGenerateTableIF = 'true'"><fo:inline id="{@id}_end">end</fo:inline></xsl:if> <!-- to determine width of text --> <!-- <xsl:value-of select="$hair_space"/> -->

			</fo:block>			
		</fo:table-cell>
	</xsl:template><xsl:template match="*[local-name()='table']/*[local-name()='note']" priority="2">

		<fo:block xsl:use-attribute-sets="table-note-style">

			
			
			
		
			<!-- Table's note name (NOTE, for example) -->
			<fo:inline xsl:use-attribute-sets="table-note-name-style">
				
				
				
				
				
				
					<xsl:if test="@type = 'source' or @type = 'abbreviation'">
						<xsl:attribute name="font-size">9pt</xsl:attribute>							
					</xsl:if>
				
				
				<xsl:apply-templates select="*[local-name() = 'name']"/>
					
			</fo:inline>
			
			
			
			<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
		</fo:block>
		
	</xsl:template><xsl:template match="*[local-name()='table']/*[local-name()='note']/*[local-name()='p']" priority="2">
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name() = 'fn'][not(ancestor::*[(local-name() = 'table' or local-name() = 'figure') and not(ancestor::*[local-name() = 'name'])])]" priority="2" name="fn">
	
		<!-- list of footnotes to calculate actual footnotes number -->
		<xsl:variable name="p_fn_">
			<xsl:call-template name="get_fn_list"/>
		</xsl:variable>
		<xsl:variable name="p_fn" select="xalan:nodeset($p_fn_)"/>
		
		<xsl:variable name="gen_id" select="generate-id(.)"/>
		<xsl:variable name="lang" select="ancestor::*[contains(local-name(), '-standard')]/*[local-name()='bibdata']//*[local-name()='language'][@current = 'true']"/>
		<xsl:variable name="reference_">
			<xsl:value-of select="@reference"/>
			<xsl:if test="normalize-space(@reference) = ''"><xsl:value-of select="$gen_id"/></xsl:if>
		</xsl:variable>
		<xsl:variable name="reference" select="normalize-space($reference_)"/>
		<!-- fn sequence number in document -->
		<xsl:variable name="current_fn_number">
			<xsl:choose>
				<xsl:when test="@current_fn_number"><xsl:value-of select="@current_fn_number"/></xsl:when> <!-- for BSI -->
				<xsl:otherwise>
					<xsl:value-of select="count($p_fn//fn[@reference = $reference]/preceding-sibling::fn) + 1"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="current_fn_number_text">
			<xsl:value-of select="$current_fn_number"/>
			
			
		</xsl:variable>
		
		<xsl:variable name="ref_id" select="concat('footnote_', $lang, '_', $reference, '_', $current_fn_number)"/>
		<xsl:variable name="footnote_inline">
			<fo:inline xsl:use-attribute-sets="fn-num-style">
				
				
				<fo:basic-link internal-destination="{$ref_id}" fox:alt-text="footnote {$current_fn_number}">
					<xsl:value-of select="$current_fn_number_text"/>
				</fo:basic-link>
			</fo:inline>
		</xsl:variable>
		<!-- DEBUG: p_fn=<xsl:copy-of select="$p_fn"/>
		gen_id=<xsl:value-of select="$gen_id"/> -->
		<xsl:choose>
			<xsl:when test="normalize-space(@skip_footnote_body) = 'true'">
				<xsl:copy-of select="$footnote_inline"/>
			</xsl:when>
			<xsl:when test="$p_fn//fn[@gen_id = $gen_id] or normalize-space(@skip_footnote_body) = 'false'">
				<fo:footnote xsl:use-attribute-sets="fn-style">
					<xsl:copy-of select="$footnote_inline"/>
					<fo:footnote-body>
						
						<fo:block-container xsl:use-attribute-sets="fn-container-body-style">
							
							<fo:block xsl:use-attribute-sets="fn-body-style">
								
								
								
								<fo:inline id="{$ref_id}" xsl:use-attribute-sets="fn-body-num-style">
									
									
									
									
									<xsl:value-of select="$current_fn_number_text"/>
								</fo:inline>
								<xsl:apply-templates/>
							</fo:block>
						</fo:block-container>
					</fo:footnote-body>
				</fo:footnote>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy-of select="$footnote_inline"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="get_fn_list">
		<xsl:choose>
			<xsl:when test="@current_fn_number"> <!-- for BSI, footnote reference number calculated already -->
				<fn gen_id="{generate-id(.)}">
					<xsl:copy-of select="@*"/>
					<xsl:copy-of select="node()"/>
				</fn>
			</xsl:when>
			<xsl:otherwise>
				<!-- itetation for:
				footnotes in bibdata/title
				footnotes in bibliography
				footnotes in document's body (except table's head/body/foot and figure text) 
				-->
				<xsl:for-each select="ancestor::*[contains(local-name(), '-standard')]/*[local-name() = 'bibdata']/*[local-name() = 'note'][@type='title-footnote']">
					<fn gen_id="{generate-id(.)}">
						<xsl:copy-of select="@*"/>
						<xsl:copy-of select="node()"/>
					</fn>
				</xsl:for-each>
				<xsl:for-each select="ancestor::*[contains(local-name(), '-standard')]/*[local-name()='boilerplate']/* |       ancestor::*[contains(local-name(), '-standard')]/*[local-name()='preface']/* |      ancestor::*[contains(local-name(), '-standard')]/*[local-name()='sections']/* |       ancestor::*[contains(local-name(), '-standard')]/*[local-name()='annex'] |      ancestor::*[contains(local-name(), '-standard')]/*[local-name()='bibliography']/*">
					<xsl:sort select="@displayorder" data-type="number"/>
					<xsl:for-each select=".//*[local-name() = 'bibitem'][ancestor::*[local-name() = 'references']]/*[local-name() = 'note'] |      .//*[local-name() = 'fn'][not(ancestor::*[(local-name() = 'table' or local-name() = 'figure') and not(ancestor::*[local-name() = 'name'])])][generate-id(.)=generate-id(key('kfn',@reference)[1])]">
						<!-- copy unique fn -->
						<fn gen_id="{generate-id(.)}">
							<xsl:copy-of select="@*"/>
							<xsl:copy-of select="node()"/>
						</fn>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="table_fn_display">
		<xsl:variable name="references">
			
			<xsl:for-each select="..//*[local-name()='fn'][local-name(..) != 'name']">
				<xsl:call-template name="create_fn"/>
			</xsl:for-each>
		</xsl:variable>
		
		<xsl:for-each select="xalan:nodeset($references)//fn">
			<xsl:variable name="reference" select="@reference"/>
			<xsl:if test="not(preceding-sibling::*[@reference = $reference])"> <!-- only unique reference puts in note-->
				<fo:block xsl:use-attribute-sets="table-fn-style">
				
					
					
					<fo:inline id="{@id}" xsl:use-attribute-sets="table-fn-number-style">
						
						
						
						
						
						<xsl:value-of select="@reference"/>
						
						
						
						
						
						
						
					</fo:inline>
					<fo:inline xsl:use-attribute-sets="table-fn-body-style">
						<xsl:copy-of select="./node()"/>
					</fo:inline>
				</fo:block>
			</xsl:if>
		</xsl:for-each>
	</xsl:template><xsl:template name="create_fn">
		<fn reference="{@reference}" id="{@reference}_{ancestor::*[@id][1]/@id}">
			
			
			<xsl:apply-templates/>
		</fn>
	</xsl:template><xsl:template name="table_name_fn_display">
		<xsl:for-each select="*[local-name()='name']//*[local-name()='fn']">
			<xsl:variable name="reference" select="@reference"/>
			<fo:block id="{@reference}_{ancestor::*[@id][1]/@id}"><xsl:value-of select="@reference"/></fo:block>
			<fo:block margin-bottom="12pt">
				<xsl:apply-templates/>
			</fo:block>
		</xsl:for-each>
	</xsl:template><xsl:template name="fn_display_figure">
	
		<xsl:variable name="references">
			<xsl:for-each select=".//*[local-name()='fn'][not(parent::*[local-name()='name'])]">
				<fn reference="{@reference}" id="{@reference}_{ancestor::*[@id][1]/@id}">
					<xsl:apply-templates/>
				</fn>
			</xsl:for-each>
		</xsl:variable>
	
		<xsl:if test="xalan:nodeset($references)//fn">
		
			<xsl:variable name="key_iso">
				
			</xsl:variable>
			
			<!-- current hierarchy is 'figure' element -->
			<xsl:variable name="following_dl_colwidths">
				<xsl:if test="*[local-name() = 'dl']"><!-- if there is a 'dl', then set the same columns width as for 'dl' -->
					<xsl:variable name="simple-table">
						<!-- <xsl:variable name="doc_ns">
							<xsl:if test="$namespace = 'bipm'">bipm</xsl:if>
						</xsl:variable>
						<xsl:variable name="ns">
							<xsl:choose>
								<xsl:when test="normalize-space($doc_ns)  != ''">
									<xsl:value-of select="normalize-space($doc_ns)"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="substring-before(name(/*), '-')"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable> -->
						
						<xsl:for-each select="*[local-name() = 'dl'][1]">
							<tbody>
								<xsl:apply-templates mode="dl"/>
							</tbody>
						</xsl:for-each>
					</xsl:variable>
					
					<xsl:call-template name="calculate-column-widths">
						<xsl:with-param name="cols-count" select="2"/>
						<xsl:with-param name="table" select="$simple-table"/>
					</xsl:call-template>
					
				</xsl:if>
			</xsl:variable>
			
			<xsl:variable name="maxlength_dt">
				<xsl:for-each select="*[local-name() = 'dl'][1]">
					<xsl:call-template name="getMaxLength_dt"/>			
				</xsl:for-each>
			</xsl:variable>

			<fo:block>
				<fo:table width="95%" table-layout="fixed">
					<xsl:if test="normalize-space($key_iso) = 'true'">
						<xsl:attribute name="font-size">10pt</xsl:attribute>
						
					</xsl:if>
					<xsl:choose>
						<!-- if there 'dl', then set same columns width -->
						<xsl:when test="xalan:nodeset($following_dl_colwidths)//column">
							<xsl:call-template name="setColumnWidth_dl">
								<xsl:with-param name="colwidths" select="$following_dl_colwidths"/>								
								<xsl:with-param name="maxlength_dt" select="$maxlength_dt"/>								
							</xsl:call-template>
						</xsl:when>
						<xsl:otherwise>
							<fo:table-column column-width="15%"/>
							<fo:table-column column-width="85%"/>
						</xsl:otherwise>
					</xsl:choose>
					<fo:table-body>
						<xsl:for-each select="xalan:nodeset($references)//fn">
							<xsl:variable name="reference" select="@reference"/>
							<xsl:if test="not(preceding-sibling::*[@reference = $reference])"> <!-- only unique reference puts in note-->
								<fo:table-row>
									<fo:table-cell>
										<fo:block>
											<fo:inline id="{@id}" xsl:use-attribute-sets="figure-fn-number-style">
												<xsl:value-of select="@reference"/>
											</fo:inline>
										</fo:block>
									</fo:table-cell>
									<fo:table-cell>
										<fo:block xsl:use-attribute-sets="figure-fn-body-style">
											<xsl:if test="normalize-space($key_iso) = 'true'">
												
														<xsl:attribute name="margin-bottom">0</xsl:attribute>
													
											</xsl:if>
											<xsl:copy-of select="./node()"/>
										</fo:block>
									</fo:table-cell>
								</fo:table-row>
							</xsl:if>
						</xsl:for-each>
					</fo:table-body>
				</fo:table>
			</fo:block>
		</xsl:if>
		
	</xsl:template><xsl:template match="*[local-name()='fn']">
		<fo:inline xsl:use-attribute-sets="fn-reference-style">
		
			
			
			
			
			<fo:basic-link internal-destination="{@reference}_{ancestor::*[@id][1]/@id}" fox:alt-text="{@reference}"> <!-- @reference   | ancestor::*[local-name()='clause'][1]/@id-->
				
				
				<xsl:value-of select="@reference"/>
				
				
			</fo:basic-link>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='fn']/text()[normalize-space() != '']">
		<fo:inline><xsl:value-of select="."/></fo:inline>
	</xsl:template><xsl:template match="*[local-name()='fn']//*[local-name()='p']">
		<fo:inline>
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='dl']">
		<xsl:variable name="isAdded" select="@added"/>
		<xsl:variable name="isDeleted" select="@deleted"/>
		<fo:block-container>
			
					<xsl:if test="not(ancestor::*[local-name() = 'quote'])">
						<xsl:attribute name="margin-left">0mm</xsl:attribute>
					</xsl:if>
				
			
			<xsl:if test="parent::*[local-name() = 'note']">
				<xsl:attribute name="margin-left">
					<xsl:choose>
						<xsl:when test="not(ancestor::*[local-name() = 'table'])"><xsl:value-of select="$note-body-indent"/></xsl:when>
						<xsl:otherwise><xsl:value-of select="$note-body-indent-table"/></xsl:otherwise>
					</xsl:choose>
				</xsl:attribute>
				
			</xsl:if>
			
			<xsl:call-template name="setTrackChangesStyles">
				<xsl:with-param name="isAdded" select="$isAdded"/>
				<xsl:with-param name="isDeleted" select="$isDeleted"/>
			</xsl:call-template>
			
			<fo:block-container margin-left="0mm">
			
				
						<xsl:attribute name="margin-right">0mm</xsl:attribute>
					
				
				<xsl:variable name="parent" select="local-name(..)"/>
				
				<xsl:variable name="key_iso">
					 <!-- and  (not(../@class) or ../@class !='pseudocode') -->
				</xsl:variable>
				
				<xsl:variable name="onlyOneComponent" select="normalize-space($parent = 'formula' and count(*[local-name()='dt']) = 1)"/>
				
				<xsl:choose>
					<xsl:when test="$onlyOneComponent = 'true'"> <!-- only one component -->
						
								<fo:block margin-bottom="12pt" text-align="left">
									
									<xsl:variable name="title-where">
										<xsl:call-template name="getLocalizedString">
											<xsl:with-param name="key">where</xsl:with-param>
										</xsl:call-template>
									</xsl:variable>
									<xsl:value-of select="$title-where"/><xsl:text> </xsl:text>
									<xsl:apply-templates select="*[local-name()='dt']/*"/>
									<xsl:text/>
									<xsl:apply-templates select="*[local-name()='dd']/*" mode="inline"/>
								</fo:block>
							
					</xsl:when> <!-- END: only one component -->
					<xsl:when test="$parent = 'formula'"> <!-- a few components -->
						<fo:block margin-bottom="12pt" text-align="left">
							
							
							
							
							<xsl:variable name="title-where">
								<xsl:call-template name="getLocalizedString">
									<xsl:with-param name="key">where</xsl:with-param>
								</xsl:call-template>
							</xsl:variable>
							<xsl:value-of select="$title-where"/>
						</fo:block>
					</xsl:when>  <!-- END: a few components -->
					<xsl:when test="$parent = 'figure' and  (not(../@class) or ../@class !='pseudocode')"> <!-- definition list in a figure -->
						<fo:block font-weight="bold" text-align="left" margin-bottom="12pt" keep-with-next="always">
							
							
							
							
							<xsl:variable name="title-key">
								<xsl:call-template name="getLocalizedString">
									<xsl:with-param name="key">key</xsl:with-param>
								</xsl:call-template>
							</xsl:variable>
							<xsl:value-of select="$title-key"/>
						</fo:block>
					</xsl:when>  <!-- END: definition list in a figure -->
				</xsl:choose>
				
				<!-- a few components -->
				<xsl:if test="$onlyOneComponent = 'false'">
					<fo:block>
						
						
						
						
						
						<xsl:if test="ancestor::*[local-name() = 'dd' or local-name() = 'td']">
							<xsl:attribute name="margin-top">0</xsl:attribute>
						</xsl:if>
						
						<fo:block>
							
							
							
							
							<xsl:apply-templates select="*[local-name() = 'name']">
								<xsl:with-param name="process">true</xsl:with-param>
							</xsl:apply-templates>
							
							<xsl:if test="$isGenerateTableIF = 'true'">
								<!-- to determine start of table -->
								<fo:block id="{concat('table_if_start_',@id)}" keep-with-next="always" font-size="1pt">Start table '<xsl:value-of select="@id"/>'.</fo:block>
							</xsl:if>
							
							<fo:table width="95%" table-layout="fixed">
							
								<xsl:if test="$isGenerateTableIF = 'true'">
									<xsl:attribute name="wrap-option">no-wrap</xsl:attribute>
								</xsl:if>
							
								
								<xsl:choose>
									<xsl:when test="normalize-space($key_iso) = 'true' and $parent = 'formula'"/>
									<xsl:when test="normalize-space($key_iso) = 'true'">
										<xsl:attribute name="font-size">10pt</xsl:attribute>
										
									</xsl:when>
								</xsl:choose>
								
								
								
								<xsl:choose>
									<xsl:when test="$isGenerateTableIF = 'true'">
										<!-- generate IF for table widths -->
										<!-- example:
											<tr>
												<td valign="top" align="left" id="tab-symdu_1_1">
													<p>Symbol</p>
													<word id="tab-symdu_1_1_word_1">Symbol</word>
												</td>
												<td valign="top" align="left" id="tab-symdu_1_2">
													<p>Description</p>
													<word id="tab-symdu_1_2_word_1">Description</word>
												</td>
											</tr>
										-->
										
										<!-- create virtual html table for dl/[dt and dd] -->
										<xsl:variable name="simple-table">
											
											<xsl:variable name="dl_table">
												<tbody>
													<xsl:apply-templates mode="dl_if">
														<xsl:with-param name="id" select="@id"/>
													</xsl:apply-templates>
												</tbody>
											</xsl:variable>
											
											<!-- dl_table='<xsl:copy-of select="$dl_table"/>' -->
											
											<!-- Step: replace <br/> to <p>...</p> -->
											<xsl:variable name="table_without_br">
												<xsl:apply-templates select="xalan:nodeset($dl_table)" mode="table-without-br"/>
											</xsl:variable>
											
											<!-- table_without_br='<xsl:copy-of select="$table_without_br"/>' -->
											
											<!-- Step: add id to each cell -->
											<!-- add <word>...</word> for each word, image, math -->
											<xsl:variable name="simple-table-id">
												<xsl:apply-templates select="xalan:nodeset($table_without_br)" mode="simple-table-id">
													<xsl:with-param name="id" select="@id"/>
												</xsl:apply-templates>
											</xsl:variable>
											
											<!-- simple-table-id='<xsl:copy-of select="$simple-table-id"/>' -->
											
											<xsl:copy-of select="xalan:nodeset($simple-table-id)"/>
											
										</xsl:variable>
										
										<!-- DEBUG: simple-table<xsl:copy-of select="$simple-table"/> -->
										
										<xsl:apply-templates select="xalan:nodeset($simple-table)" mode="process_table-if">
											<xsl:with-param name="table_or_dl">dl</xsl:with-param>
										</xsl:apply-templates>
										
									</xsl:when>
									<xsl:otherwise>
								
										<xsl:variable name="simple-table">
										
											<xsl:variable name="dl_table">
												<tbody>
													<xsl:apply-templates mode="dl">
														<xsl:with-param name="id" select="@id"/>
													</xsl:apply-templates>
												</tbody>
											</xsl:variable>
											
											<xsl:copy-of select="$dl_table"/>
										</xsl:variable>
								
										<xsl:variable name="colwidths">
											<xsl:call-template name="calculate-column-widths">
												<xsl:with-param name="cols-count" select="2"/>
												<xsl:with-param name="table" select="$simple-table"/>
											</xsl:call-template>
										</xsl:variable>
										
										<!-- <xsl:text disable-output-escaping="yes">&lt;!- -</xsl:text>
											DEBUG
											colwidths=<xsl:copy-of select="$colwidths"/>
										<xsl:text disable-output-escaping="yes">- -&gt;</xsl:text> -->
										
										<!-- colwidths=<xsl:copy-of select="$colwidths"/> -->
										
										<xsl:variable name="maxlength_dt">
											<xsl:call-template name="getMaxLength_dt"/>							
										</xsl:variable>
										
										<xsl:variable name="isContainsKeepTogetherTag_">
											false
										</xsl:variable>
										<xsl:variable name="isContainsKeepTogetherTag" select="normalize-space($isContainsKeepTogetherTag_)"/>
										<!-- isContainsExpressReference=<xsl:value-of select="$isContainsExpressReference"/> -->
										
										
										<xsl:call-template name="setColumnWidth_dl">
											<xsl:with-param name="colwidths" select="$colwidths"/>							
											<xsl:with-param name="maxlength_dt" select="$maxlength_dt"/>
											<xsl:with-param name="isContainsKeepTogetherTag" select="$isContainsKeepTogetherTag"/>
										</xsl:call-template>
										
										<fo:table-body>
											
											<!-- DEBUG -->
											<xsl:if test="$table_if_debug = 'true'">
												<fo:table-row>
													<fo:table-cell number-columns-spanned="2" font-size="60%">
														<xsl:apply-templates select="xalan:nodeset($colwidths)" mode="print_as_xml"/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:if>

											<xsl:apply-templates>
												<xsl:with-param name="key_iso" select="normalize-space($key_iso)"/>
												<xsl:with-param name="split_keep-within-line" select="xalan:nodeset($colwidths)/split_keep-within-line"/>
											</xsl:apply-templates>
											
										</fo:table-body>
									</xsl:otherwise>
								</xsl:choose>
							</fo:table>
						</fo:block>
					</fo:block>
				</xsl:if> <!-- END: a few components -->
			</fo:block-container>
		</fo:block-container>
		
		<xsl:if test="$isGenerateTableIF = 'true'"> <!-- process nested 'dl' -->
			<xsl:apply-templates select="*[local-name() = 'dd']/*[local-name() = 'dl']"/>
		</xsl:if>
		
	</xsl:template><xsl:template match="*[local-name() = 'dl']/*[local-name() = 'name']">
		<xsl:param name="process">false</xsl:param>
		<xsl:if test="$process = 'true'">
			<fo:block xsl:use-attribute-sets="dl-name-style">
				<xsl:apply-templates/>
			</fo:block>
		</xsl:if>
	</xsl:template><xsl:template name="setColumnWidth_dl">
		<xsl:param name="colwidths"/>		
		<xsl:param name="maxlength_dt"/>
		<xsl:param name="isContainsKeepTogetherTag"/>
		
		<!-- <colwidths><xsl:copy-of select="$colwidths"/></colwidths> -->
		
		<xsl:choose>
			<xsl:when test="xalan:nodeset($colwidths)/autolayout">
				<xsl:call-template name="insertTableColumnWidth">
					<xsl:with-param name="colwidths" select="$colwidths"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="ancestor::*[local-name()='dl']"><!-- second level, i.e. inlined table -->
				<fo:table-column column-width="50%"/>
				<fo:table-column column-width="50%"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:choose>
					<xsl:when test="xalan:nodeset($colwidths)/autolayout">
						<xsl:call-template name="insertTableColumnWidth">
							<xsl:with-param name="colwidths" select="$colwidths"/>
						</xsl:call-template>
					</xsl:when>
					<xsl:when test="$isContainsKeepTogetherTag">
						<xsl:call-template name="insertTableColumnWidth">
							<xsl:with-param name="colwidths" select="$colwidths"/>
						</xsl:call-template>
					</xsl:when>
					<!-- to set width check most wide chars like `W` -->
					<xsl:when test="normalize-space($maxlength_dt) != '' and number($maxlength_dt) &lt;= 2"> <!-- if dt contains short text like t90, a, etc -->
						<fo:table-column column-width="7%"/>
						<fo:table-column column-width="93%"/>
					</xsl:when>
					<xsl:when test="normalize-space($maxlength_dt) != '' and number($maxlength_dt) &lt;= 5"> <!-- if dt contains short text like ABC, etc -->
						<fo:table-column column-width="15%"/>
						<fo:table-column column-width="85%"/>
					</xsl:when>
					<xsl:when test="normalize-space($maxlength_dt) != '' and number($maxlength_dt) &lt;= 7"> <!-- if dt contains short text like ABCDEF, etc -->
						<fo:table-column column-width="20%"/>
						<fo:table-column column-width="80%"/>
					</xsl:when>
					<xsl:when test="normalize-space($maxlength_dt) != '' and number($maxlength_dt) &lt;= 10"> <!-- if dt contains short text like ABCDEFEF, etc -->
						<fo:table-column column-width="25%"/>
						<fo:table-column column-width="75%"/>
					</xsl:when>
					<!-- <xsl:when test="xalan:nodeset($colwidths)/column[1] div xalan:nodeset($colwidths)/column[2] &gt; 1.7">
						<fo:table-column column-width="60%"/>
						<fo:table-column column-width="40%"/>
					</xsl:when> -->
					<xsl:when test="xalan:nodeset($colwidths)/column[1] div xalan:nodeset($colwidths)/column[2] &gt; 1.3">
						<fo:table-column column-width="50%"/>
						<fo:table-column column-width="50%"/>
					</xsl:when>
					<xsl:when test="xalan:nodeset($colwidths)/column[1] div xalan:nodeset($colwidths)/column[2] &gt; 0.5">
						<fo:table-column column-width="40%"/>
						<fo:table-column column-width="60%"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:call-template name="insertTableColumnWidth">
							<xsl:with-param name="colwidths" select="$colwidths"/>
						</xsl:call-template>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="insertTableColumnWidth">
		<xsl:param name="colwidths"/>
		
		<xsl:for-each select="xalan:nodeset($colwidths)//column">
			<xsl:choose>
				<xsl:when test=". = 1 or . = 0">
					<fo:table-column column-width="proportional-column-width(2)"/>
				</xsl:when>
				<xsl:otherwise>
					<!-- <fo:table-column column-width="proportional-column-width({.})"/> -->
					<xsl:variable name="divider">
						<xsl:value-of select="@divider"/>
						<xsl:if test="not(@divider)">1</xsl:if>
					</xsl:variable>
					<fo:table-column column-width="proportional-column-width({round(. div $divider)})"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template><xsl:template name="getMaxLength_dt">
		<xsl:variable name="lengths">
			<xsl:for-each select="*[local-name()='dt']">
				<xsl:variable name="maintext_length" select="string-length(normalize-space(.))"/>
				<xsl:variable name="attributes">
					<xsl:for-each select=".//@open"><xsl:value-of select="."/></xsl:for-each>
					<xsl:for-each select=".//@close"><xsl:value-of select="."/></xsl:for-each>
				</xsl:variable>
				<length><xsl:value-of select="string-length(normalize-space(.)) + string-length($attributes)"/></length>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="maxLength">
			<xsl:for-each select="xalan:nodeset($lengths)/length">
				<xsl:sort select="." data-type="number" order="descending"/>
				<xsl:if test="position() = 1">
					<xsl:value-of select="."/>
				</xsl:if>
			</xsl:for-each>
		</xsl:variable>
		<!-- <xsl:message>DEBUG:<xsl:value-of select="$maxLength"/></xsl:message> -->
		<xsl:value-of select="$maxLength"/>
	</xsl:template><xsl:template match="*[local-name()='dl']/*[local-name()='note']" priority="2">
		<xsl:param name="key_iso"/>
		<!-- <tr>
			<td>NOTE</td>
			<td>
				<xsl:apply-templates />
			</td>
		</tr>
		 -->
		<!-- OLD Variant -->
		<!-- <fo:table-row>
			<fo:table-cell>
				<fo:block margin-top="6pt">
					<xsl:if test="normalize-space($key_iso) = 'true'">
						<xsl:attribute name="margin-top">0</xsl:attribute>
					</xsl:if>
					<xsl:apply-templates select="*[local-name() = 'name']" />
				</fo:block>
			</fo:table-cell>
			<fo:table-cell>
				<fo:block>
					<xsl:apply-templates select="node()[not(local-name() = 'name')]" />
				</fo:block>
			</fo:table-cell>
		</fo:table-row> -->
		<!-- <tr>
			<td number-columns-spanned="2">NOTE <xsl:apply-templates /> </td>
		</tr> 
		-->
		<fo:table-row>
			<fo:table-cell number-columns-spanned="2">
				<fo:block>
					<xsl:call-template name="note"/>
				</fo:block>
			</fo:table-cell>
		</fo:table-row>
	</xsl:template><xsl:template match="*[local-name()='dt']" mode="dl">
		<xsl:param name="id"/>
		<xsl:variable name="row_number" select="count(preceding-sibling::*[local-name()='dt']) + 1"/>
		<tr>
			<td>
				<xsl:attribute name="id">
					<xsl:value-of select="concat($id,'_',$row_number,'_1')"/>
				</xsl:attribute>
				<xsl:apply-templates/>
			</td>
			<td>
				<xsl:attribute name="id">
					<xsl:value-of select="concat($id,'_',$row_number,'_2')"/>
				</xsl:attribute>
				
						<xsl:apply-templates select="following-sibling::*[local-name()='dd'][1]">
							<xsl:with-param name="process">true</xsl:with-param>
						</xsl:apply-templates>
					
			</td>
		</tr>
		
	</xsl:template><xsl:template match="*[local-name()='dt']">
		<xsl:param name="key_iso"/>
		<xsl:param name="split_keep-within-line"/>
		
		<fo:table-row xsl:use-attribute-sets="dt-row-style">
			<xsl:call-template name="insert_dt_cell">
				<xsl:with-param name="key_iso" select="$key_iso"/>
				<xsl:with-param name="split_keep-within-line" select="$split_keep-within-line"/>
			</xsl:call-template>
			<xsl:for-each select="following-sibling::*[local-name()='dd'][1]">
				<xsl:call-template name="insert_dd_cell">
					<xsl:with-param name="split_keep-within-line" select="$split_keep-within-line"/>
				</xsl:call-template>
			</xsl:for-each>
		</fo:table-row>
	</xsl:template><xsl:template name="insert_dt_cell">
		<xsl:param name="key_iso"/>
		<xsl:param name="split_keep-within-line"/>
		<fo:table-cell xsl:use-attribute-sets="dt-cell-style">
		
			<xsl:if test="$isGenerateTableIF = 'true'">
				<!-- border is mandatory, to calculate real width -->
				<xsl:attribute name="border">0.1pt solid black</xsl:attribute>
				<xsl:attribute name="text-align">left</xsl:attribute>
			</xsl:if>
			
			
			<fo:block xsl:use-attribute-sets="dt-block-style">
				<xsl:copy-of select="@id"/>
				
				<xsl:if test="normalize-space($key_iso) = 'true'">
					<xsl:attribute name="margin-top">0</xsl:attribute>
				</xsl:if>
				
				
				
				<xsl:apply-templates>
					<xsl:with-param name="split_keep-within-line" select="$split_keep-within-line"/>
				</xsl:apply-templates>
				
				<xsl:if test="$isGenerateTableIF = 'true'"><fo:inline id="{@id}_end">end</fo:inline></xsl:if> <!-- to determine width of text --> <!-- <xsl:value-of select="$hair_space"/> -->
				
			</fo:block>
		</fo:table-cell>
	</xsl:template><xsl:template name="insert_dd_cell">
		<xsl:param name="split_keep-within-line"/>
		<fo:table-cell xsl:use-attribute-sets="dd-cell-style">
		
			<xsl:if test="$isGenerateTableIF = 'true'">
				<!-- border is mandatory, to calculate real width -->
				<xsl:attribute name="border">0.1pt solid black</xsl:attribute>
			</xsl:if>
		
			<fo:block>
			
				<xsl:if test="$isGenerateTableIF = 'true'">
					<xsl:attribute name="id"><xsl:value-of select="@id"/></xsl:attribute>
				</xsl:if>
			
				

				<xsl:choose>
					<xsl:when test="$isGenerateTableIF = 'true'">
						<xsl:apply-templates> <!-- following-sibling::*[local-name()='dd'][1] -->
							<xsl:with-param name="process">true</xsl:with-param>
						</xsl:apply-templates>
					</xsl:when>
					<xsl:otherwise>
						<xsl:apply-templates select="."> <!-- following-sibling::*[local-name()='dd'][1] -->
							<xsl:with-param name="process">true</xsl:with-param>
							<xsl:with-param name="split_keep-within-line" select="$split_keep-within-line"/>
						</xsl:apply-templates>
					</xsl:otherwise>
				
				</xsl:choose>
				
				<xsl:if test="$isGenerateTableIF = 'true'"><fo:inline id="{@id}_end">end</fo:inline></xsl:if> <!-- to determine width of text --> <!-- <xsl:value-of select="$hair_space"/> -->
				
			</fo:block>
		</fo:table-cell>
	</xsl:template><xsl:template match="*[local-name()='dd']" mode="dl"/><xsl:template match="*[local-name()='dd']" mode="dl_process">
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name()='dd']">
		<xsl:param name="process">false</xsl:param>
		<xsl:param name="split_keep-within-line"/>
		<xsl:if test="$process = 'true'">
			<xsl:apply-templates select="@language"/>
			<xsl:apply-templates>
				<xsl:with-param name="split_keep-within-line" select="$split_keep-within-line"/>
			</xsl:apply-templates>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name()='dd']/*[local-name()='p']" mode="inline">
		<fo:inline><xsl:text> </xsl:text><xsl:apply-templates/></fo:inline>
	</xsl:template><xsl:template match="*[local-name()='dt']" mode="dl_if">
		<xsl:param name="id"/>
		<xsl:variable name="row_number" select="count(preceding-sibling::*[local-name()='dt']) + 1"/>
		<tr>
			<td>
				<xsl:copy-of select="node()"/>
			</td>
			<td>
				
						<xsl:copy-of select="following-sibling::*[local-name()='dd'][1]/node()[not(local-name() = 'dl')]"/>
						
						<!-- get paragraphs from nested 'dl' -->
						<xsl:apply-templates select="following-sibling::*[local-name()='dd'][1]/*[local-name() = 'dl']" mode="dl_if_nested"/>
						
					
			</td>
		</tr>
		
	</xsl:template><xsl:template match="*[local-name()='dd']" mode="dl_if"/><xsl:template match="*[local-name()='dl']" mode="dl_if_nested">
		<xsl:for-each select="*[local-name() = 'dt']">
			<p>
				<xsl:copy-of select="node()"/>
				<xsl:text> </xsl:text>
				<xsl:copy-of select="following-sibling::*[local-name()='dd'][1]/*[local-name() = 'p']/node()"/>
			</p>
		</xsl:for-each>
	</xsl:template><xsl:template match="*[local-name()='dd']" mode="dl_if_nested"/><xsl:template match="*[local-name()='em']">
		<fo:inline font-style="italic">
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='strong'] | *[local-name()='b']">
		<xsl:param name="split_keep-within-line"/>
		<fo:inline font-weight="bold">
			
			<xsl:apply-templates>
				<xsl:with-param name="split_keep-within-line" select="$split_keep-within-line"/>
			</xsl:apply-templates>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='padding']">
		<fo:inline padding-right="{@value}"> </fo:inline>
	</xsl:template><xsl:template match="*[local-name()='sup']">
		<fo:inline font-size="80%" vertical-align="super">
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='sub']">
		<fo:inline font-size="80%" vertical-align="sub">
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='tt']">
		<fo:inline xsl:use-attribute-sets="tt-style">
		
			<xsl:variable name="_font-size">
				
				
				
				
				
				 <!-- 10 -->
				
				
				
				
				
				
				
				
				
						
			</xsl:variable>
			<xsl:variable name="font-size" select="normalize-space($_font-size)"/>		
			<xsl:if test="$font-size != ''">
				<xsl:attribute name="font-size">
					<xsl:choose>
						<xsl:when test="$font-size = 'inherit'"><xsl:value-of select="$font-size"/></xsl:when>
						<xsl:when test="contains($font-size, '%')"><xsl:value-of select="$font-size"/></xsl:when>
						<xsl:when test="ancestor::*[local-name()='note'] or ancestor::*[local-name()='example']"><xsl:value-of select="$font-size * 0.91"/>pt</xsl:when>
						<xsl:otherwise><xsl:value-of select="$font-size"/>pt</xsl:otherwise>
					</xsl:choose>
				</xsl:attribute>
			</xsl:if>
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='tt']/text()" priority="2">
		<xsl:call-template name="add_spaces_to_sourcecode"/>
	</xsl:template><xsl:template match="*[local-name()='underline']">
		<fo:inline text-decoration="underline">
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='add']" name="tag_add">
		<xsl:param name="skip">true</xsl:param>
		<xsl:param name="block">false</xsl:param>
		<xsl:param name="type"/>
		<xsl:param name="text-align"/>
		<xsl:choose>
			<xsl:when test="starts-with(., $ace_tag)"> <!-- examples: ace-tag_A1_start, ace-tag_A2_end, C1_start, AC_start -->
				<xsl:choose>
					<xsl:when test="$skip = 'true' and       ((local-name(../..) = 'note' and not(preceding-sibling::node())) or       (local-name(..) = 'title' and preceding-sibling::node()[1][local-name() = 'tab']) or      local-name(..) = 'formattedref' and not(preceding-sibling::node()))      and       ../node()[last()][local-name() = 'add'][starts-with(text(), $ace_tag)]"><!-- start tag displayed in template name="note" and title --></xsl:when>
					<xsl:otherwise>
						<xsl:variable name="tag">
							<xsl:call-template name="insertTag">
								<xsl:with-param name="type">
									<xsl:choose>
										<xsl:when test="$type = ''"><xsl:value-of select="substring-after(substring-after(., $ace_tag), '_')"/> <!-- start or end --></xsl:when>
										<xsl:otherwise><xsl:value-of select="$type"/></xsl:otherwise>
									</xsl:choose>
								</xsl:with-param>
								<xsl:with-param name="kind" select="substring(substring-before(substring-after(., $ace_tag), '_'), 1, 1)"/> <!-- A or C -->
								<xsl:with-param name="value" select="substring(substring-before(substring-after(., $ace_tag), '_'), 2)"/> <!-- 1, 2, C -->
							</xsl:call-template>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$block = 'false'">
								<fo:inline>
									<xsl:copy-of select="$tag"/>									
								</fo:inline>
							</xsl:when>
							<xsl:otherwise>
								<fo:block> <!-- for around figures -->
									<xsl:if test="$text-align != ''">
										<xsl:attribute name="text-align"><xsl:value-of select="$text-align"/></xsl:attribute>
									</xsl:if>
									<xsl:copy-of select="$tag"/>
								</fo:block>
							</xsl:otherwise>
						</xsl:choose>
						
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="@amendment">
				<fo:inline>
					<xsl:call-template name="insertTag">
						<xsl:with-param name="kind">A</xsl:with-param>
						<xsl:with-param name="value"><xsl:value-of select="@amendment"/></xsl:with-param>
					</xsl:call-template>
					<xsl:apply-templates/>
					<xsl:call-template name="insertTag">
						<xsl:with-param name="type">closing</xsl:with-param>
						<xsl:with-param name="kind">A</xsl:with-param>
						<xsl:with-param name="value"><xsl:value-of select="@amendment"/></xsl:with-param>
					</xsl:call-template>
				</fo:inline>
			</xsl:when>
			<xsl:when test="@corrigenda">
				<fo:inline>
					<xsl:call-template name="insertTag">
						<xsl:with-param name="kind">C</xsl:with-param>
						<xsl:with-param name="value"><xsl:value-of select="@corrigenda"/></xsl:with-param>
					</xsl:call-template>
					<xsl:apply-templates/>
					<xsl:call-template name="insertTag">
						<xsl:with-param name="type">closing</xsl:with-param>
						<xsl:with-param name="kind">C</xsl:with-param>
						<xsl:with-param name="value"><xsl:value-of select="@corrigenda"/></xsl:with-param>
					</xsl:call-template>
				</fo:inline>
			</xsl:when>
			<xsl:otherwise>
				<fo:inline xsl:use-attribute-sets="add-style">
					<xsl:apply-templates/>
				</fo:inline>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="insertTag">
		<xsl:param name="type"/>
		<xsl:param name="kind"/>
		<xsl:param name="value"/>
		<xsl:variable name="add_width" select="string-length($value) * 20"/>
		<xsl:variable name="maxwidth" select="60 + $add_width"/>
			<fo:instream-foreign-object fox:alt-text="OpeningTag" baseline-shift="-20%"><!-- alignment-baseline="middle" -->
				<xsl:attribute name="height">5mm</xsl:attribute>
				<xsl:attribute name="content-width">100%</xsl:attribute>
				<xsl:attribute name="content-width">scale-down-to-fit</xsl:attribute>
				<xsl:attribute name="scaling">uniform</xsl:attribute>
				<svg xmlns="http://www.w3.org/2000/svg" width="{$maxwidth + 32}" height="80">
					<g>
						<xsl:if test="$type = 'closing' or $type = 'end'">
							<xsl:attribute name="transform">scale(-1 1) translate(-<xsl:value-of select="$maxwidth + 32"/>,0)</xsl:attribute>
						</xsl:if>
						<polyline points="0,0 {$maxwidth},0 {$maxwidth + 30},40 {$maxwidth},80 0,80 " stroke="black" stroke-width="5" fill="white"/>
						<line x1="0" y1="0" x2="0" y2="80" stroke="black" stroke-width="20"/>
					</g>
					<text font-family="Arial" x="15" y="57" font-size="40pt">
						<xsl:if test="$type = 'closing' or $type = 'end'">
							<xsl:attribute name="x">25</xsl:attribute>
						</xsl:if>
						<xsl:value-of select="$kind"/><tspan dy="10" font-size="30pt"><xsl:value-of select="$value"/></tspan>
					</text>
				</svg>
			</fo:instream-foreign-object>
	</xsl:template><xsl:template match="*[local-name()='del']">
		<fo:inline xsl:use-attribute-sets="del-style">
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='hi']">
		<fo:inline background-color="yellow">
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="text()[ancestor::*[local-name()='smallcap']]">
		<xsl:variable name="text" select="normalize-space(.)"/>
		<fo:inline font-size="75%">
				<xsl:if test="string-length($text) &gt; 0">
					<xsl:call-template name="recursiveSmallCaps">
						<xsl:with-param name="text" select="$text"/>
					</xsl:call-template>
				</xsl:if>
			</fo:inline> 
	</xsl:template><xsl:template name="recursiveSmallCaps">
    <xsl:param name="text"/>
    <xsl:variable name="char" select="substring($text,1,1)"/>
    <!-- <xsl:variable name="upperCase" select="translate($char, $lower, $upper)"/> -->
		<xsl:variable name="upperCase" select="java:toUpperCase(java:java.lang.String.new($char))"/>
    <xsl:choose>
      <xsl:when test="$char=$upperCase">
        <fo:inline font-size="{100 div 0.75}%">
          <xsl:value-of select="$upperCase"/>
        </fo:inline>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$upperCase"/>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:if test="string-length($text) &gt; 1">
      <xsl:call-template name="recursiveSmallCaps">
        <xsl:with-param name="text" select="substring($text,2)"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:template><xsl:template match="*[local-name() = 'pagebreak']">
		<fo:block break-after="page"/>
		<fo:block> </fo:block>
		<fo:block break-after="page"/>
	</xsl:template><xsl:template match="*[local-name() = 'span']">
		<xsl:apply-templates/>
	</xsl:template><xsl:template name="tokenize">
		<xsl:param name="text"/>
		<xsl:param name="separator" select="' '"/>
		<xsl:choose>
		
			<xsl:when test="$isGenerateTableIF = 'true' and not(contains($text, $separator))">
				<word><xsl:value-of select="normalize-space($text)"/></word>
			</xsl:when>
			<xsl:when test="not(contains($text, $separator))">
				<word>
					<xsl:variable name="len_str_tmp" select="string-length(normalize-space($text))"/>
					<xsl:choose>
						<xsl:when test="normalize-space(translate($text, 'X', '')) = ''"> <!-- special case for keep-together.within-line -->
							<xsl:value-of select="$len_str_tmp"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="str_no_en_chars" select="normalize-space(translate($text, $en_chars, ''))"/>
							<xsl:variable name="len_str_no_en_chars" select="string-length($str_no_en_chars)"/>
							<xsl:variable name="len_str">
								<xsl:choose>
									<xsl:when test="normalize-space(translate($text, $upper, '')) = ''"> <!-- english word in CAPITAL letters -->
										<xsl:value-of select="$len_str_tmp * 1.5"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="$len_str_tmp"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable> 
							
							<!-- <xsl:if test="$len_str_no_en_chars div $len_str &gt; 0.8">
								<xsl:message>
									div=<xsl:value-of select="$len_str_no_en_chars div $len_str"/>
									len_str=<xsl:value-of select="$len_str"/>
									len_str_no_en_chars=<xsl:value-of select="$len_str_no_en_chars"/>
								</xsl:message>
							</xsl:if> -->
							<!-- <len_str_no_en_chars><xsl:value-of select="$len_str_no_en_chars"/></len_str_no_en_chars>
							<len_str><xsl:value-of select="$len_str"/></len_str> -->
							<xsl:choose>
								<xsl:when test="$len_str_no_en_chars div $len_str &gt; 0.8"> <!-- means non-english string -->
									<xsl:value-of select="$len_str - $len_str_no_en_chars"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="$len_str"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:otherwise>
					</xsl:choose>
				</word>
			</xsl:when>
			<xsl:otherwise>
				<word>
					<xsl:variable name="word" select="normalize-space(substring-before($text, $separator))"/>
					<xsl:choose>
						<xsl:when test="$isGenerateTableIF = 'true'">
							<xsl:value-of select="$word"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="string-length($word)"/>
						</xsl:otherwise>
					</xsl:choose>
				</word>
				<xsl:call-template name="tokenize">
					<xsl:with-param name="text" select="substring-after($text, $separator)"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="tokenize_with_tags">
		<xsl:param name="tags"/>
		<xsl:param name="text"/>
		<xsl:param name="separator" select="' '"/>
		<xsl:choose>
		
			<xsl:when test="not(contains($text, $separator))">
				<word>
					<xsl:call-template name="enclose_text_in_tags">
						<xsl:with-param name="text" select="normalize-space($text)"/>
						<xsl:with-param name="tags" select="$tags"/>
					</xsl:call-template>
				</word>
			</xsl:when>
			<xsl:otherwise>
				<word>
					<xsl:call-template name="enclose_text_in_tags">
						<xsl:with-param name="text" select="normalize-space(substring-before($text, $separator))"/>
						<xsl:with-param name="tags" select="$tags"/>
					</xsl:call-template>
				</word>
				<xsl:call-template name="tokenize_with_tags">
					<xsl:with-param name="text" select="substring-after($text, $separator)"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="enclose_text_in_tags">
		<xsl:param name="text"/>
		<xsl:param name="tags"/>
		<xsl:param name="num">1</xsl:param> <!-- default (start) value -->
		
		<xsl:variable name="tag_name" select="normalize-space(xalan:nodeset($tags)//tag[$num])"/>
		
		<xsl:choose>
			<xsl:when test="$tag_name = ''"><xsl:value-of select="$text"/></xsl:when>
			<xsl:otherwise>
				<xsl:element name="{$tag_name}">
					<xsl:call-template name="enclose_text_in_tags">
						<xsl:with-param name="text" select="$text"/>
						<xsl:with-param name="tags" select="$tags"/>
						<xsl:with-param name="num" select="$num + 1"/>
					</xsl:call-template>
				</xsl:element>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="max_length">
		<xsl:param name="words"/>
		<xsl:for-each select="$words//word">
				<xsl:sort select="." data-type="number" order="descending"/>
				<xsl:if test="position()=1">
						<xsl:value-of select="."/>
				</xsl:if>
		</xsl:for-each>
	</xsl:template><xsl:template name="add-zero-spaces-java">
		<xsl:param name="text" select="."/>
		<!-- add zero-width space (#x200B) after characters: dash, dot, colon, equal, underscore, em dash, thin space  -->
		<xsl:value-of select="java:replaceAll(java:java.lang.String.new($text),'(-|\.|:|=|_|—| )','$1​')"/>
	</xsl:template><xsl:template name="add-zero-spaces-link-java">
		<xsl:param name="text" select="."/>
		<!-- add zero-width space (#x200B) after characters: dash, dot, colon, equal, underscore, em dash, thin space  -->
		<xsl:value-of select="java:replaceAll(java:java.lang.String.new($text),'(-|\.|:|=|_|—| |,)','$1​')"/>
	</xsl:template><xsl:template name="add-zero-spaces">
		<xsl:param name="text" select="."/>
		<xsl:variable name="zero-space-after-chars">-</xsl:variable>
		<xsl:variable name="zero-space-after-dot">.</xsl:variable>
		<xsl:variable name="zero-space-after-colon">:</xsl:variable>
		<xsl:variable name="zero-space-after-equal">=</xsl:variable>
		<xsl:variable name="zero-space-after-underscore">_</xsl:variable>
		<xsl:variable name="zero-space">​</xsl:variable>
		<xsl:choose>
			<xsl:when test="contains($text, $zero-space-after-chars)">
				<xsl:value-of select="substring-before($text, $zero-space-after-chars)"/>
				<xsl:value-of select="$zero-space-after-chars"/>
				<xsl:value-of select="$zero-space"/>
				<xsl:call-template name="add-zero-spaces">
					<xsl:with-param name="text" select="substring-after($text, $zero-space-after-chars)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="contains($text, $zero-space-after-dot)">
				<xsl:value-of select="substring-before($text, $zero-space-after-dot)"/>
				<xsl:value-of select="$zero-space-after-dot"/>
				<xsl:value-of select="$zero-space"/>
				<xsl:call-template name="add-zero-spaces">
					<xsl:with-param name="text" select="substring-after($text, $zero-space-after-dot)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="contains($text, $zero-space-after-colon)">
				<xsl:value-of select="substring-before($text, $zero-space-after-colon)"/>
				<xsl:value-of select="$zero-space-after-colon"/>
				<xsl:value-of select="$zero-space"/>
				<xsl:call-template name="add-zero-spaces">
					<xsl:with-param name="text" select="substring-after($text, $zero-space-after-colon)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="contains($text, $zero-space-after-equal)">
				<xsl:value-of select="substring-before($text, $zero-space-after-equal)"/>
				<xsl:value-of select="$zero-space-after-equal"/>
				<xsl:value-of select="$zero-space"/>
				<xsl:call-template name="add-zero-spaces">
					<xsl:with-param name="text" select="substring-after($text, $zero-space-after-equal)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="contains($text, $zero-space-after-underscore)">
				<xsl:value-of select="substring-before($text, $zero-space-after-underscore)"/>
				<xsl:value-of select="$zero-space-after-underscore"/>
				<xsl:value-of select="$zero-space"/>
				<xsl:call-template name="add-zero-spaces">
					<xsl:with-param name="text" select="substring-after($text, $zero-space-after-underscore)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$text"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="add-zero-spaces-equal">
		<xsl:param name="text" select="."/>
		<xsl:variable name="zero-space-after-equals">==========</xsl:variable>
		<xsl:variable name="regex_zero-space-after-equals">(==========)</xsl:variable>
		<xsl:variable name="zero-space-after-equal">=</xsl:variable>
		<xsl:variable name="regex_zero-space-after-equal">(=)</xsl:variable>
		<xsl:variable name="zero-space">​</xsl:variable>
		<xsl:choose>
			<xsl:when test="contains($text, $zero-space-after-equals)">
				<!-- <xsl:value-of select="substring-before($text, $zero-space-after-equals)"/>
				<xsl:value-of select="$zero-space-after-equals"/>
				<xsl:value-of select="$zero-space"/>
				<xsl:call-template name="add-zero-spaces-equal">
					<xsl:with-param name="text" select="substring-after($text, $zero-space-after-equals)"/>
				</xsl:call-template> -->
				<xsl:value-of select="java:replaceAll(java:java.lang.String.new(.),$regex_zero-space-after-equals,concat('$1',$zero_width_space))"/>
			</xsl:when>
			<xsl:when test="contains($text, $zero-space-after-equal)">
				<!-- <xsl:value-of select="substring-before($text, $zero-space-after-equal)"/>
				<xsl:value-of select="$zero-space-after-equal"/>
				<xsl:value-of select="$zero-space"/>
				<xsl:call-template name="add-zero-spaces-equal">
					<xsl:with-param name="text" select="substring-after($text, $zero-space-after-equal)"/>
				</xsl:call-template> -->
				<xsl:value-of select="java:replaceAll(java:java.lang.String.new(.),$regex_zero-space-after-equal,concat('$1',$zero_width_space))"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$text"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="getSimpleTable">
		<xsl:param name="id"/>
		
		<xsl:variable name="simple-table">
		
			<!-- Step 0. replace <br/> to <p>...</p> -->
			<xsl:variable name="table_without_br">
				<xsl:apply-templates mode="table-without-br"/>
			</xsl:variable>
		
			<!-- Step 1. colspan processing -->
			<xsl:variable name="simple-table-colspan">
				<tbody>
					<xsl:apply-templates select="xalan:nodeset($table_without_br)" mode="simple-table-colspan"/>
				</tbody>
			</xsl:variable>
			
			<!-- Step 2. rowspan processing -->
			<xsl:variable name="simple-table-rowspan">
				<xsl:apply-templates select="xalan:nodeset($simple-table-colspan)" mode="simple-table-rowspan"/>
			</xsl:variable>
			
			<!-- Step 3: add id to each cell -->
			<!-- add <word>...</word> for each word, image, math -->
			<xsl:variable name="simple-table-id">
				<xsl:apply-templates select="xalan:nodeset($simple-table-rowspan)" mode="simple-table-id">
					<xsl:with-param name="id" select="$id"/>
				</xsl:apply-templates>
			</xsl:variable>
			
			<xsl:copy-of select="xalan:nodeset($simple-table-id)"/>

		</xsl:variable>
		<xsl:copy-of select="$simple-table"/>
	</xsl:template><xsl:template match="@*|node()" mode="table-without-br">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="table-without-br"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name()='th' or local-name() = 'td'][not(*[local-name()='br']) and not(*[local-name()='p'])]" mode="table-without-br">
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<p>
				<xsl:copy-of select="node()"/>
			</p>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name()='th' or local-name()='td'][*[local-name()='br']]" mode="table-without-br">
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<xsl:for-each select="*[local-name()='br']">
				<xsl:variable name="current_id" select="generate-id()"/>
				<p>
					<xsl:for-each select="preceding-sibling::node()[following-sibling::*[local-name() = 'br'][1][generate-id() = $current_id]][not(local-name() = 'br')]">
						<xsl:copy-of select="."/>
					</xsl:for-each>
				</p>
				<xsl:if test="not(following-sibling::*[local-name() = 'br'])">
					<p>
						<xsl:for-each select="following-sibling::node()">
							<xsl:copy-of select="."/>
						</xsl:for-each>
					</p>
				</xsl:if>
			</xsl:for-each>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name()='th' or local-name()='td']/*[local-name() = 'p'][*[local-name()='br']]" mode="table-without-br">
		<xsl:for-each select="*[local-name()='br']">
			<xsl:variable name="current_id" select="generate-id()"/>
			<p>
				<xsl:for-each select="preceding-sibling::node()[following-sibling::*[local-name() = 'br'][1][generate-id() = $current_id]][not(local-name() = 'br')]">
					<xsl:copy-of select="."/>
				</xsl:for-each>
			</p>
			<xsl:if test="not(following-sibling::*[local-name() = 'br'])">
				<p>
					<xsl:for-each select="following-sibling::node()">
						<xsl:copy-of select="."/>
					</xsl:for-each>
				</p>
			</xsl:if>
		</xsl:for-each>
	</xsl:template><xsl:template match="text()[not(ancestor::*[local-name() = 'sourcecode'])]" mode="table-without-br">
		<xsl:variable name="text" select="translate(.,'&#9;&#10;&#13;','')"/>
		<xsl:value-of select="java:replaceAll(java:java.lang.String.new($text),' {2,}',' ')"/>
	</xsl:template><xsl:template match="*[local-name()='thead'] | *[local-name()='tbody']" mode="simple-table-colspan">
		<xsl:apply-templates mode="simple-table-colspan"/>
	</xsl:template><xsl:template match="*[local-name()='fn']" mode="simple-table-colspan"/><xsl:template match="*[local-name()='th'] | *[local-name()='td']" mode="simple-table-colspan">
		<xsl:choose>
			<xsl:when test="@colspan">
				<xsl:variable name="td">
					<xsl:element name="td">
						<xsl:attribute name="divide"><xsl:value-of select="@colspan"/></xsl:attribute>
						<xsl:apply-templates select="@*" mode="simple-table-colspan"/>
						<xsl:apply-templates mode="simple-table-colspan"/>
					</xsl:element>
				</xsl:variable>
				<xsl:call-template name="repeatNode">
					<xsl:with-param name="count" select="@colspan"/>
					<xsl:with-param name="node" select="$td"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:element name="td">
					<xsl:apply-templates select="@*" mode="simple-table-colspan"/>
					<xsl:apply-templates mode="simple-table-colspan"/>
				</xsl:element>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="@colspan" mode="simple-table-colspan"/><xsl:template match="*[local-name()='tr']" mode="simple-table-colspan">
		<xsl:element name="tr">
			<xsl:apply-templates select="@*" mode="simple-table-colspan"/>
			<xsl:apply-templates mode="simple-table-colspan"/>
		</xsl:element>
	</xsl:template><xsl:template match="@*|node()" mode="simple-table-colspan">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="simple-table-colspan"/>
		</xsl:copy>
	</xsl:template><xsl:template name="repeatNode">
		<xsl:param name="count"/>
		<xsl:param name="node"/>
		
		<xsl:if test="$count &gt; 0">
			<xsl:call-template name="repeatNode">
				<xsl:with-param name="count" select="$count - 1"/>
				<xsl:with-param name="node" select="$node"/>
			</xsl:call-template>
			<xsl:copy-of select="$node"/>
		</xsl:if>
	</xsl:template><xsl:template match="@*|node()" mode="simple-table-rowspan">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="simple-table-rowspan"/>
		</xsl:copy>
	</xsl:template><xsl:template match="tbody" mode="simple-table-rowspan">
		<xsl:copy>
				<xsl:copy-of select="tr[1]"/>
				<xsl:apply-templates select="tr[2]" mode="simple-table-rowspan">
						<xsl:with-param name="previousRow" select="tr[1]"/>
				</xsl:apply-templates>
		</xsl:copy>
	</xsl:template><xsl:template match="tr" mode="simple-table-rowspan">
		<xsl:param name="previousRow"/>
		<xsl:variable name="currentRow" select="."/>
	
		<xsl:variable name="normalizedTDs">
				<xsl:for-each select="xalan:nodeset($previousRow)//td">
						<xsl:choose>
								<xsl:when test="@rowspan &gt; 1">
										<xsl:copy>
												<xsl:attribute name="rowspan">
														<xsl:value-of select="@rowspan - 1"/>
												</xsl:attribute>
												<xsl:copy-of select="@*[not(name() = 'rowspan')]"/>
												<xsl:copy-of select="node()"/>
										</xsl:copy>
								</xsl:when>
								<xsl:otherwise>
										<xsl:copy-of select="$currentRow/td[1 + count(current()/preceding-sibling::td[not(@rowspan) or (@rowspan = 1)])]"/>
								</xsl:otherwise>
						</xsl:choose>
				</xsl:for-each>
		</xsl:variable>

		<xsl:variable name="newRow">
				<xsl:copy>
						<xsl:copy-of select="$currentRow/@*"/>
						<xsl:copy-of select="xalan:nodeset($normalizedTDs)"/>
				</xsl:copy>
		</xsl:variable>
		<xsl:copy-of select="$newRow"/>

		<xsl:apply-templates select="following-sibling::tr[1]" mode="simple-table-rowspan">
				<xsl:with-param name="previousRow" select="$newRow"/>
		</xsl:apply-templates>
	</xsl:template><xsl:template match="/" mode="simple-table-id">
		<xsl:param name="id"/>
		<xsl:variable name="id_prefixed" select="concat('table_if_',$id)"/> <!-- table id prefixed by 'table_if_' to simple search in IF  -->
		<xsl:apply-templates select="@*|node()" mode="simple-table-id">
			<xsl:with-param name="id" select="$id_prefixed"/>
		</xsl:apply-templates>
	</xsl:template><xsl:template match="@*|node()" mode="simple-table-id">
		<xsl:param name="id"/>
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="simple-table-id">
					<xsl:with-param name="id" select="$id"/>
				</xsl:apply-templates>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name()='tbody']" mode="simple-table-id">
		<xsl:param name="id"/>
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<xsl:attribute name="id"><xsl:value-of select="$id"/></xsl:attribute>
			<xsl:apply-templates select="node()" mode="simple-table-id">
				<xsl:with-param name="id" select="$id"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name()='th' or local-name()='td']" mode="simple-table-id">
		<xsl:param name="id"/>
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<xsl:variable name="row_number" select="count(../preceding-sibling::*) + 1"/>
			<xsl:variable name="col_number" select="count(preceding-sibling::*) + 1"/>
			<xsl:attribute name="id">
				<xsl:value-of select="concat($id,'_',$row_number,'_',$col_number)"/>
			</xsl:attribute>
			
			<xsl:for-each select="*[local-name() = 'p']">
				<xsl:copy>
					<xsl:copy-of select="@*"/>
					<xsl:variable name="p_num" select="count(preceding-sibling::*[local-name() = 'p']) + 1"/>
					<xsl:attribute name="id">
						<xsl:value-of select="concat($id,'_',$row_number,'_',$col_number,'_p_',$p_num)"/>
					</xsl:attribute>
					
					<xsl:copy-of select="node()"/>
				</xsl:copy>
			</xsl:for-each>
			
			
			<xsl:if test="$isGenerateTableIF = 'true'"> <!-- split each paragraph to words, image, math -->
			
				<xsl:variable name="td_text">
					<xsl:apply-templates select="." mode="td_text_with_formatting"/>
				</xsl:variable>
				
				<!-- td_text='<xsl:copy-of select="$td_text"/>' -->
			
				<xsl:variable name="words">
					<xsl:for-each select=".//*[local-name() = 'image' or local-name() = 'stem']">
						<word>
							<xsl:copy-of select="."/>
						</word>
					</xsl:for-each>
					
					<xsl:for-each select="xalan:nodeset($td_text)//*[local-name() = 'word'][normalize-space() != '']">
						<xsl:copy-of select="."/>
					</xsl:for-each>
					
				</xsl:variable>
				
				<xsl:for-each select="xalan:nodeset($words)/word">
					<xsl:variable name="num" select="count(preceding-sibling::word) + 1"/>
					<xsl:copy>
						<xsl:attribute name="id">
							<xsl:value-of select="concat($id,'_',$row_number,'_',$col_number,'_word_',$num)"/>
						</xsl:attribute>
						<xsl:copy-of select="node()"/>
					</xsl:copy>
				</xsl:for-each>
			</xsl:if>
		</xsl:copy>
		
	</xsl:template><xsl:template match="@*|node()" mode="td_text_with_formatting">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="td_text_with_formatting"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'stem' or local-name() = 'image']" mode="td_text_with_formatting"/><xsl:template match="*[local-name() = 'keep-together_within-line']/text()" mode="td_text_with_formatting">
		<xsl:variable name="formatting_tags">
			<xsl:call-template name="getFormattingTags"/>
		</xsl:variable>
		<word>
			<xsl:call-template name="enclose_text_in_tags">
				<xsl:with-param name="text" select="normalize-space(.)"/>
				<xsl:with-param name="tags" select="$formatting_tags"/>
			</xsl:call-template>
		</word>
	</xsl:template><xsl:template match="*[local-name() != 'keep-together_within-line']/text()" mode="td_text_with_formatting">
		
		<xsl:variable name="td_text" select="."/>
		
		<xsl:variable name="string_with_added_zerospaces">
			<xsl:call-template name="add-zero-spaces-java">
				<xsl:with-param name="text" select="$td_text"/>
			</xsl:call-template>
		</xsl:variable>
		
		<xsl:variable name="formatting_tags">
			<xsl:call-template name="getFormattingTags"/>
		</xsl:variable>
		
		<!-- <word>text</word> -->
		<xsl:call-template name="tokenize_with_tags">
			<xsl:with-param name="tags" select="$formatting_tags"/>
			<xsl:with-param name="text" select="normalize-space(translate($string_with_added_zerospaces, '​­', '  '))"/> <!-- replace zero-width-space and soft-hyphen to space -->
		</xsl:call-template>
	</xsl:template><xsl:template name="getFormattingTags">
		<tags>
			<xsl:if test="ancestor::*[local-name() = 'strong']"><tag>strong</tag></xsl:if>
			<xsl:if test="ancestor::*[local-name() = 'em']"><tag>em</tag></xsl:if>
			<xsl:if test="ancestor::*[local-name() = 'sub']"><tag>sub</tag></xsl:if>
			<xsl:if test="ancestor::*[local-name() = 'sup']"><tag>sup</tag></xsl:if>
			<xsl:if test="ancestor::*[local-name() = 'tt']"><tag>tt</tag></xsl:if>
			<xsl:if test="ancestor::*[local-name() = 'keep-together_within-line']"><tag>keep-together_within-line</tag></xsl:if>
		</tags>
	</xsl:template><xsl:template name="getLang">
		<xsl:variable name="language_current" select="normalize-space(//*[local-name()='bibdata']//*[local-name()='language'][@current = 'true'])"/>
		<xsl:variable name="language">
			<xsl:choose>
				<xsl:when test="$language_current != ''">
					<xsl:value-of select="$language_current"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="language_current_2" select="normalize-space(xalan:nodeset($bibdata)//*[local-name()='bibdata']//*[local-name()='language'][@current = 'true'])"/>
					<xsl:choose>
						<xsl:when test="$language_current_2 != ''">
							<xsl:value-of select="$language_current_2"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="//*[local-name()='bibdata']//*[local-name()='language']"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:choose>
			<xsl:when test="$language = 'English'">en</xsl:when>
			<xsl:otherwise><xsl:value-of select="$language"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="capitalizeWords">
		<xsl:param name="str"/>
		<xsl:variable name="str2" select="translate($str, '-', ' ')"/>
		<xsl:choose>
			<xsl:when test="contains($str2, ' ')">
				<xsl:variable name="substr" select="substring-before($str2, ' ')"/>
				<xsl:call-template name="capitalize">
					<xsl:with-param name="str" select="$substr"/>
				</xsl:call-template>
				<xsl:text> </xsl:text>
				<xsl:call-template name="capitalizeWords">
					<xsl:with-param name="str" select="substring-after($str2, ' ')"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="capitalize">
					<xsl:with-param name="str" select="$str2"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="capitalize">
		<xsl:param name="str"/>
		<xsl:value-of select="java:toUpperCase(java:java.lang.String.new(substring($str, 1, 1)))"/>
		<xsl:value-of select="substring($str, 2)"/>		
	</xsl:template><xsl:template match="mathml:math">
		<xsl:variable name="isAdded" select="@added"/>
		<xsl:variable name="isDeleted" select="@deleted"/>
		
		<fo:inline xsl:use-attribute-sets="mathml-style">
		
			
			
			
			
			<xsl:call-template name="setTrackChangesStyles">
				<xsl:with-param name="isAdded" select="$isAdded"/>
				<xsl:with-param name="isDeleted" select="$isDeleted"/>
			</xsl:call-template>
			
			<xsl:if test="$add_math_as_text = 'true'">
				<!-- insert helper tag -->
				<!-- set unique font-size (fiction) -->
				<xsl:variable name="font-size_sfx"><xsl:number level="any"/></xsl:variable>
				<fo:inline color="white" font-size="1.{$font-size_sfx}pt" font-style="normal" font-weight="normal"><xsl:value-of select="$zero_width_space"/></fo:inline> <!-- zero width space -->
			</xsl:if>
			
			<xsl:variable name="mathml_content">
				<xsl:apply-templates select="." mode="mathml_actual_text"/>
			</xsl:variable>
			
			
					<xsl:call-template name="mathml_instream_object">
						<xsl:with-param name="mathml_content" select="$mathml_content"/>
					</xsl:call-template>
				
			
		</fo:inline>
	</xsl:template><xsl:template name="getMathml_comment_text">
		<xsl:variable name="comment_text_following" select="following-sibling::node()[1][self::comment()]"/>
		<xsl:variable name="comment_text_">
			<xsl:choose>
				<xsl:when test="normalize-space($comment_text_following) != ''">
					<xsl:value-of select="$comment_text_following"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="normalize-space(translate(.,' ⁢','  '))"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable> 
		<xsl:variable name="comment_text_2" select="java:org.metanorma.fop.Util.unescape($comment_text_)"/>
		<xsl:variable name="comment_text" select="java:trim(java:java.lang.String.new($comment_text_2))"/>
		<xsl:value-of select="$comment_text"/>
	</xsl:template><xsl:template name="mathml_instream_object">
		<xsl:param name="comment_text"/>
		<xsl:param name="mathml_content"/>
	
		<xsl:variable name="comment_text_">
			<xsl:choose>
				<xsl:when test="normalize-space($comment_text) != ''"><xsl:value-of select="$comment_text"/></xsl:when>
				<xsl:otherwise><xsl:call-template name="getMathml_comment_text"/></xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
	
		<xsl:variable name="mathml">
			<xsl:apply-templates select="." mode="mathml"/>
		</xsl:variable>
			
		<fo:instream-foreign-object fox:alt-text="Math">
					
			
			
			
			
			
			
			<!-- put MathML in Actual Text -->
			<!-- DEBUG: mathml_content=<xsl:value-of select="$mathml_content"/> -->
			<xsl:attribute name="fox:actual-text">
				<xsl:value-of select="$mathml_content"/>
			</xsl:attribute>
			
			<!-- <xsl:if test="$add_math_as_text = 'true'"> -->
			<xsl:if test="normalize-space($comment_text_) != ''">
			<!-- put Mathin Alternate Text -->
				<xsl:attribute name="fox:alt-text">
					<xsl:value-of select="$comment_text_"/>
				</xsl:attribute>
			</xsl:if>
			<!-- </xsl:if> -->
		
			<xsl:copy-of select="xalan:nodeset($mathml)"/>
			
		</fo:instream-foreign-object>
	</xsl:template><xsl:template match="mathml:*" mode="mathml_actual_text">
		<!-- <xsl:text>a+b</xsl:text> -->
		<xsl:text>&lt;</xsl:text>
		<xsl:value-of select="local-name()"/>
		<xsl:if test="local-name() = 'math'">
			<xsl:text> xmlns="http://www.w3.org/1998/Math/MathML"</xsl:text>
		</xsl:if>
		<xsl:for-each select="@*">
			<xsl:text> </xsl:text>
			<xsl:value-of select="local-name()"/>
			<xsl:text>="</xsl:text>
			<xsl:value-of select="."/>
			<xsl:text>"</xsl:text>
		</xsl:for-each>
		<xsl:text>&gt;</xsl:text>		
		<xsl:apply-templates mode="mathml_actual_text"/>		
		<xsl:text>&lt;/</xsl:text>
		<xsl:value-of select="local-name()"/>
		<xsl:text>&gt;</xsl:text>
	</xsl:template><xsl:template match="text()" mode="mathml_actual_text">
		<xsl:value-of select="normalize-space()"/>
	</xsl:template><xsl:template match="@*|node()" mode="mathml">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="mathml"/>
		</xsl:copy>
	</xsl:template><xsl:template match="mathml:mtext" mode="mathml">
		<xsl:copy>
			<!-- replace start and end spaces to non-break space -->
			<xsl:value-of select="java:replaceAll(java:java.lang.String.new(.),'(^ )|( $)',' ')"/>
		</xsl:copy>
	</xsl:template><xsl:template match="mathml:math/*[local-name()='unit']" mode="mathml"/><xsl:template match="mathml:math/*[local-name()='prefix']" mode="mathml"/><xsl:template match="mathml:math/*[local-name()='dimension']" mode="mathml"/><xsl:template match="mathml:math/*[local-name()='quantity']" mode="mathml"/><xsl:template match="mathml:mtd/mathml:mo/text()[. = '/']" mode="mathml">
		<xsl:value-of select="."/><xsl:value-of select="$zero_width_space"/>
	</xsl:template><xsl:template match="*[local-name()='localityStack']"/><xsl:template match="*[local-name()='link']" name="link">
		<xsl:variable name="target">
			<xsl:choose>
				<xsl:when test="@updatetype = 'true'">
					<xsl:value-of select="concat(normalize-space(@target), '.pdf')"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="normalize-space(@target)"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="target_text">
			<xsl:choose>
				<xsl:when test="starts-with(normalize-space(@target), 'mailto:')">
					<xsl:value-of select="normalize-space(substring-after(@target, 'mailto:'))"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="normalize-space(@target)"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<fo:inline xsl:use-attribute-sets="link-style">
			
			<xsl:if test="starts-with(normalize-space(@target), 'mailto:')">
				<xsl:attribute name="keep-together.within-line">always</xsl:attribute>
			</xsl:if>
			
			
			
			
			
			
			
			
			
			
			<xsl:choose>
				<xsl:when test="$target_text = ''">
					<xsl:apply-templates/>
				</xsl:when>
				<xsl:otherwise>
					<fo:basic-link external-destination="{$target}" fox:alt-text="{$target}">
						<xsl:choose>
							<xsl:when test="normalize-space(.) = ''">
								<xsl:call-template name="add-zero-spaces-link-java">
									<xsl:with-param name="text" select="$target_text"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:otherwise>
								<!-- output text from <link>text</link> -->
								<xsl:apply-templates/>
							</xsl:otherwise>
						</xsl:choose>
					</fo:basic-link>
				</xsl:otherwise>
			</xsl:choose>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='appendix']">
		<fo:block id="{@id}" xsl:use-attribute-sets="appendix-style">
			<xsl:apply-templates select="*[local-name()='title']"/>
		</fo:block>
		<xsl:apply-templates select="node()[not(local-name()='title')]"/>
	</xsl:template><xsl:template match="*[local-name()='appendix']/*[local-name()='title']" priority="2">
		<xsl:variable name="level">
			<xsl:call-template name="getLevel"/>
		</xsl:variable>
		<fo:inline role="H{$level}"><xsl:apply-templates/></fo:inline>
	</xsl:template><xsl:template match="*[local-name()='appendix']//*[local-name()='example']" priority="2">
		<fo:block id="{@id}" xsl:use-attribute-sets="appendix-example-style">			
			<xsl:apply-templates select="*[local-name()='name']"/>
		</fo:block>
		<xsl:apply-templates select="node()[not(local-name()='name')]"/>
	</xsl:template><xsl:template match="*[local-name() = 'callout']">		
		<fo:basic-link internal-destination="{@target}" fox:alt-text="{@target}">&lt;<xsl:apply-templates/>&gt;</fo:basic-link>
	</xsl:template><xsl:template match="*[local-name() = 'annotation']">
		<xsl:variable name="annotation-id" select="@id"/>
		<xsl:variable name="callout" select="//*[@target = $annotation-id]/text()"/>		
		<fo:block id="{$annotation-id}" white-space="nowrap">			
			<fo:inline>				
				<xsl:apply-templates>
					<xsl:with-param name="callout" select="concat('&lt;', $callout, '&gt; ')"/>
				</xsl:apply-templates>
			</fo:inline>
		</fo:block>		
	</xsl:template><xsl:template match="*[local-name() = 'annotation']/*[local-name() = 'p']">
		<xsl:param name="callout"/>
		<fo:inline id="{@id}">
			<!-- for first p in annotation, put <x> -->
			<xsl:if test="not(preceding-sibling::*[local-name() = 'p'])"><xsl:value-of select="$callout"/></xsl:if>
			<xsl:apply-templates/>
		</fo:inline>		
	</xsl:template><xsl:template match="*[local-name() = 'xref']">
		<fo:basic-link internal-destination="{@target}" fox:alt-text="{@target}" xsl:use-attribute-sets="xref-style">
			<xsl:if test="parent::*[local-name() = 'add']">
				<xsl:call-template name="append_add-style"/>
			</xsl:if>
			<xsl:apply-templates/>
		</fo:basic-link>
	</xsl:template><xsl:template match="*[local-name() = 'formula']" name="formula">
		<fo:block-container margin-left="0mm">
			<xsl:if test="parent::*[local-name() = 'note']">
				<xsl:attribute name="margin-left">
					<xsl:choose>
						<xsl:when test="not(ancestor::*[local-name() = 'table'])"><xsl:value-of select="$note-body-indent"/></xsl:when>
						<xsl:otherwise><xsl:value-of select="$note-body-indent-table"/></xsl:otherwise>
					</xsl:choose>
				</xsl:attribute>
				
			</xsl:if>
			<fo:block-container margin-left="0mm">	
				<fo:block id="{@id}">
					<xsl:apply-templates select="node()[not(local-name() = 'name')]"/> <!-- formula's number will be process in 'stem' template -->
				</fo:block>
			</fo:block-container>
		</fo:block-container>
	</xsl:template><xsl:template match="*[local-name() = 'formula']/*[local-name() = 'dt']/*[local-name() = 'stem']">
		<fo:inline>
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'admitted']/*[local-name() = 'stem']">
		<fo:inline>
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'formula']/*[local-name() = 'name']"> <!-- show in 'stem' template -->
		<xsl:if test="normalize-space() != ''">
			<xsl:text>(</xsl:text><xsl:apply-templates/><xsl:text>)</xsl:text>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'formula'][*[local-name() = 'name']]/*[local-name() = 'stem']">
		<fo:block xsl:use-attribute-sets="formula-style">
		
			
		
			<fo:table table-layout="fixed" width="100%">
				<fo:table-column column-width="95%"/>
				<fo:table-column column-width="5%"/>
				<fo:table-body>
					<fo:table-row>
						<fo:table-cell display-align="center">
							<fo:block xsl:use-attribute-sets="formula-stem-block-style">
							
								
									<xsl:if test="ancestor::*[local-name() ='annex']">
										<xsl:attribute name="text-align">left</xsl:attribute>
										<xsl:attribute name="margin-left">7mm</xsl:attribute>
									</xsl:if>
								
							
								<xsl:apply-templates/>
							</fo:block>
						</fo:table-cell>
						<fo:table-cell display-align="center">
							<fo:block xsl:use-attribute-sets="formula-stem-number-style">
								<xsl:apply-templates select="../*[local-name() = 'name']"/>
							</fo:block>
						</fo:table-cell>
					</fo:table-row>
				</fo:table-body>
			</fo:table>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'formula'][not(*[local-name() = 'name'])]/*[local-name() = 'stem']">
		<fo:block xsl:use-attribute-sets="formula-style">
			<fo:block xsl:use-attribute-sets="formula-stem-block-style">
				<xsl:apply-templates/>
			</fo:block>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'note']" name="note">
	
		<fo:block-container id="{@id}" xsl:use-attribute-sets="note-style">
		
			
			
			
			
			
			
			
		
			
				<xsl:if test="../@type = 'source' or ../@type = 'abbreviation'">
					<xsl:attribute name="border-top">0pt solid black</xsl:attribute>
				</xsl:if>
			
			
			<fo:block-container margin-left="0mm">
			
				
				
				
			
				
						<fo:block>
							
							
						
							
							
							
								<xsl:attribute name="font-size">10pt</xsl:attribute>
								<xsl:attribute name="text-indent">0</xsl:attribute>
								<xsl:attribute name="padding-top">1.5mm</xsl:attribute>							
								<xsl:if test="../@type = 'source' or ../@type = 'abbreviation'">
									<xsl:attribute name="font-size">9pt</xsl:attribute>
									<xsl:attribute name="text-align">justify</xsl:attribute>
									<xsl:attribute name="padding-top">0mm</xsl:attribute>					
								</xsl:if>
							
							
							<fo:inline xsl:use-attribute-sets="note-name-style">
							
								
								
								<!-- if 'p' contains all text in 'add' first and last elements in first p are 'add' -->
								<!-- <xsl:if test="*[not(local-name()='name')][1][node()[normalize-space() != ''][1][local-name() = 'add'] and node()[normalize-space() != ''][last()][local-name() = 'add']]"> -->
								<xsl:if test="*[not(local-name()='name')][1][count(node()[normalize-space() != '']) = 1 and *[local-name() = 'add']]">
									<xsl:call-template name="append_add-style"/>
								</xsl:if>
								
								
								<!-- if note contains only one element and first and last childs are `add` ace-tag, then move start ace-tag before NOTE's name-->
								<xsl:if test="count(*[not(local-name() = 'name')]) = 1 and *[not(local-name() = 'name')]/node()[last()][local-name() = 'add'][starts-with(text(), $ace_tag)]">
									<xsl:apply-templates select="*[not(local-name() = 'name')]/node()[1][local-name() = 'add'][starts-with(text(), $ace_tag)]">
										<xsl:with-param name="skip">false</xsl:with-param>
									</xsl:apply-templates> 
								</xsl:if>
								
								<xsl:apply-templates select="*[local-name() = 'name']"/>
								
							</fo:inline>
							
							<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
						</fo:block>
					
			</fo:block-container>
		</fo:block-container>
		
	</xsl:template><xsl:template match="*[local-name() = 'note']/*[local-name() = 'p']">
		<xsl:variable name="num"><xsl:number/></xsl:variable>
		<xsl:choose>
			<xsl:when test="$num = 1"> <!-- display first NOTE's paragraph in the same line with label NOTE -->
				<fo:inline xsl:use-attribute-sets="note-p-style">
					<xsl:apply-templates/>
				</fo:inline>
			</xsl:when>
			<xsl:otherwise>
				<fo:block xsl:use-attribute-sets="note-p-style">						
					<xsl:apply-templates/>
				</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name() = 'termnote']">
		<fo:block id="{@id}" xsl:use-attribute-sets="termnote-style">			
			
			<fo:inline xsl:use-attribute-sets="termnote-name-style">
			
				<xsl:if test="not(*[local-name() = 'name']/following-sibling::node()[1][self::text()][normalize-space()=''])">
					<xsl:attribute name="padding-right">1mm</xsl:attribute>
				</xsl:if>
			
				

				
				
				<!-- if 'p' contains all text in 'add' first and last elements in first p are 'add' -->
				<!-- <xsl:if test="*[not(local-name()='name')][1][node()[normalize-space() != ''][1][local-name() = 'add'] and node()[normalize-space() != ''][last()][local-name() = 'add']]"> -->
				<xsl:if test="*[not(local-name()='name')][1][count(node()[normalize-space() != '']) = 1 and *[local-name() = 'add']]">
					<xsl:call-template name="append_add-style"/>
				</xsl:if>
				
				<xsl:apply-templates select="*[local-name() = 'name']"/>
				
			</fo:inline>
			
			<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'note']/*[local-name() = 'name']">
		<xsl:param name="sfx"/>
		<xsl:variable name="suffix">
			<xsl:choose>
				<xsl:when test="$sfx != ''">
					<xsl:value-of select="$sfx"/>					
				</xsl:when>
				<xsl:otherwise>
					
					
						<xsl:text>:</xsl:text>
					
					
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:if test="normalize-space() != ''">
			<xsl:apply-templates/>
			<xsl:value-of select="$suffix"/>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'termnote']/*[local-name() = 'name']">
		<xsl:param name="sfx"/>
		<xsl:variable name="suffix">
			<xsl:choose>
				<xsl:when test="$sfx != ''">
					<xsl:value-of select="$sfx"/>					
				</xsl:when>
				<xsl:otherwise>
					
					
									
						<xsl:text> – </xsl:text>
					
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:if test="normalize-space() != ''">
			<xsl:apply-templates/>
			<xsl:value-of select="$suffix"/>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'termnote']/*[local-name() = 'p']">
		<xsl:variable name="num"><xsl:number/></xsl:variable>
		<xsl:choose>
			<xsl:when test="$num = 1"> <!-- first paragraph renders in the same line as titlenote name -->
				<fo:inline xsl:use-attribute-sets="termnote-p-style">
					<xsl:apply-templates/>
				</fo:inline>
			</xsl:when>
			<xsl:otherwise>
				<fo:block xsl:use-attribute-sets="termnote-p-style">						
					<xsl:apply-templates/>
				</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name() = 'terms']">
		<!-- <xsl:message>'terms' <xsl:number/> processing...</xsl:message> -->
		<fo:block id="{@id}">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'term']">
		<fo:block id="{@id}" xsl:use-attribute-sets="term-style">

			
			
			
			
			<xsl:if test="parent::*[local-name() = 'term'] and not(preceding-sibling::*[local-name() = 'term'])">
				
			</xsl:if>
			<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'term']/*[local-name() = 'name']">
		<xsl:if test="normalize-space() != ''">
			<xsl:variable name="level">
				<xsl:call-template name="getLevelTermName"/>
			</xsl:variable>
			<fo:inline role="H{$level}">
				<xsl:apply-templates/>
			</fo:inline>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'figure']" name="figure">
		<xsl:variable name="isAdded" select="@added"/>
		<xsl:variable name="isDeleted" select="@deleted"/>
		<fo:block-container id="{@id}">			
			
			<xsl:call-template name="setTrackChangesStyles">
				<xsl:with-param name="isAdded" select="$isAdded"/>
				<xsl:with-param name="isDeleted" select="$isDeleted"/>
			</xsl:call-template>
			
			
			
			<fo:block xsl:use-attribute-sets="figure-style">
				<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
			</fo:block>
			<xsl:call-template name="fn_display_figure"/>
			<xsl:for-each select="*[local-name() = 'note']">
				<xsl:call-template name="note"/>
			</xsl:for-each>
			
			
					<xsl:apply-templates select="*[local-name() = 'name']"/> <!-- show figure's name AFTER image -->
				
			
		</fo:block-container>
	</xsl:template><xsl:template match="*[local-name() = 'figure'][@class = 'pseudocode']">
		<fo:block id="{@id}">
			<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
		</fo:block>
		<xsl:apply-templates select="*[local-name() = 'name']"/>
	</xsl:template><xsl:template match="*[local-name() = 'figure'][@class = 'pseudocode']//*[local-name() = 'p']">
		<fo:block xsl:use-attribute-sets="figure-pseudocode-p-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'image']">
		<xsl:variable name="isAdded" select="../@added"/>
		<xsl:variable name="isDeleted" select="../@deleted"/>
		<xsl:choose>
			<xsl:when test="ancestor::*[local-name() = 'title']">
				<fo:inline padding-left="1mm" padding-right="1mm">
					<xsl:variable name="src">
						<xsl:call-template name="image_src"/>
					</xsl:variable>
					<fo:external-graphic src="{$src}" fox:alt-text="Image {@alt}" vertical-align="middle"/>
				</fo:inline>
			</xsl:when>
			<xsl:otherwise>
				<fo:block xsl:use-attribute-sets="image-style">
					
					
						<xsl:if test="ancestor::un:admonition">
							<xsl:attribute name="margin-top">-12mm</xsl:attribute>
							<xsl:attribute name="margin-bottom">6pt</xsl:attribute>
						</xsl:if>
					
					<xsl:variable name="src">
						<xsl:call-template name="image_src"/>
					</xsl:variable>
					
					<xsl:choose>
						<xsl:when test="$isDeleted = 'true'">
							<!-- enclose in svg -->
							<fo:instream-foreign-object fox:alt-text="Image {@alt}">
								<xsl:attribute name="width">100%</xsl:attribute>
								<xsl:attribute name="content-height">100%</xsl:attribute>
								<xsl:attribute name="content-width">scale-down-to-fit</xsl:attribute>
								<xsl:attribute name="scaling">uniform</xsl:attribute>
								
								
									<xsl:apply-templates select="." mode="cross_image"/>
									
							</fo:instream-foreign-object>
						</xsl:when>
						<xsl:otherwise>
							<fo:external-graphic src="{$src}" fox:alt-text="Image {@alt}" xsl:use-attribute-sets="image-graphic-style">
								<xsl:if test="not(@mimetype = 'image/svg+xml') and ../*[local-name() = 'name'] and not(ancestor::*[local-name() = 'table'])">
										
									<xsl:variable name="img_src">
										<xsl:choose>
											<xsl:when test="not(starts-with(@src, 'data:'))"><xsl:value-of select="concat($basepath, @src)"/></xsl:when>
											<xsl:otherwise><xsl:value-of select="@src"/></xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									
									<xsl:variable name="scale" select="java:org.metanorma.fop.Util.getImageScale($img_src, $width_effective, $height_effective)"/>
									<xsl:if test="number($scale) &lt; 100">
										<xsl:attribute name="content-width"><xsl:value-of select="$scale"/>%</xsl:attribute>
									</xsl:if>
								
								</xsl:if>
							
							</fo:external-graphic>
						</xsl:otherwise>
					</xsl:choose>
					
				</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="image_src">
		<xsl:choose>
			<xsl:when test="@mimetype = 'image/svg+xml' and $images/images/image[@id = current()/@id]">
				<xsl:value-of select="$images/images/image[@id = current()/@id]/@src"/>
			</xsl:when>
			<xsl:when test="not(starts-with(@src, 'data:'))">
				<xsl:value-of select="concat('url(file:',$basepath, @src, ')')"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="@src"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name() = 'image']" mode="cross_image">
		<xsl:choose>
			<xsl:when test="@mimetype = 'image/svg+xml' and $images/images/image[@id = current()/@id]">
				<xsl:variable name="src">
					<xsl:value-of select="$images/images/image[@id = current()/@id]/@src"/>
				</xsl:variable>
				<xsl:variable name="width" select="document($src)/@width"/>
				<xsl:variable name="height" select="document($src)/@height"/>
				<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" style="enable-background:new 0 0 595.28 841.89;" height="{$height}" width="{$width}" viewBox="0 0 {$width} {$height}" y="0px" x="0px" id="Layer_1" version="1.1">
					<image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{$src}" style="overflow:visible;"/>
				</svg>
			</xsl:when>
			<xsl:when test="not(starts-with(@src, 'data:'))">
				<xsl:variable name="src">
					<xsl:value-of select="concat('url(file:',$basepath, @src, ')')"/>
				</xsl:variable>
				<xsl:variable name="file" select="java:java.io.File.new(@src)"/>
				<xsl:variable name="bufferedImage" select="java:javax.imageio.ImageIO.read($file)"/>
				<xsl:variable name="width" select="java:getWidth($bufferedImage)"/>
				<xsl:variable name="height" select="java:getHeight($bufferedImage)"/>
				<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" style="enable-background:new 0 0 595.28 841.89;" height="{$height}" width="{$width}" viewBox="0 0 {$width} {$height}" y="0px" x="0px" id="Layer_1" version="1.1">
					<image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{$src}" style="overflow:visible;"/>
				</svg>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="base64String" select="substring-after(@src, 'base64,')"/>
				<xsl:variable name="decoder" select="java:java.util.Base64.getDecoder()"/>
				<xsl:variable name="fileContent" select="java:decode($decoder, $base64String)"/>
				<xsl:variable name="bis" select="java:java.io.ByteArrayInputStream.new($fileContent)"/>
				<xsl:variable name="bufferedImage" select="java:javax.imageio.ImageIO.read($bis)"/>
				<xsl:variable name="width" select="java:getWidth($bufferedImage)"/>
				<xsl:variable name="height" select="java:getHeight($bufferedImage)"/>
				<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" style="enable-background:new 0 0 595.28 841.89;" height="{$height}" width="{$width}" viewBox="0 0 {$width} {$height}" y="0px" x="0px" id="Layer_1" version="1.1">
					<image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{@src}" height="{$height}" width="{$width}" style="overflow:visible;"/>
					<xsl:call-template name="svg_cross">
						<xsl:with-param name="width" select="$width"/>
						<xsl:with-param name="height" select="$height"/>
					</xsl:call-template>
				</svg>
			</xsl:otherwise>
		</xsl:choose>
		
	</xsl:template><xsl:template name="svg_cross">
		<xsl:param name="width"/>
		<xsl:param name="height"/>
		<line xmlns="http://www.w3.org/2000/svg" x1="0" y1="0" x2="{$width}" y2="{$height}" style="stroke: rgb(255, 0, 0); stroke-width:4px; "/>
		<line xmlns="http://www.w3.org/2000/svg" x1="0" y1="{$height}" x2="{$width}" y2="0" style="stroke: rgb(255, 0, 0); stroke-width:4px; "/>
	</xsl:template><xsl:variable name="figure_name_height">14</xsl:variable><xsl:variable name="width_effective" select="$pageWidth - $marginLeftRight1 - $marginLeftRight2"/><xsl:variable name="height_effective" select="$pageHeight - $marginTop - $marginBottom - $figure_name_height"/><xsl:variable name="image_dpi" select="96"/><xsl:variable name="width_effective_px" select="$width_effective div 25.4 * $image_dpi"/><xsl:variable name="height_effective_px" select="$height_effective div 25.4 * $image_dpi"/><xsl:template match="*[local-name() = 'figure'][not(*[local-name() = 'image']) and *[local-name() = 'svg']]/*[local-name() = 'name']/*[local-name() = 'bookmark']" priority="2"/><xsl:template match="*[local-name() = 'figure'][not(*[local-name() = 'image'])]/*[local-name() = 'svg']" priority="2" name="image_svg">
		<xsl:param name="name"/>
		
		<xsl:variable name="svg_content">
			<xsl:apply-templates select="." mode="svg_update"/>
		</xsl:variable>
		
		<xsl:variable name="alt-text">
			<xsl:choose>
				<xsl:when test="normalize-space(../*[local-name() = 'name']) != ''">
					<xsl:value-of select="../*[local-name() = 'name']"/>
				</xsl:when>
				<xsl:when test="normalize-space($name) != ''">
					<xsl:value-of select="$name"/>
				</xsl:when>
				<xsl:otherwise>Figure</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:choose>
			<xsl:when test=".//*[local-name() = 'a'][*[local-name() = 'rect'] or *[local-name() = 'polygon'] or *[local-name() = 'circle'] or *[local-name() = 'ellipse']]">
				<fo:block>
					<xsl:variable name="width" select="@width"/>
					<xsl:variable name="height" select="@height"/>
					
					<xsl:variable name="scale_x">
						<xsl:choose>
							<xsl:when test="$width &gt; $width_effective_px">
								<xsl:value-of select="$width_effective_px div $width"/>
							</xsl:when>
							<xsl:otherwise>1</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					
					<xsl:variable name="scale_y">
						<xsl:choose>
							<xsl:when test="$height * $scale_x &gt; $height_effective_px">
								<xsl:value-of select="$height_effective_px div ($height * $scale_x)"/>
							</xsl:when>
							<xsl:otherwise>1</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					
					<xsl:variable name="scale">
						<xsl:choose>
							<xsl:when test="$scale_y != 1">
								<xsl:value-of select="$scale_x * $scale_y"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="$scale_x"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					 
					<xsl:variable name="width_scale" select="round($width * $scale)"/>
					<xsl:variable name="height_scale" select="round($height * $scale)"/>
					
					<fo:table table-layout="fixed" width="100%">
						<fo:table-column column-width="proportional-column-width(1)"/>
						<fo:table-column column-width="{$width_scale}px"/>
						<fo:table-column column-width="proportional-column-width(1)"/>
						<fo:table-body>
							<fo:table-row>
								<fo:table-cell column-number="2">
									<fo:block>
										<fo:block-container width="{$width_scale}px" height="{$height_scale}px">
											<xsl:if test="../*[local-name() = 'name']/*[local-name() = 'bookmark']">
												<fo:block line-height="0" font-size="0">
													<xsl:for-each select="../*[local-name() = 'name']/*[local-name() = 'bookmark']">
														<xsl:call-template name="bookmark"/>
													</xsl:for-each>
												</fo:block>
											</xsl:if>
											<fo:block text-depth="0" line-height="0" font-size="0">

												<fo:instream-foreign-object fox:alt-text="{$alt-text}">
													<xsl:attribute name="width">100%</xsl:attribute>
													<xsl:attribute name="content-height">100%</xsl:attribute>
													<xsl:attribute name="content-width">scale-down-to-fit</xsl:attribute>
													<xsl:attribute name="scaling">uniform</xsl:attribute>

													<xsl:apply-templates select="xalan:nodeset($svg_content)" mode="svg_remove_a"/>
												</fo:instream-foreign-object>
											</fo:block>
											
											<xsl:apply-templates select=".//*[local-name() = 'a'][*[local-name() = 'rect'] or *[local-name() = 'polygon'] or *[local-name() = 'circle'] or *[local-name() = 'ellipse']]" mode="svg_imagemap_links">
												<xsl:with-param name="scale" select="$scale"/>
											</xsl:apply-templates>
										</fo:block-container>
									</fo:block>
								</fo:table-cell>
							</fo:table-row>
						</fo:table-body>
					</fo:table>
				</fo:block>
				
			</xsl:when>
			<xsl:otherwise>
				<fo:block xsl:use-attribute-sets="image-style">
					<fo:instream-foreign-object fox:alt-text="{$alt-text}">
						<xsl:attribute name="width">100%</xsl:attribute>
						<xsl:attribute name="content-height">100%</xsl:attribute>
						<xsl:attribute name="content-width">scale-down-to-fit</xsl:attribute>
						<xsl:variable name="svg_width" select="xalan:nodeset($svg_content)/*/@width"/>
						<xsl:variable name="svg_height" select="xalan:nodeset($svg_content)/*/@height"/>
						<!-- effective height 297 - 27.4 - 13 =  256.6 -->
						<!-- effective width 210 - 12.5 - 25 = 172.5 -->
						<!-- effective height / width = 1.48, 1.4 - with title -->
						<xsl:if test="$svg_height &gt; ($svg_width * 1.4)"> <!-- for images with big height -->
							<xsl:variable name="width" select="(($svg_width * 1.4) div $svg_height) * 100"/>
							<xsl:attribute name="width"><xsl:value-of select="$width"/>%</xsl:attribute>
						</xsl:if>
						<xsl:attribute name="scaling">uniform</xsl:attribute>
						<xsl:copy-of select="$svg_content"/>
					</fo:instream-foreign-object>
				</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="@*|node()" mode="svg_update">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="svg_update"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'image']/@href" mode="svg_update">
		<xsl:attribute name="href" namespace="http://www.w3.org/1999/xlink">
			<xsl:value-of select="."/>
		</xsl:attribute>
	</xsl:template><xsl:template match="*[local-name() = 'svg'][not(@width and @height)]" mode="svg_update">
		<xsl:copy>
			<xsl:apply-templates select="@*" mode="svg_update"/>
			<xsl:variable name="viewbox_">
				<xsl:call-template name="split">
					<xsl:with-param name="pText" select="@viewBox"/>
					<xsl:with-param name="sep" select="' '"/>
				</xsl:call-template>
			</xsl:variable>
			<xsl:variable name="viewbox" select="xalan:nodeset($viewbox_)"/>
			<xsl:variable name="width" select="normalize-space($viewbox//item[3])"/>
			<xsl:variable name="height" select="normalize-space($viewbox//item[4])"/>
			
			<xsl:attribute name="width">
				<xsl:choose>
					<xsl:when test="$width != ''">
						<xsl:value-of select="round($width)"/>
					</xsl:when>
					<xsl:otherwise>400</xsl:otherwise> <!-- default width -->
				</xsl:choose>
			</xsl:attribute>
			<xsl:attribute name="height">
				<xsl:choose>
					<xsl:when test="$height != ''">
						<xsl:value-of select="round($height)"/>
					</xsl:when>
					<xsl:otherwise>400</xsl:otherwise> <!-- default height -->
				</xsl:choose>
			</xsl:attribute>
			
			<xsl:apply-templates mode="svg_update"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'figure']/*[local-name() = 'image'][*[local-name() = 'svg']]" priority="3">
		<xsl:variable name="name" select="ancestor::*[local-name() = 'figure']/*[local-name() = 'name']"/>
		<xsl:for-each select="*[local-name() = 'svg']">
			<xsl:call-template name="image_svg">
				<xsl:with-param name="name" select="$name"/>
			</xsl:call-template>
		</xsl:for-each>
	</xsl:template><xsl:template match="*[local-name() = 'figure']/*[local-name() = 'image'][@mimetype = 'image/svg+xml' and @src[not(starts-with(., 'data:image/'))]]" priority="2">
		<xsl:variable name="svg_content" select="document(@src)"/>
		<xsl:variable name="name" select="ancestor::*[local-name() = 'figure']/*[local-name() = 'name']"/>
		<xsl:for-each select="xalan:nodeset($svg_content)/node()">
			<xsl:call-template name="image_svg">
				<xsl:with-param name="name" select="$name"/>
			</xsl:call-template>
		</xsl:for-each>
	</xsl:template><xsl:template match="@*|node()" mode="svg_remove_a">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="svg_remove_a"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'a']" mode="svg_remove_a">
		<xsl:apply-templates mode="svg_remove_a"/>
	</xsl:template><xsl:template match="*[local-name() = 'a']" mode="svg_imagemap_links">
		<xsl:param name="scale"/>
		<xsl:variable name="dest">
			<xsl:choose>
				<xsl:when test="starts-with(@href, '#')">
					<xsl:value-of select="substring-after(@href, '#')"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="@href"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="./*[local-name() = 'rect']">
			<xsl:call-template name="insertSVGMapLink">
				<xsl:with-param name="left" select="floor(@x * $scale)"/>
				<xsl:with-param name="top" select="floor(@y * $scale)"/>
				<xsl:with-param name="width" select="floor(@width * $scale)"/>
				<xsl:with-param name="height" select="floor(@height * $scale)"/>
				<xsl:with-param name="dest" select="$dest"/>
			</xsl:call-template>
		</xsl:for-each>
		
		<xsl:for-each select="./*[local-name() = 'polygon']">
			<xsl:variable name="points">
				<xsl:call-template name="split">
					<xsl:with-param name="pText" select="@points"/>
				</xsl:call-template>
			</xsl:variable>
			<xsl:variable name="x_coords">
				<xsl:for-each select="xalan:nodeset($points)//item[position() mod 2 = 1]">
					<xsl:sort select="." data-type="number"/>
					<x><xsl:value-of select="."/></x>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="y_coords">
				<xsl:for-each select="xalan:nodeset($points)//item[position() mod 2 = 0]">
					<xsl:sort select="." data-type="number"/>
					<y><xsl:value-of select="."/></y>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="x" select="xalan:nodeset($x_coords)//x[1]"/>
			<xsl:variable name="y" select="xalan:nodeset($y_coords)//y[1]"/>
			<xsl:variable name="width" select="xalan:nodeset($x_coords)//x[last()] - $x"/>
			<xsl:variable name="height" select="xalan:nodeset($y_coords)//y[last()] - $y"/>
			<xsl:call-template name="insertSVGMapLink">
				<xsl:with-param name="left" select="floor($x * $scale)"/>
				<xsl:with-param name="top" select="floor($y * $scale)"/>
				<xsl:with-param name="width" select="floor($width * $scale)"/>
				<xsl:with-param name="height" select="floor($height * $scale)"/>
				<xsl:with-param name="dest" select="$dest"/>
			</xsl:call-template>
		</xsl:for-each>
		
		<xsl:for-each select="./*[local-name() = 'circle']">
			<xsl:call-template name="insertSVGMapLink">
				<xsl:with-param name="left" select="floor((@cx - @r) * $scale)"/>
				<xsl:with-param name="top" select="floor((@cy - @r) * $scale)"/>
				<xsl:with-param name="width" select="floor(@r * 2 * $scale)"/>
				<xsl:with-param name="height" select="floor(@r * 2 * $scale)"/>
				<xsl:with-param name="dest" select="$dest"/>
			</xsl:call-template>
		</xsl:for-each>
		<xsl:for-each select="./*[local-name() = 'ellipse']">
			<xsl:call-template name="insertSVGMapLink">
				<xsl:with-param name="left" select="floor((@cx - @rx) * $scale)"/>
				<xsl:with-param name="top" select="floor((@cy - @ry) * $scale)"/>
				<xsl:with-param name="width" select="floor(@rx * 2 * $scale)"/>
				<xsl:with-param name="height" select="floor(@ry * 2 * $scale)"/>
				<xsl:with-param name="dest" select="$dest"/>
			</xsl:call-template>
		</xsl:for-each>
	</xsl:template><xsl:template name="insertSVGMapLink">
		<xsl:param name="left"/>
		<xsl:param name="top"/>
		<xsl:param name="width"/>
		<xsl:param name="height"/>
		<xsl:param name="dest"/>
		<fo:block-container position="absolute" left="{$left}px" top="{$top}px" width="{$width}px" height="{$height}px">
		 <fo:block font-size="1pt">
			<fo:basic-link internal-destination="{$dest}" fox:alt-text="svg link">
				<fo:inline-container inline-progression-dimension="100%">
					<fo:block-container height="{$height - 1}px" width="100%">
						<!-- DEBUG <xsl:if test="local-name()='polygon'">
							<xsl:attribute name="background-color">magenta</xsl:attribute>
						</xsl:if> -->
					<fo:block> </fo:block></fo:block-container>
				</fo:inline-container>
			</fo:basic-link>
		 </fo:block>
	  </fo:block-container>
	</xsl:template><xsl:template match="*[local-name() = 'emf']"/><xsl:template match="*[local-name() = 'figure']/*[local-name() = 'name'] |                *[local-name() = 'table']/*[local-name() = 'name'] |               *[local-name() = 'permission']/*[local-name() = 'name'] |               *[local-name() = 'recommendation']/*[local-name() = 'name'] |               *[local-name() = 'requirement']/*[local-name() = 'name']" mode="contents">		
		<xsl:apply-templates mode="contents"/>
		<xsl:text> </xsl:text>
	</xsl:template><xsl:template match="*[local-name() = 'figure']/*[local-name() = 'name'] |                *[local-name() = 'table']/*[local-name() = 'name'] |               *[local-name() = 'permission']/*[local-name() = 'name'] |               *[local-name() = 'recommendation']/*[local-name() = 'name'] |               *[local-name() = 'requirement']/*[local-name() = 'name'] |               *[local-name() = 'sourcecode']/*[local-name() = 'name']" mode="bookmarks">		
		<xsl:apply-templates mode="bookmarks"/>
		<xsl:text> </xsl:text>
	</xsl:template><xsl:template match="*[local-name() = 'figure' or local-name() = 'table' or local-name() = 'permission' or local-name() = 'recommendation' or local-name() = 'requirement']/*[local-name() = 'name']/text()" mode="contents" priority="2">
		<xsl:value-of select="."/>
	</xsl:template><xsl:template match="*[local-name() = 'figure' or local-name() = 'table' or local-name() = 'permission' or local-name() = 'recommendation' or local-name() = 'requirement' or local-name() = 'sourcecode']/*[local-name() = 'name']//text()" mode="bookmarks" priority="2">
		<xsl:value-of select="."/>
	</xsl:template><xsl:template match="node()" mode="contents">
		<xsl:apply-templates mode="contents"/>
	</xsl:template><xsl:template match="*[local-name() = 'preface' or local-name() = 'sections']/*[local-name() = 'p'][@type = 'section-title' and not(@displayorder)]" priority="3" mode="contents"/><xsl:template match="*[local-name() = 'p'][@type = 'section-title' and not(@displayorder)]" mode="contents_no_displayorder">
		<xsl:call-template name="contents_section-title"/>
	</xsl:template><xsl:template match="*[local-name() = 'p'][@type = 'section-title']" mode="contents_in_clause">
		<xsl:call-template name="contents_section-title"/>
	</xsl:template><xsl:template match="*[local-name() = 'clause']/*[local-name() = 'p'][@type = 'section-title' and (@depth != ../*[local-name() = 'title']/@depth or ../*[local-name() = 'title']/@depth = 1)]" priority="3" mode="contents"/><xsl:template match="*[local-name() = 'p'][@type = 'floating-title' or @type = 'section-title']" priority="2" name="contents_section-title" mode="contents">
		<xsl:variable name="level">
			<xsl:call-template name="getLevel">
				<xsl:with-param name="depth" select="@depth"/>
			</xsl:call-template>
		</xsl:variable>
		
		<xsl:variable name="section">
			<xsl:choose>
				<xsl:when test="@type = 'section-title'"/>
				<xsl:otherwise>
					<xsl:value-of select="*[local-name() = 'tab'][1]/preceding-sibling::node()"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:variable name="type"><xsl:value-of select="@type"/></xsl:variable>
			
		<xsl:variable name="display">
			<xsl:choose>
				<xsl:when test="normalize-space(@id) = ''">false</xsl:when>
				<xsl:when test="$level &lt;= $toc_level">true</xsl:when>
				<xsl:otherwise>false</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:variable name="skip">false</xsl:variable>

		<xsl:if test="$skip = 'false'">		
		
			<xsl:variable name="title">
				<xsl:choose>
					<xsl:when test="*[local-name() = 'tab']">
						<xsl:choose>
							<xsl:when test="@type = 'section-title'">
								<xsl:value-of select="*[local-name() = 'tab'][1]/preceding-sibling::node()"/>
								<xsl:text>: </xsl:text>
								<xsl:copy-of select="*[local-name() = 'tab'][1]/following-sibling::node()"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:copy-of select="*[local-name() = 'tab'][1]/following-sibling::node()"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<xsl:copy-of select="node()"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			
			<xsl:variable name="root">
				<xsl:if test="ancestor-or-self::*[local-name() = 'preface']">preface</xsl:if>
				<xsl:if test="ancestor-or-self::*[local-name() = 'annex']">annex</xsl:if>
			</xsl:variable>
			
			<item id="{@id}" level="{$level}" section="{$section}" type="{$type}" root="{$root}" display="{$display}">
				<title>
					<xsl:apply-templates select="xalan:nodeset($title)" mode="contents_item"/>
				</title>
			</item>
		</xsl:if>
	</xsl:template><xsl:template match="node()" mode="bookmarks">
		<xsl:apply-templates mode="bookmarks"/>
	</xsl:template><xsl:template match="*[local-name() = 'title' or local-name() = 'name']//*[local-name() = 'stem']" mode="contents">
		<xsl:apply-templates select="."/>
	</xsl:template><xsl:template match="*[local-name() = 'references'][@hidden='true']" mode="contents" priority="3"/><xsl:template match="*[local-name() = 'references']/*[local-name() = 'bibitem']" mode="contents"/><xsl:template match="*[local-name() = 'span']" mode="contents">
		<xsl:apply-templates mode="contents"/>
	</xsl:template><xsl:template match="*[local-name() = 'stem']" mode="bookmarks">
		<xsl:apply-templates mode="bookmarks"/>
	</xsl:template><xsl:template match="*[local-name() = 'span']" mode="bookmarks">
		<xsl:apply-templates mode="bookmarks"/>
	</xsl:template><xsl:template name="addBookmarks">
		<xsl:param name="contents"/>
		<xsl:variable name="contents_nodes" select="xalan:nodeset($contents)"/>
		<xsl:if test="$contents_nodes//item">
			<fo:bookmark-tree>
				<xsl:choose>
					<xsl:when test="$contents_nodes/doc">
						<xsl:choose>
							<xsl:when test="count($contents_nodes/doc) &gt; 1">
								<xsl:for-each select="$contents_nodes/doc">
									<fo:bookmark internal-destination="{contents/item[1]/@id}" starting-state="hide">
										<xsl:if test="@bundle = 'true'">
											<xsl:attribute name="internal-destination"><xsl:value-of select="@firstpage_id"/></xsl:attribute>
										</xsl:if>
										<fo:bookmark-title>
											<xsl:choose>
												<xsl:when test="not(normalize-space(@bundle) = 'true')"> <!-- 'bundle' means several different documents (not language versions) in one xml -->
													<xsl:variable name="bookmark-title_">
														<xsl:call-template name="getLangVersion">
															<xsl:with-param name="lang" select="@lang"/>
															<xsl:with-param name="doctype" select="@doctype"/>
															<xsl:with-param name="title" select="@title-part"/>
														</xsl:call-template>
													</xsl:variable>
													<xsl:choose>
														<xsl:when test="normalize-space($bookmark-title_) != ''">
															<xsl:value-of select="normalize-space($bookmark-title_)"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:choose>
																<xsl:when test="@lang = 'en'">English</xsl:when>
																<xsl:when test="@lang = 'fr'">Français</xsl:when>
																<xsl:when test="@lang = 'de'">Deutsche</xsl:when>
																<xsl:otherwise><xsl:value-of select="@lang"/> version</xsl:otherwise>
															</xsl:choose>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="@title-part"/>
												</xsl:otherwise>
											</xsl:choose>
										</fo:bookmark-title>
										
										<xsl:apply-templates select="contents/item" mode="bookmark"/>
										
										<xsl:call-template name="insertFigureBookmarks">
											<xsl:with-param name="contents" select="contents"/>
										</xsl:call-template>
										
										<xsl:call-template name="insertTableBookmarks">
											<xsl:with-param name="contents" select="contents"/>
											<xsl:with-param name="lang" select="@lang"/>
										</xsl:call-template>
										
									</fo:bookmark>
									
								</xsl:for-each>
							</xsl:when>
							<xsl:otherwise>
								<xsl:for-each select="$contents_nodes/doc">
								
									<xsl:apply-templates select="contents/item" mode="bookmark"/>
									
									<xsl:call-template name="insertFigureBookmarks">
										<xsl:with-param name="contents" select="contents"/>
									</xsl:call-template>
										
									<xsl:call-template name="insertTableBookmarks">
										<xsl:with-param name="contents" select="contents"/>
										<xsl:with-param name="lang" select="@lang"/>
									</xsl:call-template>
									
								</xsl:for-each>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<xsl:apply-templates select="$contents_nodes/contents/item" mode="bookmark"/>				
						
						<xsl:call-template name="insertFigureBookmarks">
							<xsl:with-param name="contents" select="$contents_nodes/contents"/>
						</xsl:call-template>
							
						<xsl:call-template name="insertTableBookmarks">
							<xsl:with-param name="contents" select="$contents_nodes/contents"/>
							<xsl:with-param name="lang" select="@lang"/>
						</xsl:call-template>
						
					</xsl:otherwise>
				</xsl:choose>
				
				 
				
				
				
				
				 
				
			</fo:bookmark-tree>
		</xsl:if>
	</xsl:template><xsl:template name="insertFigureBookmarks">
		<xsl:param name="contents"/>
		<xsl:variable name="contents_nodes" select="xalan:nodeset($contents)"/>
		<xsl:if test="$contents_nodes/figure">
			<fo:bookmark internal-destination="{$contents_nodes/figure[1]/@id}" starting-state="hide">
				<fo:bookmark-title>Figures</fo:bookmark-title>
				<xsl:for-each select="$contents_nodes/figure">
					<fo:bookmark internal-destination="{@id}">
						<fo:bookmark-title>
							<xsl:value-of select="normalize-space(title)"/>
						</fo:bookmark-title>
					</fo:bookmark>
				</xsl:for-each>
			</fo:bookmark>	
		</xsl:if>
		
		
				<xsl:if test="$contents_nodes//figures/figure">
					<fo:bookmark internal-destination="empty_bookmark" starting-state="hide">
					
						
						
						<xsl:variable name="bookmark-title">
							
									<xsl:value-of select="$title-list-figures"/>
								
						</xsl:variable>
						<fo:bookmark-title><xsl:value-of select="normalize-space($bookmark-title)"/></fo:bookmark-title>
						<xsl:for-each select="$contents_nodes//figures/figure">
							<fo:bookmark internal-destination="{@id}">
								<fo:bookmark-title><xsl:value-of select="normalize-space(.)"/></fo:bookmark-title>
							</fo:bookmark>
						</xsl:for-each>
					</fo:bookmark>
				</xsl:if>
			
	</xsl:template><xsl:template name="insertTableBookmarks">
		<xsl:param name="contents"/>
		<xsl:param name="lang"/>
		<xsl:variable name="contents_nodes" select="xalan:nodeset($contents)"/>
		<xsl:if test="$contents_nodes/table">
			<fo:bookmark internal-destination="{$contents_nodes/table[1]/@id}" starting-state="hide">
				<fo:bookmark-title>
					<xsl:choose>
						<xsl:when test="$lang = 'fr'">Tableaux</xsl:when>
						<xsl:otherwise>Tables</xsl:otherwise>
					</xsl:choose>
				</fo:bookmark-title>
				<xsl:for-each select="$contents_nodes/table">
					<fo:bookmark internal-destination="{@id}">
						<fo:bookmark-title>
							<xsl:value-of select="normalize-space(title)"/>
						</fo:bookmark-title>
					</fo:bookmark>
				</xsl:for-each>
			</fo:bookmark>	
		</xsl:if>
		
		
				<xsl:if test="$contents_nodes//tables/table">
					<fo:bookmark internal-destination="empty_bookmark" starting-state="hide">
						
						
						
						<xsl:variable name="bookmark-title">
							
									<xsl:value-of select="$title-list-tables"/>
								
						</xsl:variable>
						
						<fo:bookmark-title><xsl:value-of select="$bookmark-title"/></fo:bookmark-title>
						
						<xsl:for-each select="$contents_nodes//tables/table">
							<fo:bookmark internal-destination="{@id}">
								<fo:bookmark-title><xsl:value-of select="normalize-space(.)"/></fo:bookmark-title>
							</fo:bookmark>
						</xsl:for-each>
					</fo:bookmark>
				</xsl:if>
			
	</xsl:template><xsl:template name="getLangVersion">
		<xsl:param name="lang"/>
		<xsl:param name="doctype" select="''"/>
		<xsl:param name="title" select="''"/>
		<xsl:choose>
			<xsl:when test="$lang = 'en'">
				
				
				</xsl:when>
			<xsl:when test="$lang = 'fr'">
				
				
			</xsl:when>
			<xsl:when test="$lang = 'de'">Deutsche</xsl:when>
			<xsl:otherwise><xsl:value-of select="$lang"/> version</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="item" mode="bookmark">
		<xsl:choose>
			<xsl:when test="@id != ''">
				<fo:bookmark internal-destination="{@id}" starting-state="hide">
					<fo:bookmark-title>
						<xsl:if test="@section != ''">
							<xsl:value-of select="@section"/> 
							<xsl:text> </xsl:text>
						</xsl:if>
						<xsl:value-of select="normalize-space(title)"/>
					</fo:bookmark-title>
					<xsl:apply-templates mode="bookmark"/>
				</fo:bookmark>
			</xsl:when>
			<xsl:otherwise>
				<xsl:apply-templates mode="bookmark"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="title" mode="bookmark"/><xsl:template match="text()" mode="bookmark"/><xsl:template match="*[local-name() = 'figure']/*[local-name() = 'name'] |         *[local-name() = 'image']/*[local-name() = 'name']">
		<xsl:if test="normalize-space() != ''">			
			<fo:block xsl:use-attribute-sets="figure-name-style">
				
				
				
				
				
				<xsl:apply-templates/>
			</fo:block>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'figure']/*[local-name() = 'fn']" priority="2"/><xsl:template match="*[local-name() = 'figure']/*[local-name() = 'note']"/><xsl:template match="*[local-name() = 'title']" mode="contents_item">
		<xsl:param name="mode">bookmarks</xsl:param>
		<xsl:apply-templates mode="contents_item">
			<xsl:with-param name="mode" select="$mode"/>
		</xsl:apply-templates>
		<!-- <xsl:text> </xsl:text> -->
	</xsl:template><xsl:template name="getSection">
		<xsl:value-of select="*[local-name() = 'title']/*[local-name() = 'tab'][1]/preceding-sibling::node()"/>
	</xsl:template><xsl:template name="getName">
		<xsl:choose>
			<xsl:when test="*[local-name() = 'title']/*[local-name() = 'tab']">
				<xsl:copy-of select="*[local-name() = 'title']/*[local-name() = 'tab'][1]/following-sibling::node()"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy-of select="*[local-name() = 'title']/node()"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="insertTitleAsListItem">
		<xsl:param name="provisional-distance-between-starts" select="'9.5mm'"/>
		<xsl:variable name="section">						
			<xsl:for-each select="..">
				<xsl:call-template name="getSection"/>
			</xsl:for-each>
		</xsl:variable>							
		<fo:list-block provisional-distance-between-starts="{$provisional-distance-between-starts}">						
			<fo:list-item>
				<fo:list-item-label end-indent="label-end()">
					<fo:block>
						<xsl:value-of select="$section"/>
					</fo:block>
				</fo:list-item-label>
				<fo:list-item-body start-indent="body-start()">
					<fo:block>						
						<xsl:choose>
							<xsl:when test="*[local-name() = 'tab']">
								<xsl:apply-templates select="*[local-name() = 'tab'][1]/following-sibling::node()"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:apply-templates/>
								<xsl:apply-templates select="following-sibling::*[1][local-name() = 'variant-title'][@type = 'sub']" mode="subtitle"/>
							</xsl:otherwise>
						</xsl:choose>
					</fo:block>
				</fo:list-item-body>
			</fo:list-item>
		</fo:list-block>
	</xsl:template><xsl:template name="extractSection">
		<xsl:value-of select="*[local-name() = 'tab'][1]/preceding-sibling::node()"/>
	</xsl:template><xsl:template name="extractTitle">
		<xsl:choose>
				<xsl:when test="*[local-name() = 'tab']">
					<xsl:apply-templates select="*[local-name() = 'tab'][1]/following-sibling::node()"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:apply-templates/>
				</xsl:otherwise>
			</xsl:choose>
	</xsl:template><xsl:template match="*[local-name() = 'fn']" mode="contents"/><xsl:template match="*[local-name() = 'fn']" mode="bookmarks"/><xsl:template match="*[local-name() = 'fn']" mode="contents_item"/><xsl:template match="*[local-name() = 'xref'] | *[local-name() = 'eref']" mode="contents">
		<xsl:value-of select="."/>
	</xsl:template><xsl:template match="*[local-name() = 'review']" mode="contents_item"/><xsl:template match="*[local-name() = 'tab']" mode="contents_item">
		<xsl:text> </xsl:text>
	</xsl:template><xsl:template match="*[local-name() = 'strong']" mode="contents_item">
		<xsl:copy>
			<xsl:apply-templates mode="contents_item"/>
		</xsl:copy>		
	</xsl:template><xsl:template match="*[local-name() = 'em']" mode="contents_item">
		<xsl:copy>
			<xsl:apply-templates mode="contents_item"/>
		</xsl:copy>		
	</xsl:template><xsl:template match="*[local-name() = 'stem']" mode="contents_item">
		<xsl:copy-of select="."/>
	</xsl:template><xsl:template match="*[local-name() = 'br']" mode="contents_item">
		<xsl:text> </xsl:text>
	</xsl:template><xsl:template match="*[local-name() = 'name']" mode="contents_item">
		<xsl:param name="mode">bookmarks</xsl:param>
		<xsl:apply-templates mode="contents_item">
			<xsl:with-param name="mode" select="$mode"/>
		</xsl:apply-templates>
	</xsl:template><xsl:template match="*[local-name() = 'add']" mode="contents_item">
		<xsl:param name="mode">bookmarks</xsl:param>
		<xsl:choose>
			<xsl:when test="starts-with(text(), $ace_tag)">
				<xsl:if test="$mode = 'contents'">
					<xsl:copy>
						<xsl:apply-templates mode="contents_item"/>
					</xsl:copy>		
				</xsl:if>
			</xsl:when>
			<xsl:otherwise><xsl:apply-templates mode="contents_item"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="text()" mode="contents_item">
		<xsl:call-template name="keep_together_standard_number"/>
	</xsl:template><xsl:template match="*[local-name() = 'span']" mode="contents_item">
		<xsl:apply-templates mode="contents_item"/>
	</xsl:template><xsl:template match="*[local-name()='sourcecode']" name="sourcecode">
	
		<fo:block-container xsl:use-attribute-sets="sourcecode-container-style">
		
			<xsl:if test="not(ancestor::*[local-name() = 'li']) or ancestor::*[local-name() = 'example']">
				<xsl:attribute name="margin-left">0mm</xsl:attribute>
			</xsl:if>
			
			<xsl:if test="ancestor::*[local-name() = 'example']">
				<xsl:attribute name="margin-right">0mm</xsl:attribute>
			</xsl:if>
			
			<xsl:copy-of select="@id"/>
			
			<xsl:if test="parent::*[local-name() = 'note']">
				<xsl:attribute name="margin-left">
					<xsl:choose>
						<xsl:when test="not(ancestor::*[local-name() = 'table'])"><xsl:value-of select="$note-body-indent"/></xsl:when>
						<xsl:otherwise><xsl:value-of select="$note-body-indent-table"/></xsl:otherwise>
					</xsl:choose>
				</xsl:attribute>
				
			</xsl:if>
			<fo:block-container margin-left="0mm">
		
				
				
				
				
				<fo:block xsl:use-attribute-sets="sourcecode-style">
					<xsl:variable name="_font-size">
						
												
						
						
						
						<!-- 9 -->
						
						
						<!-- <xsl:if test="$namespace = 'ieee'">							
							<xsl:if test="$doctype = 'standard' and $stage = 'published'">8</xsl:if>
						</xsl:if> -->
						
								
						
						
						
												
						
						10		
				</xsl:variable>
				
				<xsl:variable name="font-size" select="normalize-space($_font-size)"/>		
				<xsl:if test="$font-size != ''">
					<xsl:attribute name="font-size">
						<xsl:choose>
							<xsl:when test="$font-size = 'inherit'"><xsl:value-of select="$font-size"/></xsl:when>
							<xsl:when test="contains($font-size, '%')"><xsl:value-of select="$font-size"/></xsl:when>
							<xsl:when test="ancestor::*[local-name()='note']"><xsl:value-of select="$font-size * 0.91"/>pt</xsl:when>
							<xsl:otherwise><xsl:value-of select="$font-size"/>pt</xsl:otherwise>
						</xsl:choose>
					</xsl:attribute>
				</xsl:if>
				
				
				
				
				
				<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
			</fo:block>
			
			
					<xsl:apply-templates select="*[local-name()='name']"/> <!-- show sourcecode's name AFTER content -->
				
				
			
				
			</fo:block-container>
		</fo:block-container>
	</xsl:template><xsl:template match="*[local-name()='sourcecode']/text()" priority="2">
		<xsl:choose>
			<xsl:when test="normalize-space($syntax-highlight) = 'true' and normalize-space(../@lang) != ''"> <!-- condition for turn on of highlighting -->
				<xsl:variable name="syntax" select="java:org.metanorma.fop.Util.syntaxHighlight(., ../@lang)"/>
				<xsl:choose>
					<xsl:when test="normalize-space($syntax) != ''"><!-- if there is highlighted result -->
						<xsl:apply-templates select="xalan:nodeset($syntax)" mode="syntax_highlight"/> <!-- process span tags -->
					</xsl:when>
					<xsl:otherwise> <!-- if case of non-succesfull syntax highlight (for instance, unknown lang), process without highlighting -->
						<xsl:call-template name="add_spaces_to_sourcecode"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="add_spaces_to_sourcecode"/>
			</xsl:otherwise>
		</xsl:choose>
		
	</xsl:template><xsl:template name="add_spaces_to_sourcecode">
		<xsl:variable name="text_step1">
			<xsl:call-template name="add-zero-spaces-equal"/>
		</xsl:variable>
		<xsl:variable name="text_step2">
			<xsl:call-template name="add-zero-spaces-java">
				<xsl:with-param name="text" select="$text_step1"/>
			</xsl:call-template>
		</xsl:variable>
		
		<!-- <xsl:value-of select="$text_step2"/> -->
		
		<!-- add zero-width space after space -->
		<xsl:variable name="text_step3" select="java:replaceAll(java:java.lang.String.new($text_step2),' ',' ​')"/>
		
		<!-- split text by zero-width space -->
		<xsl:variable name="text_step4">
			<xsl:call-template name="split_for_interspers">
				<xsl:with-param name="pText" select="$text_step3"/>
				<xsl:with-param name="sep" select="$zero_width_space"/>
			</xsl:call-template>
		</xsl:variable>
		
		<xsl:for-each select="xalan:nodeset($text_step4)/node()">
			<xsl:choose>
				<xsl:when test="local-name() = 'interspers'"> <!-- word with length more than 30 will be interspersed with zero-width space -->
					<xsl:call-template name="interspers-java">
						<xsl:with-param name="str" select="."/>
					</xsl:call-template>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
		
	</xsl:template><xsl:variable name="interspers_tag_open">###interspers123###</xsl:variable><xsl:variable name="interspers_tag_close">###/interspers123###</xsl:variable><xsl:template name="split_for_interspers">
		<xsl:param name="pText" select="."/>
		<xsl:param name="sep" select="','"/>
		<!-- word with length more than 30 will be interspersed with zero-width space -->
		<xsl:variable name="regex" select="concat('([^', $zero_width_space, ']{31,})')"/> <!-- sequence of characters (more 31), that doesn't contains zero-width space -->
		<xsl:variable name="text" select="java:replaceAll(java:java.lang.String.new($pText),$regex,concat($interspers_tag_open,'$1',$interspers_tag_close))"/>
		<xsl:call-template name="replace_tag_interspers">
			<xsl:with-param name="text" select="$text"/>
		</xsl:call-template>
	</xsl:template><xsl:template name="replace_tag_interspers">
		<xsl:param name="text"/>
		<xsl:choose>
			<xsl:when test="contains($text, $interspers_tag_open)">
				<xsl:value-of select="substring-before($text, $interspers_tag_open)"/>
				<xsl:variable name="text_after" select="substring-after($text, $interspers_tag_open)"/>
				<interspers>
					<xsl:value-of select="substring-before($text_after, $interspers_tag_close)"/>
				</interspers>
				<xsl:call-template name="replace_tag_interspers">
					<xsl:with-param name="text" select="substring-after($text_after, $interspers_tag_close)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise><xsl:value-of select="$text"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="interspers">
		<xsl:param name="str"/>
		<xsl:param name="char" select="$zero_width_space"/>
		<xsl:if test="$str != ''">
			<xsl:value-of select="substring($str, 1, 1)"/>
			
			<xsl:variable name="next_char" select="substring($str, 2, 1)"/>
			<xsl:if test="not(contains(concat(' -.:=_— ', $char), $next_char))">
				<xsl:value-of select="$char"/>
			</xsl:if>
			
			<xsl:call-template name="interspers">
				<xsl:with-param name="str" select="substring($str, 2)"/>
				<xsl:with-param name="char" select="$char"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template><xsl:template name="interspers-java">
		<xsl:param name="str"/>
		<xsl:param name="char" select="$zero_width_space"/>
		<xsl:value-of select="java:replaceAll(java:java.lang.String.new($str),'([^ -.:=_—])',concat('$1', $char))"/> <!-- insert $char after each char excep space, - . : = _ etc. -->
	</xsl:template><xsl:template match="*" mode="syntax_highlight">
		<xsl:apply-templates mode="syntax_highlight"/>
	</xsl:template><xsl:variable name="syntax_highlight_styles_">
		<style class="hljs-addition" xsl:use-attribute-sets="hljs-addition"/>
		<style class="hljs-attr" xsl:use-attribute-sets="hljs-attr"/>
		<style class="hljs-attribute" xsl:use-attribute-sets="hljs-attribute"/>
		<style class="hljs-built_in" xsl:use-attribute-sets="hljs-built_in"/>
		<style class="hljs-bullet" xsl:use-attribute-sets="hljs-bullet"/>
		<style class="hljs-char_and_escape_" xsl:use-attribute-sets="hljs-char_and_escape_"/>
		<style class="hljs-code" xsl:use-attribute-sets="hljs-code"/>
		<style class="hljs-comment" xsl:use-attribute-sets="hljs-comment"/>
		<style class="hljs-deletion" xsl:use-attribute-sets="hljs-deletion"/>
		<style class="hljs-doctag" xsl:use-attribute-sets="hljs-doctag"/>
		<style class="hljs-emphasis" xsl:use-attribute-sets="hljs-emphasis"/>
		<style class="hljs-formula" xsl:use-attribute-sets="hljs-formula"/>
		<style class="hljs-keyword" xsl:use-attribute-sets="hljs-keyword"/>
		<style class="hljs-link" xsl:use-attribute-sets="hljs-link"/>
		<style class="hljs-literal" xsl:use-attribute-sets="hljs-literal"/>
		<style class="hljs-meta" xsl:use-attribute-sets="hljs-meta"/>
		<style class="hljs-meta_hljs-string" xsl:use-attribute-sets="hljs-meta_hljs-string"/>
		<style class="hljs-meta_hljs-keyword" xsl:use-attribute-sets="hljs-meta_hljs-keyword"/>
		<style class="hljs-name" xsl:use-attribute-sets="hljs-name"/>
		<style class="hljs-number" xsl:use-attribute-sets="hljs-number"/>
		<style class="hljs-operator" xsl:use-attribute-sets="hljs-operator"/>
		<style class="hljs-params" xsl:use-attribute-sets="hljs-params"/>
		<style class="hljs-property" xsl:use-attribute-sets="hljs-property"/>
		<style class="hljs-punctuation" xsl:use-attribute-sets="hljs-punctuation"/>
		<style class="hljs-quote" xsl:use-attribute-sets="hljs-quote"/>
		<style class="hljs-regexp" xsl:use-attribute-sets="hljs-regexp"/>
		<style class="hljs-section" xsl:use-attribute-sets="hljs-section"/>
		<style class="hljs-selector-attr" xsl:use-attribute-sets="hljs-selector-attr"/>
		<style class="hljs-selector-class" xsl:use-attribute-sets="hljs-selector-class"/>
		<style class="hljs-selector-id" xsl:use-attribute-sets="hljs-selector-id"/>
		<style class="hljs-selector-pseudo" xsl:use-attribute-sets="hljs-selector-pseudo"/>
		<style class="hljs-selector-tag" xsl:use-attribute-sets="hljs-selector-tag"/>
		<style class="hljs-string" xsl:use-attribute-sets="hljs-string"/>
		<style class="hljs-strong" xsl:use-attribute-sets="hljs-strong"/>
		<style class="hljs-subst" xsl:use-attribute-sets="hljs-subst"/>
		<style class="hljs-symbol" xsl:use-attribute-sets="hljs-symbol"/>		
		<style class="hljs-tag" xsl:use-attribute-sets="hljs-tag"/>
		<!-- <style class="hljs-tag_hljs-attr" xsl:use-attribute-sets="hljs-tag_hljs-attr"></style> -->
		<!-- <style class="hljs-tag_hljs-name" xsl:use-attribute-sets="hljs-tag_hljs-name"></style> -->
		<style class="hljs-template-tag" xsl:use-attribute-sets="hljs-template-tag"/>
		<style class="hljs-template-variable" xsl:use-attribute-sets="hljs-template-variable"/>
		<style class="hljs-title" xsl:use-attribute-sets="hljs-title"/>
		<style class="hljs-title_and_class_" xsl:use-attribute-sets="hljs-title_and_class_"/>
		<style class="hljs-title_and_class__and_inherited__" xsl:use-attribute-sets="hljs-title_and_class__and_inherited__"/>
		<style class="hljs-title_and_function_" xsl:use-attribute-sets="hljs-title_and_function_"/>
		<style class="hljs-type" xsl:use-attribute-sets="hljs-type"/>
		<style class="hljs-variable" xsl:use-attribute-sets="hljs-variable"/>
		<style class="hljs-variable_and_language_" xsl:use-attribute-sets="hljs-variable_and_language_"/>
	</xsl:variable><xsl:variable name="syntax_highlight_styles" select="xalan:nodeset($syntax_highlight_styles_)"/><xsl:template match="span" mode="syntax_highlight" priority="2">
		<!-- <fo:inline color="green" font-style="italic"><xsl:apply-templates mode="syntax_highlight"/></fo:inline> -->
		<fo:inline>
			<xsl:variable name="classes_">
				<xsl:call-template name="split">
					<xsl:with-param name="pText" select="@class"/>
					<xsl:with-param name="sep" select="' '"/>
				</xsl:call-template>
				<!-- a few classes together (_and_ suffix) -->
				<xsl:if test="contains(@class, 'hljs-char') and contains(@class, 'escape_')">
					<item>hljs-char_and_escape_</item>
				</xsl:if>
				<xsl:if test="contains(@class, 'hljs-title') and contains(@class, 'class_')">
					<item>hljs-title_and_class_</item>
				</xsl:if>
				<xsl:if test="contains(@class, 'hljs-title') and contains(@class, 'class_') and contains(@class, 'inherited__')">
					<item>hljs-title_and_class__and_inherited__</item>
				</xsl:if>
				<xsl:if test="contains(@class, 'hljs-title') and contains(@class, 'function_')">
					<item>hljs-title_and_function_</item>
				</xsl:if>
				<xsl:if test="contains(@class, 'hljs-variable') and contains(@class, 'language_')">
					<item>hljs-variable_and_language_</item>
				</xsl:if>
				<!-- with parent classes (_ suffix) -->
				<xsl:if test="contains(@class, 'hljs-keyword') and contains(ancestor::*/@class, 'hljs-meta')">
					<item>hljs-meta_hljs-keyword</item>
				</xsl:if>
				<xsl:if test="contains(@class, 'hljs-string') and contains(ancestor::*/@class, 'hljs-meta')">
					<item>hljs-meta_hljs-string</item>
				</xsl:if>
			</xsl:variable>
			<xsl:variable name="classes" select="xalan:nodeset($classes_)"/>
			
			<xsl:for-each select="$classes/item">
				<xsl:variable name="class_name" select="."/>
				<xsl:for-each select="$syntax_highlight_styles/style[@class = $class_name]/@*[not(local-name() = 'class')]">
					<xsl:attribute name="{local-name()}"><xsl:value-of select="."/></xsl:attribute>
				</xsl:for-each>
			</xsl:for-each>
			
			<!-- <xsl:variable name="class_name">
				<xsl:choose>
					<xsl:when test="@class = 'hljs-attr' and ancestor::*/@class = 'hljs-tag'">hljs-tag_hljs-attr</xsl:when>
					<xsl:when test="@class = 'hljs-name' and ancestor::*/@class = 'hljs-tag'">hljs-tag_hljs-name</xsl:when>
					<xsl:when test="@class = 'hljs-string' and ancestor::*/@class = 'hljs-meta'">hljs-meta_hljs-string</xsl:when>
					<xsl:otherwise><xsl:value-of select="@class"/></xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:for-each select="$syntax_highlight_styles/style[@class = $class_name]/@*[not(local-name() = 'class')]">
				<xsl:attribute name="{local-name()}"><xsl:value-of select="."/></xsl:attribute>
			</xsl:for-each> -->
			
		<xsl:apply-templates mode="syntax_highlight"/></fo:inline>
	</xsl:template><xsl:template match="text()" mode="syntax_highlight" priority="2">
		<xsl:call-template name="add_spaces_to_sourcecode"/>
	</xsl:template><xsl:template match="*[local-name() = 'sourcecode']/*[local-name() = 'name']">
		<xsl:if test="normalize-space() != ''">		
			<fo:block xsl:use-attribute-sets="sourcecode-name-style">				
				<xsl:apply-templates/>
			</fo:block>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'permission']">
		<fo:block id="{@id}" xsl:use-attribute-sets="permission-style">			
			<xsl:apply-templates select="*[local-name()='name']"/>
			<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'permission']/*[local-name() = 'name']">
		<xsl:if test="normalize-space() != ''">
			<fo:block xsl:use-attribute-sets="permission-name-style">
				<xsl:apply-templates/>
				
			</fo:block>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'permission']/*[local-name() = 'label']">
		<fo:block xsl:use-attribute-sets="permission-label-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'requirement']">
		<fo:block id="{@id}" xsl:use-attribute-sets="requirement-style">			
			<xsl:apply-templates select="*[local-name()='name']"/>
			<xsl:apply-templates select="*[local-name()='label']"/>
			<xsl:apply-templates select="@obligation"/>
			<xsl:apply-templates select="*[local-name()='subject']"/>
			<xsl:apply-templates select="node()[not(local-name() = 'name') and not(local-name() = 'label') and not(local-name() = 'subject')]"/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'requirement']/*[local-name() = 'name']">
		<xsl:if test="normalize-space() != ''">
			<fo:block xsl:use-attribute-sets="requirement-name-style">
				
				<xsl:apply-templates/>
				
			</fo:block>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'requirement']/*[local-name() = 'label']">
		<fo:block xsl:use-attribute-sets="requirement-label-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'requirement']/@obligation">
			<fo:block>
				<fo:inline padding-right="3mm">Obligation</fo:inline><xsl:value-of select="."/>
			</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'requirement']/*[local-name() = 'subject']" priority="2">
		<fo:block xsl:use-attribute-sets="subject-style">
			<xsl:text>Target Type </xsl:text><xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'recommendation']">
		<fo:block id="{@id}" xsl:use-attribute-sets="recommendation-style">			
			<xsl:apply-templates select="*[local-name()='name']"/>
			<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'recommendation']/*[local-name() = 'name']">
		<xsl:if test="normalize-space() != ''">
			<fo:block xsl:use-attribute-sets="recommendation-name-style">
				<xsl:apply-templates/>
				
			</fo:block>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'recommendation']/*[local-name() = 'label']">
		<fo:block xsl:use-attribute-sets="recommendation-label-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'subject']">
		<fo:block xsl:use-attribute-sets="subject-style">
			<xsl:text>Target Type </xsl:text><xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'inherit'] | *[local-name() = 'component'][@class = 'inherit']">
		<fo:block xsl:use-attribute-sets="inherit-style">
			<xsl:text>Dependency </xsl:text><xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'description'] | *[local-name() = 'component'][@class = 'description']">
		<fo:block xsl:use-attribute-sets="description-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'specification'] | *[local-name() = 'component'][@class = 'specification']">
		<fo:block xsl:use-attribute-sets="specification-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'measurement-target'] | *[local-name() = 'component'][@class = 'measurement-target']">
		<fo:block xsl:use-attribute-sets="measurement-target-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'verification'] | *[local-name() = 'component'][@class = 'verification']">
		<fo:block xsl:use-attribute-sets="verification-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'import'] | *[local-name() = 'component'][@class = 'import']">
		<fo:block xsl:use-attribute-sets="import-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'table'][@class = 'recommendation' or @class='requirement' or @class='permission']">
		<fo:block-container margin-left="0mm" margin-right="0mm" margin-bottom="12pt">
			<xsl:if test="ancestor::*[local-name() = 'table'][@class = 'recommendation' or @class='requirement' or @class='permission']">
				<xsl:attribute name="margin-bottom">0pt</xsl:attribute>
			</xsl:if>
			<fo:block-container margin-left="0mm" margin-right="0mm">
				<fo:table id="{@id}" table-layout="fixed" width="100%"> <!-- border="1pt solid black" -->
					<xsl:if test="ancestor::*[local-name() = 'table'][@class = 'recommendation' or @class='requirement' or @class='permission']">
						<!-- <xsl:attribute name="border">0.5pt solid black</xsl:attribute> -->
					</xsl:if>
					<xsl:variable name="simple-table">	
						<xsl:call-template name="getSimpleTable">
							<xsl:with-param name="id" select="@id"/>
						</xsl:call-template>
					</xsl:variable>					
					<xsl:variable name="cols-count" select="count(xalan:nodeset($simple-table)//tr[1]/td)"/>
					<xsl:if test="$cols-count = 2 and not(ancestor::*[local-name()='table'])">
						<fo:table-column column-width="30%"/>
						<fo:table-column column-width="70%"/>
					</xsl:if>
					<xsl:apply-templates mode="requirement"/>
				</fo:table>
				<!-- fn processing -->
				<xsl:if test=".//*[local-name() = 'fn']">
					<xsl:for-each select="*[local-name() = 'tbody']">
						<fo:block font-size="90%" border-bottom="1pt solid black">
							<xsl:call-template name="table_fn_display"/>
						</fo:block>
					</xsl:for-each>
				</xsl:if>
			</fo:block-container>
		</fo:block-container>
	</xsl:template><xsl:template match="*[local-name()='thead']" mode="requirement">		
		<fo:table-header>			
			<xsl:apply-templates mode="requirement"/>
		</fo:table-header>
	</xsl:template><xsl:template match="*[local-name()='tbody']" mode="requirement">		
		<fo:table-body>
			<xsl:apply-templates mode="requirement"/>
		</fo:table-body>
	</xsl:template><xsl:template match="*[local-name()='tr']" mode="requirement">
		<fo:table-row height="7mm" border-bottom="0.5pt solid grey">			
			<xsl:if test="parent::*[local-name()='thead']"> <!-- and not(ancestor::*[local-name() = 'table'][@class = 'recommendation' or @class='requirement' or @class='permission']) -->
				<xsl:attribute name="background-color">rgb(33, 55, 92)</xsl:attribute>
			</xsl:if>
			<xsl:if test="starts-with(*[local-name()='td'][1], 'Requirement ')">
				<xsl:attribute name="background-color">rgb(252, 246, 222)</xsl:attribute>
			</xsl:if>
			<xsl:if test="starts-with(*[local-name()='td'][1], 'Recommendation ')">
				<xsl:attribute name="background-color">rgb(233, 235, 239)</xsl:attribute>
			</xsl:if>
			<xsl:apply-templates mode="requirement"/>
		</fo:table-row>
	</xsl:template><xsl:template match="*[local-name()='th']" mode="requirement">
		<fo:table-cell text-align="{@align}" display-align="center" padding="1mm" padding-left="2mm"> <!-- border="0.5pt solid black" -->
			<xsl:call-template name="setTextAlignment">
				<xsl:with-param name="default">left</xsl:with-param>
			</xsl:call-template>
			
			<xsl:call-template name="setTableCellAttributes"/>
			
			<fo:block>
				<xsl:apply-templates/>
			</fo:block>
		</fo:table-cell>
	</xsl:template><xsl:template match="*[local-name()='td']" mode="requirement">
		<fo:table-cell text-align="{@align}" display-align="center" padding="1mm" padding-left="2mm"> <!-- border="0.5pt solid black" -->
			<xsl:if test="*[local-name() = 'table'][@class = 'recommendation' or @class='requirement' or @class='permission']">
				<xsl:attribute name="padding">0mm</xsl:attribute>
				<xsl:attribute name="padding-left">0mm</xsl:attribute>
			</xsl:if>
			<xsl:call-template name="setTextAlignment">
				<xsl:with-param name="default">left</xsl:with-param>
			</xsl:call-template>
			
			<xsl:if test="following-sibling::*[local-name()='td'] and not(preceding-sibling::*[local-name()='td'])">
				<xsl:attribute name="font-weight">bold</xsl:attribute>
			</xsl:if>
			
			<xsl:call-template name="setTableCellAttributes"/>
			
			<fo:block>			
				<xsl:apply-templates/>
			</fo:block>			
		</fo:table-cell>
	</xsl:template><xsl:template match="*[local-name() = 'p'][@class='RecommendationTitle' or @class = 'RecommendationTestTitle']" priority="2">
		<fo:block font-size="11pt">
			
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'p2'][ancestor::*[local-name() = 'table'][@class = 'recommendation' or @class='requirement' or @class='permission']]">
		<fo:block>
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'termexample']">
		<fo:block id="{@id}" xsl:use-attribute-sets="termexample-style">			
			<xsl:apply-templates select="*[local-name()='name']"/>
			<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'termexample']/*[local-name() = 'name']">
		<xsl:if test="normalize-space() != ''">
			<fo:inline xsl:use-attribute-sets="termexample-name-style">
				<xsl:apply-templates/>
			</fo:inline>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'termexample']/*[local-name() = 'p']">
		<xsl:variable name="element">inline
			
			
		</xsl:variable>		
		<xsl:choose>			
			<xsl:when test="contains($element, 'block')">
				<fo:block xsl:use-attribute-sets="example-p-style">
				
					
						
					<xsl:apply-templates/>
				</fo:block>
			</xsl:when>
			<xsl:otherwise>
				<fo:inline><xsl:apply-templates/></fo:inline>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name() = 'example']">
		
		<fo:block-container id="{@id}" xsl:use-attribute-sets="example-style">
		
			
		
			<xsl:variable name="fo_element">
				<xsl:if test=".//*[local-name() = 'table'] or .//*[local-name() = 'dl'] or *[not(local-name() = 'name')][1][local-name() = 'sourcecode']">block</xsl:if> 
				block
			</xsl:variable>
			
			<fo:block-container margin-left="0mm">
			
				<xsl:choose>
					
					<xsl:when test="contains(normalize-space($fo_element), 'block')">
					
						<!-- display name 'EXAMPLE' in a separate block  -->
						<fo:block>
							<xsl:apply-templates select="*[local-name()='name']">
								<xsl:with-param name="fo_element" select="$fo_element"/>
							</xsl:apply-templates>
						</fo:block>
						
						<fo:block-container xsl:use-attribute-sets="example-body-style">
							<fo:block-container margin-left="0mm" margin-right="0mm"> 
								<xsl:apply-templates select="node()[not(local-name() = 'name')]">
									<xsl:with-param name="fo_element" select="$fo_element"/>
								</xsl:apply-templates>
							</fo:block-container>
						</fo:block-container>
					</xsl:when> <!-- end block -->
					
					<xsl:otherwise> <!-- inline -->
					
						<!-- display 'EXAMPLE' and first element in the same line -->
						<fo:block>
							<xsl:apply-templates select="*[local-name()='name']">
								<xsl:with-param name="fo_element" select="$fo_element"/>
							</xsl:apply-templates>
							<fo:inline>
								<xsl:apply-templates select="*[not(local-name() = 'name')][1]">
									<xsl:with-param name="fo_element" select="$fo_element"/>
								</xsl:apply-templates>
							</fo:inline>
						</fo:block> 
						
						<xsl:if test="*[not(local-name() = 'name')][position() &gt; 1]">
							<!-- display further elements in blocks -->
							<fo:block-container xsl:use-attribute-sets="example-body-style">
								<fo:block-container margin-left="0mm" margin-right="0mm">
									<xsl:apply-templates select="*[not(local-name() = 'name')][position() &gt; 1]">
										<xsl:with-param name="fo_element" select="'block'"/>
									</xsl:apply-templates>
								</fo:block-container>
							</fo:block-container>
						</xsl:if>
					</xsl:otherwise> <!-- end inline -->
					
				</xsl:choose>
			</fo:block-container>
		</fo:block-container>
	</xsl:template><xsl:template match="*[local-name() = 'example']/*[local-name() = 'name']">
		<xsl:param name="fo_element">block</xsl:param>
	
		<xsl:choose>
			<xsl:when test="ancestor::*[local-name() = 'appendix']">
				<fo:inline>
					<xsl:apply-templates/>
				</fo:inline>
			</xsl:when>
			<xsl:when test="contains(normalize-space($fo_element), 'block')">
				<fo:block xsl:use-attribute-sets="example-name-style">
					<xsl:apply-templates/>
				</fo:block>
			</xsl:when>
			<xsl:otherwise>
				<fo:inline xsl:use-attribute-sets="example-name-style">
					<xsl:apply-templates/>
				</fo:inline>
			</xsl:otherwise>
		</xsl:choose>

	</xsl:template><xsl:template match="*[local-name() = 'example']/*[local-name() = 'p']">
		<xsl:param name="fo_element">block</xsl:param>
		
		<xsl:variable name="num"><xsl:number/></xsl:variable>
		<xsl:variable name="element">
			
			<xsl:value-of select="$fo_element"/>
		</xsl:variable>		
		<xsl:choose>			
			<xsl:when test="starts-with(normalize-space($element), 'block')">
				<fo:block-container>
					<xsl:if test="ancestor::*[local-name() = 'li'] and contains(normalize-space($fo_element), 'block')">
						<xsl:attribute name="margin-left">0mm</xsl:attribute>
						<xsl:attribute name="margin-right">0mm</xsl:attribute>
					</xsl:if>
					<fo:block xsl:use-attribute-sets="example-p-style">
						
						
							<xsl:if test="$num = 1">
								<xsl:attribute name="margin-left">5mm</xsl:attribute>
							</xsl:if>
						
						<xsl:apply-templates/>
					</fo:block>
				</fo:block-container>
			</xsl:when>
			<xsl:otherwise>
				<fo:inline xsl:use-attribute-sets="example-p-style">
					<xsl:apply-templates/>					
				</fo:inline>
			</xsl:otherwise>
		</xsl:choose>	
	</xsl:template><xsl:template match="*[local-name() = 'termsource']" name="termsource">
		<fo:block xsl:use-attribute-sets="termsource-style">
			
			
			
			<!-- Example: [SOURCE: ISO 5127:2017, 3.1.6.02] -->			
			<xsl:variable name="termsource_text">
				<xsl:apply-templates/>
			</xsl:variable>
			<xsl:copy-of select="$termsource_text"/>
			<!-- <xsl:choose>
				<xsl:when test="starts-with(normalize-space($termsource_text), '[')">
					<xsl:copy-of select="$termsource_text"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="$namespace = 'bsi'">
						<xsl:choose>
							<xsl:when test="$document_type = 'PAS' and starts-with(*[local-name() = 'origin']/@citeas, '[')"><xsl:text>{</xsl:text></xsl:when>
							<xsl:otherwise><xsl:text>[</xsl:text></xsl:otherwise>
						</xsl:choose>
					</xsl:if>
					<xsl:if test="$namespace = 'gb' or $namespace = 'iso' or $namespace = 'iec' or $namespace = 'itu' or $namespace = 'unece' or $namespace = 'unece-rec' or $namespace = 'nist-cswp'  or $namespace = 'nist-sp' or $namespace = 'ogc-white-paper' or $namespace = 'csa' or $namespace = 'csd' or $namespace = 'm3d' or $namespace = 'iho' or $namespace = 'bipm' or $namespace = 'jcgm'">
						<xsl:text>[</xsl:text>
					</xsl:if>
					<xsl:copy-of select="$termsource_text"/>
					<xsl:if test="$namespace = 'bsi'">
						<xsl:choose>
							<xsl:when test="$document_type = 'PAS' and starts-with(*[local-name() = 'origin']/@citeas, '[')"><xsl:text>}</xsl:text></xsl:when>
							<xsl:otherwise><xsl:text>]</xsl:text></xsl:otherwise>
						</xsl:choose>
					</xsl:if>
					<xsl:if test="$namespace = 'gb' or $namespace = 'iso' or $namespace = 'iec' or $namespace = 'itu' or $namespace = 'unece' or $namespace = 'unece-rec' or $namespace = 'nist-cswp'  or $namespace = 'nist-sp' or $namespace = 'ogc-white-paper' or $namespace = 'csa' or $namespace = 'csd' or $namespace = 'm3d' or $namespace = 'iho' or $namespace = 'bipm' or $namespace = 'jcgm'">
						<xsl:text>]</xsl:text>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose> -->
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'termsource']/text()[starts-with(., '[SOURCE: Adapted from: ') or     starts-with(., '[SOURCE: Quoted from: ') or     starts-with(., '[SOURCE: Modified from: ')]" priority="2">
		<xsl:text>[</xsl:text><xsl:value-of select="substring-after(., '[SOURCE: ')"/>
	</xsl:template><xsl:template match="*[local-name() = 'termsource']/text()">
		<xsl:if test="normalize-space() != ''">
			<xsl:value-of select="."/>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'termsource']/*[local-name() = 'strong'][1][following-sibling::*[1][local-name() = 'origin']]/text()">
		<fo:inline xsl:use-attribute-sets="termsource-text-style">
			<xsl:value-of select="."/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'origin']">
		<fo:basic-link internal-destination="{@bibitemid}" fox:alt-text="{@citeas}">
			<xsl:if test="normalize-space(@citeas) = ''">
				<xsl:attribute name="fox:alt-text"><xsl:value-of select="@bibitemid"/></xsl:attribute>
			</xsl:if>
			<fo:inline xsl:use-attribute-sets="origin-style">
				<xsl:apply-templates/>
			</fo:inline>
		</fo:basic-link>
	</xsl:template><xsl:template match="*[local-name() = 'modification']">
		<xsl:variable name="title-modified">
			<xsl:call-template name="getLocalizedString">
				<xsl:with-param name="key">modified</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		
    <xsl:variable name="text"><xsl:apply-templates/></xsl:variable>
		<xsl:choose>
			<xsl:when test="$lang = 'zh'"><xsl:text>、</xsl:text><xsl:value-of select="$title-modified"/><xsl:if test="normalize-space($text) != ''"><xsl:text>—</xsl:text></xsl:if></xsl:when>
			<xsl:otherwise><xsl:text>, </xsl:text><xsl:value-of select="$title-modified"/><xsl:if test="normalize-space($text) != ''"><xsl:text> — </xsl:text></xsl:if></xsl:otherwise>
		</xsl:choose>
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name() = 'modification']/*[local-name() = 'p']">
		<fo:inline><xsl:apply-templates/></fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'modification']/text()">
		<xsl:if test="normalize-space() != ''">
			<!-- <xsl:value-of select="."/> -->
			<xsl:call-template name="text"/>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'quote']">		
		<fo:block-container margin-left="0mm">
			<xsl:if test="parent::*[local-name() = 'note']">
				<xsl:if test="not(ancestor::*[local-name() = 'table'])">
					<xsl:attribute name="margin-left">5mm</xsl:attribute>
				</xsl:if>
			</xsl:if>
			
			
			<fo:block-container margin-left="0mm">
				<fo:block-container xsl:use-attribute-sets="quote-style">
					
					<fo:block-container margin-left="0mm" margin-right="0mm">
						<fo:block role="BlockQuote">
							<xsl:apply-templates select="./node()[not(local-name() = 'author') and not(local-name() = 'source')]"/> <!-- process all nested nodes, except author and source -->
						</fo:block>
					</fo:block-container>
				</fo:block-container>
				<xsl:if test="*[local-name() = 'author'] or *[local-name() = 'source']">
					<fo:block xsl:use-attribute-sets="quote-source-style">
						<!-- — ISO, ISO 7301:2011, Clause 1 -->
						<xsl:apply-templates select="*[local-name() = 'author']"/>
						<xsl:apply-templates select="*[local-name() = 'source']"/>				
					</fo:block>
				</xsl:if>
				
			</fo:block-container>
		</fo:block-container>
	</xsl:template><xsl:template match="*[local-name() = 'source']">
		<xsl:if test="../*[local-name() = 'author']">
			<xsl:text>, </xsl:text>
		</xsl:if>
		<fo:basic-link internal-destination="{@bibitemid}" fox:alt-text="{@citeas}">
			<xsl:apply-templates/>
		</fo:basic-link>
	</xsl:template><xsl:template match="*[local-name() = 'author']">
		<xsl:text>— </xsl:text>
		<xsl:apply-templates/>
	</xsl:template><xsl:variable name="bibitems_">
		<xsl:for-each select="//*[local-name() = 'bibitem']">
			<xsl:copy-of select="."/>
		</xsl:for-each>
	</xsl:variable><xsl:variable name="bibitems" select="xalan:nodeset($bibitems_)"/><xsl:variable name="bibitems_hidden_">
		<xsl:for-each select="//*[local-name() = 'bibitem'][@hidden='true']">
			<xsl:copy-of select="."/>
		</xsl:for-each>
		<xsl:for-each select="//*[local-name() = 'references'][@hidden='true']//*[local-name() = 'bibitem']">
			<xsl:copy-of select="."/>
		</xsl:for-each>
	</xsl:variable><xsl:variable name="bibitems_hidden" select="xalan:nodeset($bibitems_hidden_)"/><xsl:template match="*[local-name() = 'eref']">
		<xsl:variable name="current_bibitemid" select="@bibitemid"/>
		<!-- <xsl:variable name="external-destination" select="normalize-space(key('bibitems', $current_bibitemid)/*[local-name() = 'uri'][@type = 'citation'])"/> -->
		<xsl:variable name="external-destination" select="normalize-space($bibitems/*[local-name() ='bibitem'][@id = $current_bibitemid]/*[local-name() = 'uri'][@type = 'citation'])"/>
		<xsl:choose>
			<!-- <xsl:when test="$external-destination != '' or not(key('bibitems_hidden', $current_bibitemid))"> --> <!-- if in the bibliography there is the item with @bibitemid (and not hidden), then create link (internal to the bibitem or external) -->
			<xsl:when test="$external-destination != '' or not($bibitems_hidden/*[local-name() ='bibitem'][@id = $current_bibitemid])"> <!-- if in the bibliography there is the item with @bibitemid (and not hidden), then create link (internal to the bibitem or external) -->
				<fo:inline xsl:use-attribute-sets="eref-style">
					<xsl:if test="@type = 'footnote'">
						<xsl:attribute name="keep-together.within-line">always</xsl:attribute>
						<xsl:attribute name="keep-with-previous.within-line">always</xsl:attribute>
						<xsl:attribute name="vertical-align">super</xsl:attribute>
						<xsl:attribute name="font-size">80%</xsl:attribute>
						
					</xsl:if>	
					
					<xsl:variable name="citeas" select="java:replaceAll(java:java.lang.String.new(@citeas),'^\[?(.+?)\]?$','$1')"/> <!-- remove leading and trailing brackets -->
					<xsl:variable name="text" select="normalize-space()"/>
					
					
					
					
					
					<fo:basic-link fox:alt-text="{@citeas}">
						<xsl:if test="normalize-space(@citeas) = ''">
							<xsl:attribute name="fox:alt-text"><xsl:value-of select="."/></xsl:attribute>
						</xsl:if>
						<xsl:if test="@type = 'inline'">
							
							
							
						</xsl:if>
						
						<xsl:choose>
							<xsl:when test="$external-destination != ''"> <!-- external hyperlink -->
								<xsl:attribute name="external-destination"><xsl:value-of select="$external-destination"/></xsl:attribute>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="internal-destination"><xsl:value-of select="@bibitemid"/></xsl:attribute>
							</xsl:otherwise>
						</xsl:choose>
						
						<xsl:apply-templates/>
					</fo:basic-link>
					
				</fo:inline>
			</xsl:when>
			<xsl:otherwise> <!-- if there is key('bibitems_hidden', $current_bibitemid) -->
			
				<!-- if in bibitem[@hidden='true'] there is url[@type='src'], then create hyperlink  -->
				<xsl:variable name="uri_src" select="normalize-space($bibitems_hidden/*[local-name() ='bibitem'][@id = $current_bibitemid]/*[local-name() = 'uri'][@type = 'src'])"/>
				<xsl:choose>
					<xsl:when test="$uri_src != ''">
						<fo:basic-link external-destination="{$uri_src}" fox:alt-text="{$uri_src}"><xsl:apply-templates/></fo:basic-link>
					</xsl:when>
					<xsl:otherwise><fo:inline><xsl:apply-templates/></fo:inline></xsl:otherwise>
				</xsl:choose>
				
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name() = 'tab']">
		<!-- zero-space char -->
		<xsl:variable name="depth">
			<xsl:call-template name="getLevel">
				<xsl:with-param name="depth" select="../@depth"/>
			</xsl:call-template>
		</xsl:variable>
		
		<xsl:variable name="padding">
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
				<xsl:choose>
					<xsl:when test="ancestor::un:annex and $depth &gt;= 2">9.5</xsl:when>
					<xsl:when test="ancestor::un:sections">9.5</xsl:when>
				</xsl:choose>
			
			
			
		</xsl:variable>
		
		<xsl:variable name="padding-right">
			<xsl:choose>
				<xsl:when test="normalize-space($padding) = ''">0</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="normalize-space($padding)"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:choose>
			<xsl:when test="$lang = 'zh'">
				<fo:inline><xsl:value-of select="$tab_zh"/></fo:inline>
			</xsl:when>
			<xsl:when test="../../@inline-header = 'true'">
				<fo:inline font-size="90%">
					<xsl:call-template name="insertNonBreakSpaces">
						<xsl:with-param name="count" select="$padding-right"/>
					</xsl:call-template>
				</fo:inline>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="direction"><xsl:if test="$lang = 'ar'"><xsl:value-of select="$RLM"/></xsl:if></xsl:variable>
				<fo:inline padding-right="{$padding-right}mm"><xsl:value-of select="$direction"/>​</fo:inline>
			</xsl:otherwise>
		</xsl:choose>
		
	</xsl:template><xsl:template name="insertNonBreakSpaces">
		<xsl:param name="count"/>
		<xsl:if test="$count &gt; 0">
			<xsl:text> </xsl:text>
			<xsl:call-template name="insertNonBreakSpaces">
				<xsl:with-param name="count" select="$count - 1"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'preferred']">
		<xsl:variable name="level">
			<xsl:call-template name="getLevel"/>
		</xsl:variable>
		<xsl:variable name="font-size">
			inherit
		</xsl:variable>
		<xsl:variable name="levelTerm">
			<xsl:call-template name="getLevelTermName"/>
		</xsl:variable>
		<fo:block font-size="{normalize-space($font-size)}" role="H{$levelTerm}" xsl:use-attribute-sets="preferred-block-style">
		
			
			
			<xsl:if test="parent::*[local-name() = 'term'] and not(preceding-sibling::*[local-name() = 'preferred'])"> <!-- if first preffered in term, then display term's name -->
				<fo:block xsl:use-attribute-sets="term-name-style">
					<xsl:apply-templates select="ancestor::*[local-name() = 'term'][1]/*[local-name() = 'name']"/>
				</fo:block>
			</xsl:if>
			
			<fo:block xsl:use-attribute-sets="preferred-term-style">
				<xsl:call-template name="setStyle_preferred"/>
				<xsl:apply-templates/>
			</fo:block>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'domain']">
		<fo:inline xsl:use-attribute-sets="domain-style">&lt;<xsl:apply-templates/>&gt;</fo:inline>
		<xsl:text> </xsl:text>
	</xsl:template><xsl:template match="*[local-name() = 'admitted']">
		<fo:block xsl:use-attribute-sets="admitted-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'deprecates']">
		<xsl:variable name="title-deprecated">
			<xsl:call-template name="getLocalizedString">
				<xsl:with-param name="key">deprecated</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<fo:block xsl:use-attribute-sets="deprecates-style">
			<xsl:value-of select="$title-deprecated"/>: <xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template name="setStyle_preferred">
		<xsl:if test="*[local-name() = 'strong']">
			<xsl:attribute name="font-weight">normal</xsl:attribute>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'preferred']/text()[contains(., ';')] | *[local-name() = 'preferred']/*[local-name() = 'strong']/text()[contains(., ';')]">
		<xsl:value-of select="java:replaceAll(java:java.lang.String.new(.), ';', $linebreak)"/>
	</xsl:template><xsl:template match="*[local-name() = 'definition']">
		<fo:block xsl:use-attribute-sets="definition-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'definition'][preceding-sibling::*[local-name() = 'domain']]">
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name() = 'definition'][preceding-sibling::*[local-name() = 'domain']]/*[local-name() = 'p'][1]">
		<fo:inline> <xsl:apply-templates/></fo:inline>
		<fo:block/>
	</xsl:template><xsl:template match="/*/*[local-name() = 'sections']/*" priority="2">
		
				<fo:block break-after="page"/>
		
		<fo:block>
			<xsl:call-template name="setId"/>
			
			
			
			
			
						
			
						
			
			
				<xsl:variable name="num"><xsl:number/></xsl:variable>
				<xsl:if test="$num = 1">
					<xsl:attribute name="margin-top">3pt</xsl:attribute>
				</xsl:if>
			
			<xsl:apply-templates/>
		</fo:block>
		
		
		
	</xsl:template><xsl:template match="//*[contains(local-name(), '-standard')]/*[local-name() = 'preface']/*" priority="2"> <!-- /*/*[local-name() = 'preface']/* -->
		<fo:block break-after="page"/>
		<fo:block>
			<xsl:call-template name="setId"/>
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'clause']">
		<fo:block>
			<xsl:call-template name="setId"/>
			
			
			
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'definitions']">
		<fo:block id="{@id}">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'annex']">
		<fo:block break-after="page"/>
		<fo:block id="{@id}">
			
				<xsl:variable name="num"><xsl:number/></xsl:variable>
				<xsl:if test="$num = 1">
					<xsl:attribute name="margin-top">3pt</xsl:attribute>
				</xsl:if>
			
		</fo:block>
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name() = 'review']"> <!-- 'review' will be processed in mn2pdf/review.xsl -->
		<!-- comment 2019-11-29 -->
		<!-- <fo:block font-weight="bold">Review:</fo:block>
		<xsl:apply-templates /> -->
		
		<xsl:variable name="id_from" select="normalize-space(current()/@from)"/>

		<xsl:choose>
			<!-- if there isn't the attribute '@from', then -->
			<xsl:when test="$id_from = ''">
				<fo:block id="{@id}" font-size="1pt"><xsl:value-of select="$hair_space"/></fo:block>
			</xsl:when>
			<!-- if there isn't element with id 'from', then create 'bookmark' here -->
			<xsl:when test="not(ancestor::*[contains(local-name(), '-standard')]//*[@id = $id_from])">
				<fo:block id="{@from}" font-size="1pt"><xsl:value-of select="$hair_space"/></fo:block>
			</xsl:when>
		</xsl:choose>
		
	</xsl:template><xsl:template match="*[local-name() = 'name']/text()">
		<!-- 0xA0 to space replacement -->
		<xsl:value-of select="java:replaceAll(java:java.lang.String.new(.),' ',' ')"/>
	</xsl:template><xsl:variable name="ul_labels_">
		
				<label>•</label>
			
	</xsl:variable><xsl:variable name="ul_labels" select="xalan:nodeset($ul_labels_)"/><xsl:template name="setULLabel">
		<xsl:variable name="list_level_" select="count(ancestor::*[local-name() = 'ul']) + count(ancestor::*[local-name() = 'ol'])"/>
		<xsl:variable name="list_level">
			<xsl:choose>
				<xsl:when test="$list_level_ &lt;= 3"><xsl:value-of select="$list_level_"/></xsl:when>
				<xsl:otherwise><xsl:value-of select="$list_level_ mod 3"/></xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="$ul_labels/label[not(@level)]"> <!-- one label for all levels -->
				<xsl:apply-templates select="$ul_labels/label[not(@level)]" mode="ul_labels"/>
			</xsl:when>
			<xsl:when test="$list_level mod 3 = 0">
				<xsl:apply-templates select="$ul_labels/label[@level = 3]" mode="ul_labels"/>
			</xsl:when>
			<xsl:when test="$list_level mod 2 = 0">
				<xsl:apply-templates select="$ul_labels/label[@level = 2]" mode="ul_labels"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:apply-templates select="$ul_labels/label[@level = 1]" mode="ul_labels"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="label" mode="ul_labels">
		<xsl:copy-of select="@*[not(local-name() = 'level')]"/>
		<xsl:value-of select="."/>
	</xsl:template><xsl:template name="getListItemFormat">
		<!-- Example: for BSI <?list-type loweralpha?> -->
		<xsl:variable name="processing_instruction_type" select="normalize-space(../preceding-sibling::*[1]/processing-instruction('list-type'))"/>
		<xsl:choose>
			<xsl:when test="local-name(..) = 'ul'">
				<xsl:choose>
					<xsl:when test="normalize-space($processing_instruction_type) = 'simple'"/>
					<xsl:otherwise><xsl:call-template name="setULLabel"/></xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise> <!-- for ordered lists 'ol' -->
			
				<!-- Example: for BSI <?list-start 2?> -->
				<xsl:variable name="processing_instruction_start" select="normalize-space(../preceding-sibling::*[1]/processing-instruction('list-start'))"/>

				<xsl:variable name="start_value">
					<xsl:choose>
						<xsl:when test="normalize-space($processing_instruction_start) != ''">
							<xsl:value-of select="number($processing_instruction_start) - 1"/><!-- if start="3" then start_value=2 + xsl:number(1) = 3 -->
						</xsl:when>
						<xsl:when test="normalize-space(../@start) != ''">
							<xsl:value-of select="number(../@start) - 1"/><!-- if start="3" then start_value=2 + xsl:number(1) = 3 -->
						</xsl:when>
						<xsl:otherwise>0</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				
				<xsl:variable name="curr_value"><xsl:number/></xsl:variable>
				
				<xsl:variable name="type">
					<xsl:choose>
						<xsl:when test="normalize-space($processing_instruction_type) != ''"><xsl:value-of select="$processing_instruction_type"/></xsl:when>
						<xsl:when test="normalize-space(../@type) != ''"><xsl:value-of select="../@type"/></xsl:when>
						
						<xsl:otherwise> <!-- if no @type or @class = 'steps' -->
							
							<xsl:variable name="list_level_" select="count(ancestor::*[local-name() = 'ul']) + count(ancestor::*[local-name() = 'ol'])"/>
							<xsl:variable name="list_level">
								<xsl:choose>
									<xsl:when test="$list_level_ &lt;= 5"><xsl:value-of select="$list_level_"/></xsl:when>
									<xsl:otherwise><xsl:value-of select="$list_level_ mod 5"/></xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							
							<xsl:choose>
								<xsl:when test="$list_level mod 5 = 0">roman_upper</xsl:when> <!-- level 5 -->
								<xsl:when test="$list_level mod 4 = 0">alphabet_upper</xsl:when> <!-- level 4 -->
								<xsl:when test="$list_level mod 3 = 0">roman</xsl:when> <!-- level 3 -->
								<xsl:when test="$list_level mod 2 = 0 and ancestor::*/@class = 'steps'">alphabet</xsl:when> <!-- level 2 and @class = 'steps'-->
								<xsl:when test="$list_level mod 2 = 0">arabic</xsl:when> <!-- level 2 -->
								<xsl:otherwise> <!-- level 1 -->
									<xsl:choose>
										<xsl:when test="ancestor::*/@class = 'steps'">arabic</xsl:when>
										<xsl:otherwise>alphabet</xsl:otherwise>
									</xsl:choose>
								</xsl:otherwise>
							</xsl:choose>
							
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				
				<xsl:variable name="format">
					<xsl:choose>
						<xsl:when test="$type = 'arabic'">
							1)
						</xsl:when>
						<xsl:when test="$type = 'alphabet'">
							a)
						</xsl:when>
						<xsl:when test="$type = 'alphabet_upper'">
							A.
						</xsl:when>
						<xsl:when test="$type = 'roman'">
							i)
						</xsl:when>
						<xsl:when test="$type = 'roman_upper'">I.</xsl:when>
						<xsl:otherwise>1.</xsl:otherwise> <!-- for any case, if $type has non-determined value, not using -->
					</xsl:choose>
				</xsl:variable>
				
				<xsl:number value="$start_value + $curr_value" format="{normalize-space($format)}" lang="en"/>
				
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name() = 'ul'] | *[local-name() = 'ol']">
		<xsl:choose>
			<xsl:when test="parent::*[local-name() = 'note'] or parent::*[local-name() = 'termnote']">
				<fo:block-container>
					<xsl:attribute name="margin-left">
						<xsl:choose>
							<xsl:when test="not(ancestor::*[local-name() = 'table'])"><xsl:value-of select="$note-body-indent"/></xsl:when>
							<xsl:otherwise><xsl:value-of select="$note-body-indent-table"/></xsl:otherwise>
						</xsl:choose>
					</xsl:attribute>
					
					
					
					<fo:block-container margin-left="0mm">
						<fo:block>
							<xsl:apply-templates select="." mode="list"/>
						</fo:block>
					</fo:block-container>
				</fo:block-container>
			</xsl:when>
			<xsl:otherwise>
				<fo:block>
					<xsl:apply-templates select="." mode="list"/>
				</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name()='ul'] | *[local-name()='ol']" mode="list" name="list">
	
		<xsl:apply-templates select="*[local-name() = 'name']">
			<xsl:with-param name="process">true</xsl:with-param>
		</xsl:apply-templates>
	
		<fo:list-block xsl:use-attribute-sets="list-style">
		
			
			
			
			
			

			
			
			<xsl:if test="*[local-name() = 'name']">
				<xsl:attribute name="margin-top">0pt</xsl:attribute>
			</xsl:if>
			
			<xsl:apply-templates select="node()[not(local-name() = 'note')]"/>
		</fo:list-block>
		<!-- <xsl:for-each select="./iho:note">
			<xsl:call-template name="note"/>
		</xsl:for-each> -->
		<xsl:apply-templates select="./*[local-name() = 'note']"/>
	</xsl:template><xsl:template match="*[local-name() = 'ol' or local-name() = 'ul']/*[local-name() = 'name']">
		<xsl:param name="process">false</xsl:param>
		<xsl:if test="$process = 'true'">
			<fo:block xsl:use-attribute-sets="list-name-style">
				<xsl:apply-templates/>
			</fo:block>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name()='li']">
		<fo:list-item xsl:use-attribute-sets="list-item-style">
			<xsl:copy-of select="@id"/>
			
			
			
			<fo:list-item-label end-indent="label-end()">
				<fo:block xsl:use-attribute-sets="list-item-label-style">
				
					
				
					
				
					<!-- if 'p' contains all text in 'add' first and last elements in first p are 'add' -->
					<xsl:if test="*[1][count(node()[normalize-space() != '']) = 1 and *[local-name() = 'add']]">
						<xsl:call-template name="append_add-style"/>
					</xsl:if>
					
					<xsl:call-template name="getListItemFormat"/>
				</fo:block>
			</fo:list-item-label>
			<fo:list-item-body start-indent="body-start()" xsl:use-attribute-sets="list-item-body-style">
				<fo:block>
				
					
				
					
				
					<xsl:apply-templates/>
				
					<!-- <xsl:apply-templates select="node()[not(local-name() = 'note')]" />
					
					<xsl:for-each select="./bsi:note">
						<xsl:call-template name="note"/>
					</xsl:for-each> -->
				</fo:block>
			</fo:list-item-body>
		</fo:list-item>
	</xsl:template><xsl:variable name="index" select="document($external_index)"/><xsl:variable name="bookmark_in_fn">
		<xsl:for-each select="//*[local-name() = 'bookmark'][ancestor::*[local-name() = 'fn']]">
			<bookmark><xsl:value-of select="@id"/></bookmark>
		</xsl:for-each>
	</xsl:variable><xsl:template match="@*|node()" mode="index_add_id">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="index_add_id"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'xref']" mode="index_add_id">
		<xsl:variable name="id">
			<xsl:call-template name="generateIndexXrefId"/>
		</xsl:variable>
		<xsl:copy> <!-- add id to xref -->
			<xsl:apply-templates select="@*" mode="index_add_id"/>
			<xsl:attribute name="id">
				<xsl:value-of select="$id"/>
			</xsl:attribute>
			<xsl:apply-templates mode="index_add_id"/>
		</xsl:copy>
		<!-- split <xref target="bm1" to="End" pagenumber="true"> to two xref:
		<xref target="bm1" pagenumber="true"> and <xref target="End" pagenumber="true"> -->
		<xsl:if test="@to">
			<xsl:value-of select="$en_dash"/>
			<xsl:copy>
				<xsl:copy-of select="@*"/>
				<xsl:attribute name="target"><xsl:value-of select="@to"/></xsl:attribute>
				<xsl:attribute name="id">
					<xsl:value-of select="$id"/><xsl:text>_to</xsl:text>
				</xsl:attribute>
				<xsl:apply-templates mode="index_add_id"/>
			</xsl:copy>
		</xsl:if>
	</xsl:template><xsl:template match="@*|node()" mode="index_update">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="index_update"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'indexsect']//*[local-name() = 'li']" mode="index_update">
		<xsl:copy>
			<xsl:apply-templates select="@*" mode="index_update"/>
		<xsl:apply-templates select="node()[1]" mode="process_li_element"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'indexsect']//*[local-name() = 'li']/node()" mode="process_li_element" priority="2">
		<xsl:param name="element"/>
		<xsl:param name="remove" select="'false'"/>
		<xsl:param name="target"/>
		<!-- <node></node> -->
		<xsl:choose>
			<xsl:when test="self::text()  and (normalize-space(.) = ',' or normalize-space(.) = $en_dash) and $remove = 'true'">
				<!-- skip text (i.e. remove it) and process next element -->
				<!-- [removed_<xsl:value-of select="."/>] -->
				<xsl:apply-templates select="following-sibling::node()[1]" mode="process_li_element">
					<xsl:with-param name="target"><xsl:value-of select="$target"/></xsl:with-param>
				</xsl:apply-templates>
			</xsl:when>
			<xsl:when test="self::text()">
				<xsl:value-of select="."/>
				<xsl:apply-templates select="following-sibling::node()[1]" mode="process_li_element"/>
			</xsl:when>
			<xsl:when test="self::* and local-name(.) = 'xref'">
				<xsl:variable name="id" select="@id"/>
				<xsl:variable name="page" select="$index//item[@id = $id]"/>
				<xsl:variable name="id_next" select="following-sibling::*[local-name() = 'xref'][1]/@id"/>
				<xsl:variable name="page_next" select="$index//item[@id = $id_next]"/>
				
				<xsl:variable name="id_prev" select="preceding-sibling::*[local-name() = 'xref'][1]/@id"/>
				<xsl:variable name="page_prev" select="$index//item[@id = $id_prev]"/>
				
				<xsl:choose>
					<!-- 2nd pass -->
					<!-- if page is equal to page for next and page is not the end of range -->
					<xsl:when test="$page != '' and $page_next != '' and $page = $page_next and not(contains($page, '_to'))">  <!-- case: 12, 12-14 -->
						<!-- skip element (i.e. remove it) and remove next text ',' -->
						<!-- [removed_xref] -->
						
						<xsl:apply-templates select="following-sibling::node()[1]" mode="process_li_element">
							<xsl:with-param name="remove">true</xsl:with-param>
							<xsl:with-param name="target">
								<xsl:choose>
									<xsl:when test="$target != ''"><xsl:value-of select="$target"/></xsl:when>
									<xsl:otherwise><xsl:value-of select="@target"/></xsl:otherwise>
								</xsl:choose>
							</xsl:with-param>
						</xsl:apply-templates>
					</xsl:when>
					
					<xsl:when test="$page != '' and $page_prev != '' and $page = $page_prev and contains($page_prev, '_to')"> <!-- case: 12-14, 14, ... -->
						<!-- remove xref -->
						<xsl:apply-templates select="following-sibling::node()[1]" mode="process_li_element">
							<xsl:with-param name="remove">true</xsl:with-param>
						</xsl:apply-templates>
					</xsl:when>

					<xsl:otherwise>
						<xsl:apply-templates select="." mode="xref_copy">
							<xsl:with-param name="target" select="$target"/>
						</xsl:apply-templates>
						<xsl:apply-templates select="following-sibling::node()[1]" mode="process_li_element"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="self::* and local-name(.) = 'ul'">
				<!-- ul -->
				<xsl:apply-templates select="." mode="index_update"/>
			</xsl:when>
			<xsl:otherwise>
			 <xsl:apply-templates select="." mode="xref_copy">
					<xsl:with-param name="target" select="$target"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="following-sibling::node()[1]" mode="process_li_element"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="@*|node()" mode="xref_copy">
		<xsl:param name="target"/>
		<xsl:copy>
			<xsl:apply-templates select="@*" mode="xref_copy"/>
			<xsl:if test="$target != '' and not(xalan:nodeset($bookmark_in_fn)//bookmark[. = $target])">
				<xsl:attribute name="target"><xsl:value-of select="$target"/></xsl:attribute>
			</xsl:if>
			<xsl:apply-templates select="node()" mode="xref_copy"/>
		</xsl:copy>
	</xsl:template><xsl:template name="generateIndexXrefId">
		<xsl:variable name="level" select="count(ancestor::*[local-name() = 'ul'])"/>
		
		<xsl:variable name="docid">
			<xsl:call-template name="getDocumentId"/>
		</xsl:variable>
		<xsl:variable name="item_number">
			<xsl:number count="*[local-name() = 'li'][ancestor::*[local-name() = 'indexsect']]" level="any"/>
		</xsl:variable>
		<xsl:variable name="xref_number"><xsl:number count="*[local-name() = 'xref']"/></xsl:variable>
		<xsl:value-of select="concat($docid, '_', $item_number, '_', $xref_number)"/> <!-- $level, '_',  -->
	</xsl:template><xsl:template match="*[local-name() = 'indexsect']/*[local-name() = 'title']" priority="4">
		<fo:block xsl:use-attribute-sets="indexsect-title-style">
			<!-- Index -->
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'indexsect']/*[local-name() = 'clause']/*[local-name() = 'title']" priority="4">
		<!-- Letter A, B, C, ... -->
		<fo:block xsl:use-attribute-sets="indexsect-clause-title-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'indexsect']/*[local-name() = 'clause']" priority="4">
		<xsl:apply-templates/>
		<fo:block>
			<xsl:if test="following-sibling::*[local-name() = 'clause']">
				<fo:block> </fo:block>
			</xsl:if>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'indexsect']//*[local-name() = 'ul']" priority="4">
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name() = 'indexsect']//*[local-name() = 'li']" priority="4">
		<xsl:variable name="level" select="count(ancestor::*[local-name() = 'ul'])"/>
		<fo:block start-indent="{5 * $level}mm" text-indent="-5mm">
			
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'indexsect']//*[local-name() = 'li']/text()">
		<!-- to split by '_' and other chars -->
		<xsl:call-template name="add-zero-spaces-java"/>
	</xsl:template><xsl:template match="*[local-name() = 'table']/*[local-name() = 'bookmark']" priority="2"/><xsl:template match="*[local-name() = 'bookmark']" name="bookmark">
		<!-- <fo:inline id="{@id}" font-size="1pt"/> -->
		<fo:inline id="{@id}" font-size="1pt"><xsl:value-of select="$hair_space"/></fo:inline>
		<!-- we need to add zero-width space, otherwise this fo:inline is missing in IF xml -->
		<xsl:if test="not(following-sibling::node()[normalize-space() != ''])"><fo:inline font-size="1pt"> </fo:inline></xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'errata']">
		<!-- <row>
					<date>05-07-2013</date>
					<type>Editorial</type>
					<change>Changed CA-9 Priority Code from P1 to P2 in <xref target="tabled2"/>.</change>
					<pages>D-3</pages>
				</row>
		-->
		<fo:table table-layout="fixed" width="100%" font-size="10pt" border="1pt solid black">
			<fo:table-column column-width="20mm"/>
			<fo:table-column column-width="23mm"/>
			<fo:table-column column-width="107mm"/>
			<fo:table-column column-width="15mm"/>
			<fo:table-body>
				<fo:table-row text-align="center" font-weight="bold" background-color="black" color="white">
					
					<fo:table-cell border="1pt solid black"><fo:block>Date</fo:block></fo:table-cell>
					<fo:table-cell border="1pt solid black"><fo:block>Type</fo:block></fo:table-cell>
					<fo:table-cell border="1pt solid black"><fo:block>Change</fo:block></fo:table-cell>
					<fo:table-cell border="1pt solid black"><fo:block>Pages</fo:block></fo:table-cell>
				</fo:table-row>
				<xsl:apply-templates/>
			</fo:table-body>
		</fo:table>
	</xsl:template><xsl:template match="*[local-name() = 'errata']/*[local-name() = 'row']">
		<fo:table-row>
			<xsl:apply-templates/>
		</fo:table-row>
	</xsl:template><xsl:template match="*[local-name() = 'errata']/*[local-name() = 'row']/*">
		<fo:table-cell border="1pt solid black" padding-left="1mm" padding-top="0.5mm">
			<fo:block><xsl:apply-templates/></fo:block>
		</fo:table-cell>
	</xsl:template><xsl:template match="*[local-name() = 'references'][@hidden='true']" priority="3"/><xsl:template match="*[local-name() = 'bibitem'][@hidden='true']" priority="3"/><xsl:template match="*[local-name() = 'bibitem'][starts-with(@id, 'hidden_bibitem_')]" priority="3"/><xsl:template match="*[local-name() = 'references'][@normative='true']" priority="2">
		
		
		
		<fo:block id="{@id}">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'references']">
		<xsl:if test="not(ancestor::*[local-name() = 'annex'])">
			
		</xsl:if>
		
		<!-- <xsl:if test="ancestor::*[local-name() = 'annex']">
			<xsl:if test="$namespace = 'csa' or $namespace = 'csd' or $namespace = 'gb' or $namespace = 'iec' or $namespace = 'iso' or $namespace = 'itu'">
				<fo:block break-after="page"/>
			</xsl:if>
		</xsl:if> -->
		
		<fo:block id="{@id}" xsl:use-attribute-sets="references-non-normative-style">
			<xsl:apply-templates/>
		</fo:block>
		
		
		
		
	</xsl:template><xsl:template match="*[local-name() = 'bibitem']">
		<xsl:call-template name="bibitem"/>
	</xsl:template><xsl:template match="*[local-name() = 'references'][@normative='true']/*[local-name() = 'bibitem']" name="bibitem" priority="2">
		
				<fo:block id="{@id}" xsl:use-attribute-sets="bibitem-normative-style">
					<xsl:call-template name="processBibitem"/>
				</fo:block>
			

	</xsl:template><xsl:template match="*[local-name() = 'references'][not(@normative='true')]/*[local-name() = 'bibitem']" name="bibitem_non_normative" priority="2">
		
		
				<fo:block id="{@id}" xsl:use-attribute-sets="bibitem-non-normative-style">
					<xsl:call-template name="processBibitem"/>
				</fo:block>
			
		
	</xsl:template><xsl:template name="processBibitem">
		
		
				<!-- start UNECE bibitem processing -->
				<fo:inline padding-right="5mm">[<xsl:value-of select="un:docidentifier"/>]</fo:inline><xsl:value-of select="un:docidentifier"/>
				<xsl:text> </xsl:text>
				<xsl:apply-templates select="un:formattedref"/>
				<!-- END UNECE bibitem processing -->
			
	</xsl:template><xsl:template name="processBibitemDocId">
		<xsl:variable name="_doc_ident" select="*[local-name() = 'docidentifier'][not(@type = 'DOI' or @type = 'metanorma' or @type = 'metanorma-ordinal' or @type = 'ISSN' or @type = 'ISBN' or @type = 'rfc-anchor')]"/>
		<xsl:choose>
			<xsl:when test="normalize-space($_doc_ident) != ''">
				<!-- <xsl:variable name="type" select="*[local-name() = 'docidentifier'][not(@type = 'DOI' or @type = 'metanorma' or @type = 'ISSN' or @type = 'ISBN' or @type = 'rfc-anchor')]/@type"/>
				<xsl:if test="$type != '' and not(contains($_doc_ident, $type))">
					<xsl:value-of select="$type"/><xsl:text> </xsl:text>
				</xsl:if> -->
				<xsl:value-of select="$_doc_ident"/>
			</xsl:when>
			<xsl:otherwise>
				<!-- <xsl:variable name="type" select="*[local-name() = 'docidentifier'][not(@type = 'metanorma')]/@type"/>
				<xsl:if test="$type != ''">
					<xsl:value-of select="$type"/><xsl:text> </xsl:text>
				</xsl:if> -->
				<xsl:value-of select="*[local-name() = 'docidentifier'][not(@type = 'metanorma') and not(@type = 'metanorma-ordinal')]"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="processPersonalAuthor">
		<xsl:choose>
			<xsl:when test="*[local-name() = 'name']/*[local-name() = 'completename']">
				<author>
					<xsl:apply-templates select="*[local-name() = 'name']/*[local-name() = 'completename']"/>
				</author>
			</xsl:when>
			<xsl:when test="*[local-name() = 'name']/*[local-name() = 'surname'] and *[local-name() = 'name']/*[local-name() = 'initial']">
				<author>
					<xsl:apply-templates select="*[local-name() = 'name']/*[local-name() = 'surname']"/>
					<xsl:text> </xsl:text>
					<xsl:apply-templates select="*[local-name() = 'name']/*[local-name() = 'initial']" mode="strip"/>
				</author>
			</xsl:when>
			<xsl:when test="*[local-name() = 'name']/*[local-name() = 'surname'] and *[local-name() = 'name']/*[local-name() = 'forename']">
				<author>
					<xsl:apply-templates select="*[local-name() = 'name']/*[local-name() = 'surname']"/>
					<xsl:text> </xsl:text>
					<xsl:apply-templates select="*[local-name() = 'name']/*[local-name() = 'forename']" mode="strip"/>
				</author>
			</xsl:when>
			<xsl:otherwise>
				<xsl:apply-templates/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="renderDate">		
			<xsl:if test="normalize-space(*[local-name() = 'on']) != ''">
				<xsl:value-of select="*[local-name() = 'on']"/>
			</xsl:if>
			<xsl:if test="normalize-space(*[local-name() = 'from']) != ''">
				<xsl:value-of select="concat(*[local-name() = 'from'], '–', *[local-name() = 'to'])"/>
			</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'name']/*[local-name() = 'initial']/text()" mode="strip">
		<xsl:value-of select="translate(.,'. ','')"/>
	</xsl:template><xsl:template match="*[local-name() = 'name']/*[local-name() = 'forename']/text()" mode="strip">
		<xsl:value-of select="substring(.,1,1)"/>
	</xsl:template><xsl:template match="*[local-name() = 'title']" mode="title">
		<fo:inline><xsl:apply-templates/></fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'bibitem']/*[local-name() = 'title']" priority="2">
		<!-- <fo:inline><xsl:apply-templates /></fo:inline> -->
		<fo:inline font-style="italic"> <!-- BIPM BSI CSD CSA GB IEC IHO ISO ITU JCGM -->
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'bibitem']/*[local-name() = 'note']" priority="2">
	
		<!-- list of footnotes to calculate actual footnotes number -->
		<xsl:variable name="p_fn_">
			<xsl:call-template name="get_fn_list"/>
		</xsl:variable>
		<xsl:variable name="p_fn" select="xalan:nodeset($p_fn_)"/>
		<xsl:variable name="gen_id" select="generate-id(.)"/>
		<xsl:variable name="lang" select="ancestor::*[contains(local-name(), '-standard')]/*[local-name()='bibdata']//*[local-name()='language'][@current = 'true']"/>
		<!-- fn sequence number in document -->
		<xsl:variable name="current_fn_number">
			<xsl:choose>
				<xsl:when test="@current_fn_number"><xsl:value-of select="@current_fn_number"/></xsl:when> <!-- for BSI -->
				<xsl:otherwise>
					<!-- <xsl:value-of select="count($p_fn//fn[@reference = $reference]/preceding-sibling::fn) + 1" /> -->
					<xsl:value-of select="count($p_fn//fn[@gen_id = $gen_id]/preceding-sibling::fn) + 1"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<fo:footnote>
			<xsl:variable name="number">
				
						<xsl:value-of select="$current_fn_number"/>
					
			</xsl:variable>
			
			<xsl:variable name="current_fn_number_text">
				<xsl:value-of select="$number"/>
				
			</xsl:variable>
			
			<fo:inline xsl:use-attribute-sets="bibitem-note-fn-style">
				<fo:basic-link internal-destination="{$gen_id}" fox:alt-text="footnote {$number}">
					<xsl:value-of select="$current_fn_number_text"/>
				</fo:basic-link>
			</fo:inline>
			<fo:footnote-body>
				<fo:block xsl:use-attribute-sets="bibitem-note-fn-body-style">
					<fo:inline id="{$gen_id}" xsl:use-attribute-sets="bibitem-note-fn-number-style">
						<xsl:value-of select="$current_fn_number_text"/>
					</fo:inline>
					<xsl:apply-templates/>
				</fo:block>
			</fo:footnote-body>
		</fo:footnote>
	</xsl:template><xsl:template match="*[local-name() = 'bibitem']/*[local-name() = 'edition']"> <!-- for iho -->
		<xsl:text> edition </xsl:text>
		<xsl:value-of select="."/>
	</xsl:template><xsl:template match="*[local-name() = 'bibitem']/*[local-name() = 'uri']"> <!-- for iho -->
		<xsl:text> (</xsl:text>
		<fo:inline xsl:use-attribute-sets="link-style">
			<fo:basic-link external-destination="." fox:alt-text=".">
				<xsl:value-of select="."/>							
			</fo:basic-link>
		</fo:inline>
		<xsl:text>)</xsl:text>
	</xsl:template><xsl:template match="*[local-name() = 'bibitem']/*[local-name() = 'docidentifier']"/><xsl:template match="*[local-name() = 'formattedref']">
		
			<xsl:text>, </xsl:text>
		
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name() = 'form']">
		<fo:block>
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'form']//*[local-name() = 'label']">
		<fo:inline><xsl:apply-templates/></fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'form']//*[local-name() = 'input'][@type = 'text' or @type = 'date' or @type = 'file' or @type = 'password']">
		<fo:inline>
			<xsl:call-template name="text_input"/>
		</fo:inline>
	</xsl:template><xsl:template name="text_input">
		<xsl:variable name="count">
			<xsl:choose>
				<xsl:when test="normalize-space(@maxlength) != ''"><xsl:value-of select="@maxlength"/></xsl:when>
				<xsl:when test="normalize-space(@size) != ''"><xsl:value-of select="@size"/></xsl:when>
				<xsl:otherwise>10</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:call-template name="repeat">
			<xsl:with-param name="char" select="'_'"/>
			<xsl:with-param name="count" select="$count"/>
		</xsl:call-template>
		<xsl:text> </xsl:text>
	</xsl:template><xsl:template match="*[local-name() = 'form']//*[local-name() = 'input'][@type = 'button']">
		<xsl:variable name="caption">
			<xsl:choose>
				<xsl:when test="normalize-space(@value) != ''"><xsl:value-of select="@value"/></xsl:when>
				<xsl:otherwise>BUTTON</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<fo:inline>[<xsl:value-of select="$caption"/>]</fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'form']//*[local-name() = 'input'][@type = 'checkbox']">
		<fo:inline padding-right="1mm">
			<fo:instream-foreign-object fox:alt-text="Box" baseline-shift="-10%">
				<xsl:attribute name="height">3.5mm</xsl:attribute>
				<xsl:attribute name="content-width">100%</xsl:attribute>
				<xsl:attribute name="content-width">scale-down-to-fit</xsl:attribute>
				<xsl:attribute name="scaling">uniform</xsl:attribute>
				<svg xmlns="http://www.w3.org/2000/svg" width="80" height="80">
					<polyline points="0,0 80,0 80,80 0,80 0,0" stroke="black" stroke-width="5" fill="white"/>
				</svg>
			</fo:instream-foreign-object>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'form']//*[local-name() = 'input'][@type = 'radio']">
		<fo:inline padding-right="1mm">
			<fo:instream-foreign-object fox:alt-text="Box" baseline-shift="-10%">
				<xsl:attribute name="height">3.5mm</xsl:attribute>
				<xsl:attribute name="content-width">100%</xsl:attribute>
				<xsl:attribute name="content-width">scale-down-to-fit</xsl:attribute>
				<xsl:attribute name="scaling">uniform</xsl:attribute>
				<svg xmlns="http://www.w3.org/2000/svg" width="80" height="80">
					<circle cx="40" cy="40" r="30" stroke="black" stroke-width="5" fill="white"/>
					<circle cx="40" cy="40" r="15" stroke="black" stroke-width="5" fill="white"/>
				</svg>
			</fo:instream-foreign-object>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'form']//*[local-name() = 'select']">
		<fo:inline>
			<xsl:call-template name="text_input"/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'form']//*[local-name() = 'textarea']">
		<fo:block-container border="1pt solid black" width="50%">
			<fo:block> </fo:block>
		</fo:block-container>
	</xsl:template><xsl:variable name="toc_level">
		<!-- https://www.metanorma.org/author/ref/document-attributes/ -->
		<xsl:variable name="htmltoclevels" select="normalize-space(//*[local-name() = 'misc-container']/*[local-name() = 'presentation-metadata'][*[local-name() = 'name']/text() = 'HTML TOC Heading Levels']/*[local-name() = 'value'])"/> <!-- :htmltoclevels  Number of table of contents levels to render in HTML/PDF output; used to override :toclevels:-->
		<xsl:variable name="toclevels" select="normalize-space(//*[local-name() = 'misc-container']/*[local-name() = 'presentation-metadata'][*[local-name() = 'name']/text() = 'TOC Heading Levels']/*[local-name() = 'value'])"/> <!-- Number of table of contents levels to render -->
		<xsl:choose>
			<xsl:when test="$htmltoclevels != ''"><xsl:value-of select="number($htmltoclevels)"/></xsl:when> <!-- if there is value in xml -->
			<xsl:when test="$toclevels != ''"><xsl:value-of select="number($toclevels)"/></xsl:when>  <!-- if there is value in xml -->
			<xsl:otherwise><!-- default value -->
				3
			</xsl:otherwise>
		</xsl:choose>
	</xsl:variable><xsl:template match="*[local-name() = 'toc']">
		<xsl:param name="colwidths"/>
		<xsl:variable name="colwidths_">
			<xsl:choose>
				<xsl:when test="not($colwidths)">
					<xsl:variable name="toc_table_simple">
						<tbody>
							<xsl:apply-templates mode="toc_table_width"/>
						</tbody>
					</xsl:variable>
					<xsl:variable name="cols-count" select="count(xalan:nodeset($toc_table_simple)/*/tr[1]/td)"/>
					<xsl:call-template name="calculate-column-widths">
						<xsl:with-param name="cols-count" select="$cols-count"/>
						<xsl:with-param name="table" select="$toc_table_simple"/>
					</xsl:call-template>
				</xsl:when>
				<xsl:otherwise>
					<xsl:copy-of select="$colwidths"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<fo:block role="TOCI" space-after="16pt">
			<fo:table width="100%" table-layout="fixed">
				<xsl:for-each select="xalan:nodeset($colwidths_)/column">
					<fo:table-column column-width="proportional-column-width({.})"/>
				</xsl:for-each>
				<fo:table-body>
					<xsl:apply-templates/>
				</fo:table-body>
			</fo:table>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'toc']//*[local-name() = 'li']" priority="2">
		<fo:table-row min-height="5mm">
			<xsl:apply-templates/>
		</fo:table-row>
	</xsl:template><xsl:template match="*[local-name() = 'toc']//*[local-name() = 'li']/*[local-name() = 'p']">
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name() = 'toc']//*[local-name() = 'xref']" priority="3">
		<!-- <xref target="cgpm9th1948r6">1.6.3<tab/>&#8220;9th CGPM, 1948:<tab/>decision to establish the SI&#8221;</xref> -->
		<xsl:variable name="target" select="@target"/>
		<xsl:for-each select="*[local-name() = 'tab']">
			<xsl:variable name="current_id" select="generate-id()"/>
			<fo:table-cell>
				<fo:block>
					<fo:basic-link internal-destination="{$target}" fox:alt-text="{.}">
						<xsl:for-each select="following-sibling::node()[not(self::*[local-name() = 'tab']) and preceding-sibling::*[local-name() = 'tab'][1][generate-id() = $current_id]]">
							<xsl:choose>
								<xsl:when test="self::text()"><xsl:value-of select="."/></xsl:when>
								<xsl:otherwise><xsl:apply-templates select="."/></xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</fo:basic-link>
				</fo:block>
			</fo:table-cell>
		</xsl:for-each>
		<!-- last column - for page numbers -->
		<fo:table-cell text-align="right" font-size="10pt" font-weight="bold" font-family="Arial">
			<fo:block>
				<fo:basic-link internal-destination="{$target}" fox:alt-text="{.}">
					<fo:page-number-citation ref-id="{$target}"/>
				</fo:basic-link>
			</fo:block>
		</fo:table-cell>
	</xsl:template><xsl:template match="*" mode="toc_table_width">
		<xsl:apply-templates mode="toc_table_width"/>
	</xsl:template><xsl:template match="*[local-name() = 'clause'][@type = 'toc']/*[local-name() = 'title']" mode="toc_table_width"/><xsl:template match="*[local-name() = 'clause'][not(@type = 'toc')]/*[local-name() = 'title']" mode="toc_table_width"/><xsl:template match="*[local-name() = 'li']" mode="toc_table_width">
		<tr>
			<xsl:apply-templates mode="toc_table_width"/>
		</tr>
	</xsl:template><xsl:template match="*[local-name() = 'xref']" mode="toc_table_width">
		<!-- <xref target="cgpm9th1948r6">1.6.3<tab/>&#8220;9th CGPM, 1948:<tab/>decision to establish the SI&#8221;</xref> -->
		<xsl:for-each select="*[local-name() = 'tab']">
			<xsl:variable name="current_id" select="generate-id()"/>
			<td>
				<xsl:for-each select="following-sibling::node()[not(self::*[local-name() = 'tab']) and preceding-sibling::*[local-name() = 'tab'][1][generate-id() = $current_id]]">
					<xsl:copy-of select="."/>
				</xsl:for-each>
			</td>
		</xsl:for-each>
		<td>333</td> <!-- page number, just for fill -->
	</xsl:template><xsl:template match="*[local-name() = 'variant-title']"/><xsl:template match="*[local-name() = 'variant-title'][@type = 'sub']" mode="subtitle">
		<fo:inline padding-right="5mm"> </fo:inline>
		<fo:inline><xsl:apply-templates/></fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'blacksquare']" name="blacksquare">
		<fo:inline padding-right="2.5mm" baseline-shift="5%">
			<fo:instream-foreign-object content-height="2mm" content-width="2mm" fox:alt-text="Quad">
					<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" viewBox="0 0 2 2">
						<rect x="0" y="0" width="2" height="2" fill="black"/>
					</svg>
				</fo:instream-foreign-object>	
		</fo:inline>
	</xsl:template><xsl:template match="@language">
		<xsl:copy-of select="."/>
	</xsl:template><xsl:template match="*[local-name() = 'p'][@type = 'floating-title' or @type = 'section-title']" priority="4">
		<xsl:call-template name="title"/>
	</xsl:template><xsl:template match="*[local-name() = 'admonition']">
		
		
			<fo:block break-after="page"/>
		
		
		
		
		 <!-- text in the box -->
				<fo:block-container id="{@id}" xsl:use-attribute-sets="admonition-style">
					
					
					
					
						<fo:block xsl:use-attribute-sets="admonition-name-style">
							<xsl:call-template name="displayAdmonitionName"/>
						</fo:block>
					
				
					
					
							<fo:block-container xsl:use-attribute-sets="admonition-container-style">
							
								
							
								
										<fo:block-container margin-left="0mm" margin-right="0mm">
											<fo:block>
												<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
											</fo:block>
										</fo:block-container>
									
							</fo:block-container>
						
				</fo:block-container>
			
	</xsl:template><xsl:template name="displayAdmonitionName">
		<xsl:param name="sep"/> <!-- Example: ' - ' -->
		<!-- <xsl:choose>
			<xsl:when test="$namespace = 'nist-cswp' or $namespace = 'nist-sp'">
				<xsl:choose>
					<xsl:when test="@type='important'"><xsl:apply-templates select="@type"/></xsl:when>
					<xsl:otherwise>
						<xsl:apply-templates select="*[local-name() = 'name']"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:apply-templates select="*[local-name() = 'name']"/>
				<xsl:if test="not(*[local-name() = 'name'])">
					<xsl:apply-templates select="@type"/>
				</xsl:if>
			</xsl:otherwise>
		</xsl:choose> -->
		<xsl:variable name="name">
			<xsl:apply-templates select="*[local-name() = 'name']"/>
		</xsl:variable>
		<xsl:copy-of select="$name"/>
		<xsl:if test="normalize-space($name) != ''">
			<xsl:value-of select="$sep"/>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'admonition']/*[local-name() = 'name']">
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name() = 'admonition']/*[local-name() = 'p']">
		
				<fo:block xsl:use-attribute-sets="admonition-p-style">
				
					
					
					<xsl:apply-templates/>
				</fo:block>
			
	</xsl:template><xsl:template match="@*|node()" mode="update_xml_step1">
		<xsl:copy>
			<xsl:apply-templates select="@*|node()" mode="update_xml_step1"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'preface']" mode="update_xml_step1">
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			
			<xsl:variable name="nodes_preface_">
				<xsl:for-each select="*">
					<node id="{@id}"/>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="nodes_preface" select="xalan:nodeset($nodes_preface_)"/>
			
			<xsl:for-each select="*">
				<xsl:sort select="@displayorder" data-type="number"/>
				
				<!-- process Section's title -->
				<xsl:variable name="preceding-sibling_id" select="$nodes_preface/node[@id = current()/@id]/preceding-sibling::node[1]/@id"/>
				<xsl:if test="$preceding-sibling_id != ''">
					<xsl:apply-templates select="parent::*/*[@type = 'section-title' and @id = $preceding-sibling_id and not(@displayorder)]" mode="update_xml_step1"/>
				</xsl:if>
				
				<xsl:choose>
					<xsl:when test="@type = 'section-title' and not(@displayorder)"><!-- skip, don't copy, because copied in above 'apply-templates' --></xsl:when>
					<xsl:otherwise>
						<xsl:apply-templates select="." mode="update_xml_step1"/>
					</xsl:otherwise>
				</xsl:choose>
				
			</xsl:for-each>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'sections']" mode="update_xml_step1">
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			
			<xsl:variable name="nodes_sections_">
				<xsl:for-each select="*">
					<node id="{@id}"/>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="nodes_sections" select="xalan:nodeset($nodes_sections_)"/>
			
			<!-- move section 'Normative references' inside 'sections' -->
			<xsl:for-each select="* |      ancestor::*[contains(local-name(), '-standard')]/*[local-name()='bibliography']/*[local-name()='references'][@normative='true'] |     ancestor::*[contains(local-name(), '-standard')]/*[local-name()='bibliography']/*[local-name()='clause'][*[local-name()='references'][@normative='true']]">
				<xsl:sort select="@displayorder" data-type="number"/>
				
				<!-- process Section's title -->
				<xsl:variable name="preceding-sibling_id" select="$nodes_sections/node[@id = current()/@id]/preceding-sibling::node[1]/@id"/>
				<xsl:if test="$preceding-sibling_id != ''">
					<xsl:apply-templates select="parent::*/*[@type = 'section-title' and @id = $preceding-sibling_id and not(@displayorder)]" mode="update_xml_step1"/>
				</xsl:if>
				
				<xsl:choose>
					<xsl:when test="@type = 'section-title' and not(@displayorder)"><!-- skip, don't copy, because copied in above 'apply-templates' --></xsl:when>
					<xsl:otherwise>
						<xsl:apply-templates select="." mode="update_xml_step1"/>
					</xsl:otherwise>
				</xsl:choose>
				
			</xsl:for-each>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'bibliography']" mode="update_xml_step1">
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<!-- copy all elements from bibliography except 'Normative references' (moved to 'sections') -->
			<xsl:for-each select="*[not(@normative='true') and not(*[@normative='true'])]">
				<xsl:sort select="@displayorder" data-type="number"/>
				<xsl:apply-templates select="." mode="update_xml_step1"/>
			</xsl:for-each>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'span']" mode="update_xml_step1">
		<xsl:apply-templates mode="update_xml_step1"/>
	</xsl:template><xsl:template match="@*|node()" mode="update_xml_enclose_keep-together_within-line">
		<xsl:copy>
			<xsl:apply-templates select="@*|node()" mode="update_xml_enclose_keep-together_within-line"/>
		</xsl:copy>
	</xsl:template><xsl:variable name="express_reference_separators">_.\</xsl:variable><xsl:variable name="express_reference_characters" select="concat($upper,$lower,'1234567890',$express_reference_separators)"/><xsl:variable name="element_name_keep-together_within-line">keep-together_within-line</xsl:variable><xsl:template match="text()[not(ancestor::*[local-name() = 'bibdata'] or ancestor::*[local-name() = 'sourcecode'] or ancestor::*[local-name() = 'math'])]" name="keep_together_standard_number" mode="update_xml_enclose_keep-together_within-line">
	
		<!-- enclose standard's number into tag 'keep-together_within-line' -->
		<xsl:variable name="regex_standard_reference">([A-Z]{2,}(/[A-Z]{2,})* \d+(-\d+)*(:\d{4})?)</xsl:variable>
		<xsl:variable name="tag_keep-together_within-line_open">###<xsl:value-of select="$element_name_keep-together_within-line"/>###</xsl:variable>
		<xsl:variable name="tag_keep-together_within-line_close">###/<xsl:value-of select="$element_name_keep-together_within-line"/>###</xsl:variable>
		<xsl:variable name="text_" select="java:replaceAll(java:java.lang.String.new(.),$regex_standard_reference,concat($tag_keep-together_within-line_open,'$1',$tag_keep-together_within-line_close))"/>
		<xsl:variable name="text"><text><xsl:call-template name="replace_text_tags">
				<xsl:with-param name="tag_open" select="$tag_keep-together_within-line_open"/>
				<xsl:with-param name="tag_close" select="$tag_keep-together_within-line_close"/>
				<xsl:with-param name="text" select="$text_"/>
			</xsl:call-template></text></xsl:variable>
		
		<xsl:variable name="parent" select="local-name(..)"/>
		
		<xsl:variable name="text2">
			<text><xsl:for-each select="xalan:nodeset($text)/text/node()">
					<xsl:copy-of select="."/>
				</xsl:for-each></text>
		</xsl:variable>
		
		<!-- keep-together_within-line for: a/b, aaa/b, a/bbb, /b -->
		<xsl:variable name="regex_solidus_units">((\b((\S{1,3}\/\S+)|(\S+\/\S{1,3}))\b)|(\/\S{1,3})\b)</xsl:variable>
		<xsl:variable name="text3">
			<text><xsl:for-each select="xalan:nodeset($text2)/text/node()">
				<xsl:choose>
					<xsl:when test="self::text()">
						<xsl:variable name="text_units_" select="java:replaceAll(java:java.lang.String.new(.),$regex_solidus_units,concat($tag_keep-together_within-line_open,'$1',$tag_keep-together_within-line_close))"/>
						<xsl:variable name="text_units"><text><xsl:call-template name="replace_text_tags">
							<xsl:with-param name="tag_open" select="$tag_keep-together_within-line_open"/>
							<xsl:with-param name="tag_close" select="$tag_keep-together_within-line_close"/>
							<xsl:with-param name="text" select="$text_units_"/>
						</xsl:call-template></text></xsl:variable>
						<xsl:copy-of select="xalan:nodeset($text_units)/text/node()"/>
					</xsl:when>
					<xsl:otherwise><xsl:copy-of select="."/></xsl:otherwise> <!-- copy 'as-is' for <fo:inline keep-together.within-line="always" ...  -->
				</xsl:choose>
			</xsl:for-each></text>
		</xsl:variable>
		
		<xsl:choose>
			<xsl:when test="ancestor::*[local-name() = 'td' or local-name() = 'th']">
				<!-- keep-together_within-line for: a.b, aaa.b, a.bbb, .b  in table's cell ONLY -->
				<xsl:variable name="regex_dots_units">((\b((\S{1,3}\.\S+)|(\S+\.\S{1,3}))\b)|(\.\S{1,3})\b)</xsl:variable>
				<xsl:for-each select="xalan:nodeset($text3)/text/node()">
					<xsl:choose>
						<xsl:when test="self::text()">
							<xsl:variable name="text_dots_" select="java:replaceAll(java:java.lang.String.new(.),$regex_dots_units,concat($tag_keep-together_within-line_open,'$1',$tag_keep-together_within-line_close))"/>
							<xsl:variable name="text_dots"><text><xsl:call-template name="replace_text_tags">
								<xsl:with-param name="tag_open" select="$tag_keep-together_within-line_open"/>
								<xsl:with-param name="tag_close" select="$tag_keep-together_within-line_close"/>
								<xsl:with-param name="text" select="$text_dots_"/>
							</xsl:call-template></text></xsl:variable>
							<xsl:copy-of select="xalan:nodeset($text_dots)/text/node()"/>
						</xsl:when>
						<xsl:otherwise><xsl:copy-of select="."/></xsl:otherwise> <!-- copy 'as-is' for <fo:inline keep-together.within-line="always" ...  -->
					</xsl:choose>
				</xsl:for-each>
			</xsl:when>
			<xsl:otherwise><xsl:copy-of select="xalan:nodeset($text3)/text/node()"/></xsl:otherwise>
		</xsl:choose>
		
	</xsl:template><xsl:template name="replace_text_tags">
		<xsl:param name="tag_open"/>
		<xsl:param name="tag_close"/>
		<xsl:param name="text"/>
		<xsl:choose>
			<xsl:when test="contains($text, $tag_open)">
				<xsl:value-of select="substring-before($text, $tag_open)"/>
				<xsl:variable name="text_after" select="substring-after($text, $tag_open)"/>
				
				<xsl:element name="{substring-before(substring-after($tag_open, '###'),'###')}">
					<xsl:value-of select="substring-before($text_after, $tag_close)"/>
				</xsl:element>
				
				<xsl:call-template name="replace_text_tags">
					<xsl:with-param name="tag_open" select="$tag_open"/>
					<xsl:with-param name="tag_close" select="$tag_close"/>
					<xsl:with-param name="text" select="substring-after($text_after, $tag_close)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise><xsl:value-of select="$text"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name() = 'lang_none']">
		<fo:inline xml:lang="none"><xsl:value-of select="."/></fo:inline>
	</xsl:template><xsl:template name="printEdition">
		<xsl:variable name="edition_i18n" select="normalize-space((//*[contains(local-name(), '-standard')])[1]/*[local-name() = 'bibdata']/*[local-name() = 'edition'][normalize-space(@language) != ''])"/>
		<xsl:text> </xsl:text>
		<xsl:choose>
			<xsl:when test="$edition_i18n != ''">
				<!-- Example: <edition language="fr">deuxième édition</edition> -->
				<xsl:call-template name="capitalize">
					<xsl:with-param name="str" select="$edition_i18n"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="edition" select="normalize-space((//*[contains(local-name(), '-standard')])[1]/*[local-name() = 'bibdata']/*[local-name() = 'edition'])"/>
				<xsl:if test="$edition != ''"> <!-- Example: 1.3 -->
					<xsl:call-template name="capitalize">
						<xsl:with-param name="str">
							<xsl:call-template name="getLocalizedString">
								<xsl:with-param name="key">edition</xsl:with-param>
							</xsl:call-template>
						</xsl:with-param>
					</xsl:call-template>
					<xsl:text> </xsl:text>
					<xsl:value-of select="$edition"/>
				</xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="convertDate">
		<xsl:param name="date"/>
		<xsl:param name="format" select="'short'"/>
		<xsl:variable name="year" select="substring($date, 1, 4)"/>
		<xsl:variable name="month" select="substring($date, 6, 2)"/>
		<xsl:variable name="day" select="substring($date, 9, 2)"/>
		<xsl:variable name="monthStr">
			<xsl:call-template name="getMonthByNum">
				<xsl:with-param name="num" select="$month"/>
				<xsl:with-param name="lowercase" select="'true'"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="monthStr_localized">
			<xsl:if test="normalize-space($monthStr) != ''"><xsl:call-template name="getLocalizedString"><xsl:with-param name="key">month_<xsl:value-of select="$monthStr"/></xsl:with-param></xsl:call-template></xsl:if>
		</xsl:variable>
		<xsl:variable name="result">
			<xsl:choose>
				<xsl:when test="$format = 'ddMMyyyy'"> <!-- convert date from format 2007-04-01 to 1 April 2007 -->
					<xsl:if test="$day != ''"><xsl:value-of select="number($day)"/></xsl:if>
					<xsl:text> </xsl:text>
					<xsl:value-of select="normalize-space(concat($monthStr_localized, ' ' , $year))"/>
				</xsl:when>
				<xsl:when test="$format = 'ddMM'">
					<xsl:if test="$day != ''"><xsl:value-of select="number($day)"/></xsl:if>
					<xsl:text> </xsl:text><xsl:value-of select="$monthStr_localized"/>
				</xsl:when>
				<xsl:when test="$format = 'short' or $day = ''">
					<xsl:value-of select="normalize-space(concat($monthStr_localized, ' ', $year))"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="normalize-space(concat($monthStr_localized, ' ', $day, ', ' , $year))"/> <!-- January 01, 2022 -->
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:value-of select="$result"/>
	</xsl:template><xsl:template name="getMonthByNum">
		<xsl:param name="num"/>
		<xsl:param name="lang">en</xsl:param>
		<xsl:param name="lowercase">false</xsl:param> <!-- return 'january' instead of 'January' -->
		<xsl:variable name="monthStr_">
			<xsl:choose>
				<xsl:when test="$lang = 'fr'">
					<xsl:choose>
						<xsl:when test="$num = '01'">Janvier</xsl:when>
						<xsl:when test="$num = '02'">Février</xsl:when>
						<xsl:when test="$num = '03'">Mars</xsl:when>
						<xsl:when test="$num = '04'">Avril</xsl:when>
						<xsl:when test="$num = '05'">Mai</xsl:when>
						<xsl:when test="$num = '06'">Juin</xsl:when>
						<xsl:when test="$num = '07'">Juillet</xsl:when>
						<xsl:when test="$num = '08'">Août</xsl:when>
						<xsl:when test="$num = '09'">Septembre</xsl:when>
						<xsl:when test="$num = '10'">Octobre</xsl:when>
						<xsl:when test="$num = '11'">Novembre</xsl:when>
						<xsl:when test="$num = '12'">Décembre</xsl:when>
					</xsl:choose>
				</xsl:when>
				<xsl:otherwise>
					<xsl:choose>
						<xsl:when test="$num = '01'">January</xsl:when>
						<xsl:when test="$num = '02'">February</xsl:when>
						<xsl:when test="$num = '03'">March</xsl:when>
						<xsl:when test="$num = '04'">April</xsl:when>
						<xsl:when test="$num = '05'">May</xsl:when>
						<xsl:when test="$num = '06'">June</xsl:when>
						<xsl:when test="$num = '07'">July</xsl:when>
						<xsl:when test="$num = '08'">August</xsl:when>
						<xsl:when test="$num = '09'">September</xsl:when>
						<xsl:when test="$num = '10'">October</xsl:when>
						<xsl:when test="$num = '11'">November</xsl:when>
						<xsl:when test="$num = '12'">December</xsl:when>
					</xsl:choose>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="normalize-space($lowercase) = 'true'">
				<xsl:value-of select="java:toLowerCase(java:java.lang.String.new($monthStr_))"/>
			</xsl:when>
			<xsl:otherwise><xsl:value-of select="$monthStr_"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="getMonthLocalizedByNum">
		<xsl:param name="num"/>
		<xsl:variable name="monthStr">
			<xsl:choose>
				<xsl:when test="$num = '01'">january</xsl:when>
				<xsl:when test="$num = '02'">february</xsl:when>
				<xsl:when test="$num = '03'">march</xsl:when>
				<xsl:when test="$num = '04'">april</xsl:when>
				<xsl:when test="$num = '05'">may</xsl:when>
				<xsl:when test="$num = '06'">june</xsl:when>
				<xsl:when test="$num = '07'">july</xsl:when>
				<xsl:when test="$num = '08'">august</xsl:when>
				<xsl:when test="$num = '09'">september</xsl:when>
				<xsl:when test="$num = '10'">october</xsl:when>
				<xsl:when test="$num = '11'">november</xsl:when>
				<xsl:when test="$num = '12'">december</xsl:when>
			</xsl:choose>
		</xsl:variable>
		<xsl:call-template name="getLocalizedString">
			<xsl:with-param name="key">month_<xsl:value-of select="$monthStr"/></xsl:with-param>
		</xsl:call-template>
	</xsl:template><xsl:template name="insertKeywords">
		<xsl:param name="sorting" select="'true'"/>
		<xsl:param name="charAtEnd" select="'.'"/>
		<xsl:param name="charDelim" select="', '"/>
		<xsl:choose>
			<xsl:when test="$sorting = 'true' or $sorting = 'yes'">
				<xsl:for-each select="//*[contains(local-name(), '-standard')]/*[local-name() = 'bibdata']//*[local-name() = 'keyword']">
					<xsl:sort data-type="text" order="ascending"/>
					<xsl:call-template name="insertKeyword">
						<xsl:with-param name="charAtEnd" select="$charAtEnd"/>
						<xsl:with-param name="charDelim" select="$charDelim"/>
					</xsl:call-template>
				</xsl:for-each>
			</xsl:when>
			<xsl:otherwise>
				<xsl:for-each select="//*[contains(local-name(), '-standard')]/*[local-name() = 'bibdata']//*[local-name() = 'keyword']">
					<xsl:call-template name="insertKeyword">
						<xsl:with-param name="charAtEnd" select="$charAtEnd"/>
						<xsl:with-param name="charDelim" select="$charDelim"/>
					</xsl:call-template>
				</xsl:for-each>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="insertKeyword">
		<xsl:param name="charAtEnd"/>
		<xsl:param name="charDelim"/>
		<xsl:apply-templates/>
		<xsl:choose>
			<xsl:when test="position() != last()"><xsl:value-of select="$charDelim"/></xsl:when>
			<xsl:otherwise><xsl:value-of select="$charAtEnd"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="addPDFUAmeta">
		<pdf:catalog xmlns:pdf="http://xmlgraphics.apache.org/fop/extensions/pdf">
				<pdf:dictionary type="normal" key="ViewerPreferences">
					<pdf:boolean key="DisplayDocTitle">true</pdf:boolean>
				</pdf:dictionary>
			</pdf:catalog>
		<x:xmpmeta xmlns:x="adobe:ns:meta/">
			<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
				<rdf:Description xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:pdf="http://ns.adobe.com/pdf/1.3/" rdf:about="">
				<!-- Dublin Core properties go here -->
					<dc:title>
						<xsl:variable name="title">
							<xsl:for-each select="(//*[contains(local-name(), '-standard')])[1]/*[local-name() = 'bibdata']">
								
										<xsl:value-of select="*[local-name() = 'title'][@language = $lang and @type = 'main']"/>
									
							</xsl:for-each>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="normalize-space($title) != ''">
								<xsl:value-of select="$title"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:text> </xsl:text>
							</xsl:otherwise>
						</xsl:choose>							
					</dc:title>
					<dc:creator>
						<xsl:for-each select="(//*[contains(local-name(), '-standard')])[1]/*[local-name() = 'bibdata']">
							
									<xsl:for-each select="*[local-name() = 'contributor'][*[local-name() = 'role']/@type='author']">
										<xsl:value-of select="*[local-name() = 'organization']/*[local-name() = 'name']"/>
										<xsl:if test="position() != last()">; </xsl:if>
									</xsl:for-each>
								
						</xsl:for-each>
					</dc:creator>
					<dc:description>
						<xsl:variable name="abstract">
							
									<xsl:copy-of select="//*[contains(local-name(), '-standard')]/*[local-name() = 'preface']/*[local-name() = 'abstract']//text()[not(ancestor::*[local-name() = 'title'])]"/>									
								
						</xsl:variable>
						<xsl:value-of select="normalize-space($abstract)"/>
					</dc:description>
					<pdf:Keywords>
						<xsl:call-template name="insertKeywords"/>
					</pdf:Keywords>
				</rdf:Description>
				<rdf:Description xmlns:xmp="http://ns.adobe.com/xap/1.0/" rdf:about="">
					<!-- XMP properties go here -->
					<xmp:CreatorTool/>
				</rdf:Description>
			</rdf:RDF>
		</x:xmpmeta>
	</xsl:template><xsl:template name="getId">
		<xsl:choose>
			<xsl:when test="../@id">
				<xsl:value-of select="../@id"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(generate-id(..), '_', text())"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="getLevel">
		<xsl:param name="depth"/>
		<xsl:choose>
			<xsl:when test="normalize-space(@depth) != ''">
				<xsl:value-of select="@depth"/>
			</xsl:when>
			<xsl:when test="normalize-space($depth) != ''">
				<xsl:value-of select="$depth"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="level_total" select="count(ancestor::*)"/>
				<xsl:variable name="level">
					<xsl:choose>
						<xsl:when test="parent::*[local-name() = 'preface']">
							<xsl:value-of select="$level_total - 1"/>
						</xsl:when>
						<xsl:when test="ancestor::*[local-name() = 'preface'] and not(ancestor::*[local-name() = 'foreword']) and not(ancestor::*[local-name() = 'introduction'])"> <!-- for preface/clause -->
							<xsl:value-of select="$level_total - 1"/>
						</xsl:when>
						<xsl:when test="ancestor::*[local-name() = 'preface']">
							<xsl:value-of select="$level_total - 2"/>
						</xsl:when>
						<xsl:when test="ancestor::*[local-name() = 'sections']">
							<xsl:value-of select="$level_total - 1"/>
						</xsl:when>
						<xsl:when test="ancestor::*[local-name() = 'bibliography']">
							<xsl:value-of select="$level_total - 1"/>
						</xsl:when>
						<xsl:when test="parent::*[local-name() = 'annex']">
							<xsl:value-of select="$level_total - 1"/>
						</xsl:when>
						<xsl:when test="ancestor::*[local-name() = 'annex']">
							<xsl:value-of select="$level_total"/>
						</xsl:when>
						<xsl:when test="local-name() = 'annex'">1</xsl:when>
						<xsl:when test="local-name(ancestor::*[1]) = 'annex'">1</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="$level_total - 1"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:value-of select="$level"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="getLevelTermName">
		<xsl:choose>
			<xsl:when test="normalize-space(../@depth) != ''">
				<xsl:value-of select="../@depth"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="title_level_">
					<xsl:for-each select="../preceding-sibling::*[local-name() = 'title'][1]">
						<xsl:call-template name="getLevel"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="title_level" select="normalize-space($title_level_)"/>
				<xsl:choose>
					<xsl:when test="$title_level != ''"><xsl:value-of select="$title_level + 1"/></xsl:when>
					<xsl:otherwise>
						<xsl:call-template name="getLevel"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="split">
		<xsl:param name="pText" select="."/>
		<xsl:param name="sep" select="','"/>
		<xsl:param name="normalize-space" select="'true'"/>
		<xsl:param name="keep_sep" select="'false'"/>
		<xsl:if test="string-length($pText) &gt;0">
			<item>
				<xsl:choose>
					<xsl:when test="$normalize-space = 'true'">
						<xsl:value-of select="normalize-space(substring-before(concat($pText, $sep), $sep))"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="substring-before(concat($pText, $sep), $sep)"/>
					</xsl:otherwise>
				</xsl:choose>
			</item>
			<xsl:if test="$keep_sep = 'true' and contains($pText, $sep)"><item><xsl:value-of select="$sep"/></item></xsl:if>
			<xsl:call-template name="split">
				<xsl:with-param name="pText" select="substring-after($pText, $sep)"/>
				<xsl:with-param name="sep" select="$sep"/>
				<xsl:with-param name="normalize-space" select="$normalize-space"/>
				<xsl:with-param name="keep_sep" select="$keep_sep"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template><xsl:template name="getDocumentId">		
		<xsl:call-template name="getLang"/><xsl:value-of select="//*[local-name() = 'p'][1]/@id"/>
	</xsl:template><xsl:template name="namespaceCheck">
		<xsl:variable name="documentNS" select="namespace-uri(/*)"/>
		<xsl:variable name="XSLNS">			
			
			
			
			
			
			
				<xsl:value-of select="document('')//*/namespace::un"/>
			
			
			
			
			
			
			
						
			
			
			
			
		</xsl:variable>
		<xsl:if test="$documentNS != $XSLNS">
			<xsl:message>[WARNING]: Document namespace: '<xsl:value-of select="$documentNS"/>' doesn't equal to xslt namespace '<xsl:value-of select="$XSLNS"/>'</xsl:message>
		</xsl:if>
	</xsl:template><xsl:template name="getLanguage">
		<xsl:param name="lang"/>		
		<xsl:variable name="language" select="java:toLowerCase(java:java.lang.String.new($lang))"/>
		<xsl:choose>
			<xsl:when test="$language = 'en'">English</xsl:when>
			<xsl:when test="$language = 'fr'">French</xsl:when>
			<xsl:when test="$language = 'de'">Deutsch</xsl:when>
			<xsl:when test="$language = 'cn'">Chinese</xsl:when>
			<xsl:otherwise><xsl:value-of select="$language"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="setId">
		<xsl:attribute name="id">
			<xsl:choose>
				<xsl:when test="@id">
					<xsl:value-of select="@id"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="generate-id()"/>
				</xsl:otherwise>
			</xsl:choose>					
		</xsl:attribute>
	</xsl:template><xsl:template name="add-letter-spacing">
		<xsl:param name="text"/>
		<xsl:param name="letter-spacing" select="'0.15'"/>
		<xsl:if test="string-length($text) &gt; 0">
			<xsl:variable name="char" select="substring($text, 1, 1)"/>
			<fo:inline padding-right="{$letter-spacing}mm">
				<xsl:if test="$char = '®'">
					<xsl:attribute name="font-size">58%</xsl:attribute>
					<xsl:attribute name="baseline-shift">30%</xsl:attribute>
				</xsl:if>				
				<xsl:value-of select="$char"/>
			</fo:inline>
			<xsl:call-template name="add-letter-spacing">
				<xsl:with-param name="text" select="substring($text, 2)"/>
				<xsl:with-param name="letter-spacing" select="$letter-spacing"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template><xsl:template name="repeat">
		<xsl:param name="char" select="'*'"/>
		<xsl:param name="count"/>
		<xsl:if test="$count &gt; 0">
			<xsl:value-of select="$char"/>
			<xsl:call-template name="repeat">
				<xsl:with-param name="char" select="$char"/>
				<xsl:with-param name="count" select="$count - 1"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template><xsl:template name="getLocalizedString">
		<xsl:param name="key"/>
		<xsl:param name="formatted">false</xsl:param>
		<xsl:param name="lang"/>
		<xsl:param name="returnEmptyIfNotFound">false</xsl:param>
		
		<xsl:variable name="curr_lang">
			<xsl:choose>
				<xsl:when test="$lang != ''"><xsl:value-of select="$lang"/></xsl:when>
				<xsl:when test="$returnEmptyIfNotFound = 'true'"/>
				<xsl:otherwise>
					<xsl:call-template name="getLang"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:variable name="data_value">
			<xsl:choose>
				<xsl:when test="$formatted = 'true'">
					<xsl:apply-templates select="xalan:nodeset($bibdata)//*[local-name() = 'localized-string'][@key = $key and @language = $curr_lang]"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="normalize-space(xalan:nodeset($bibdata)//*[local-name() = 'localized-string'][@key = $key and @language = $curr_lang])"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:choose>
			<xsl:when test="normalize-space($data_value) != ''">
				<xsl:choose>
					<xsl:when test="$formatted = 'true'"><xsl:copy-of select="$data_value"/></xsl:when>
					<xsl:otherwise><xsl:value-of select="$data_value"/></xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="/*/*[local-name() = 'localized-strings']/*[local-name() = 'localized-string'][@key = $key and @language = $curr_lang]">
				<xsl:choose>
					<xsl:when test="$formatted = 'true'">
						<xsl:apply-templates select="/*/*[local-name() = 'localized-strings']/*[local-name() = 'localized-string'][@key = $key and @language = $curr_lang]"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="/*/*[local-name() = 'localized-strings']/*[local-name() = 'localized-string'][@key = $key and @language = $curr_lang]"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="$returnEmptyIfNotFound = 'true'"/>
			<xsl:otherwise>
				<xsl:variable name="key_">
					<xsl:call-template name="capitalize">
						<xsl:with-param name="str" select="translate($key, '_', ' ')"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="$key_"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="setTrackChangesStyles">
		<xsl:param name="isAdded"/>
		<xsl:param name="isDeleted"/>
		<xsl:choose>
			<xsl:when test="local-name() = 'math'">
				<xsl:if test="$isAdded = 'true'">
					<xsl:attribute name="background-color"><xsl:value-of select="$color-added-text"/></xsl:attribute>
				</xsl:if>
				<xsl:if test="$isDeleted = 'true'">
					<xsl:attribute name="background-color"><xsl:value-of select="$color-deleted-text"/></xsl:attribute>
				</xsl:if>
			</xsl:when>
			<xsl:otherwise>
				<xsl:if test="$isAdded = 'true'">
					<xsl:attribute name="border"><xsl:value-of select="$border-block-added"/></xsl:attribute>
					<xsl:attribute name="padding">2mm</xsl:attribute>
				</xsl:if>
				<xsl:if test="$isDeleted = 'true'">
					<xsl:attribute name="border"><xsl:value-of select="$border-block-deleted"/></xsl:attribute>
					<xsl:if test="local-name() = 'table'">
						<xsl:attribute name="background-color">rgb(255, 185, 185)</xsl:attribute>
					</xsl:if>
					<xsl:attribute name="padding">2mm</xsl:attribute>
				</xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:variable name="LRM" select="'‎'"/><xsl:variable name="RLM" select="'‏'"/><xsl:template name="setWritingMode">
		<xsl:if test="$lang = 'ar'">
			<xsl:attribute name="writing-mode">rl-tb</xsl:attribute>
		</xsl:if>
	</xsl:template><xsl:template name="setAlignment">
		<xsl:param name="align" select="normalize-space(@align)"/>
		<xsl:choose>
			<xsl:when test="$lang = 'ar' and $align = 'left'">start</xsl:when>
			<xsl:when test="$lang = 'ar' and $align = 'right'">end</xsl:when>
			<xsl:when test="$align != ''">
				<xsl:value-of select="$align"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template><xsl:template name="setTextAlignment">
		<xsl:param name="default">left</xsl:param>
		<xsl:variable name="align" select="normalize-space(@align)"/>
		<xsl:attribute name="text-align">
			<xsl:choose>
				<xsl:when test="$lang = 'ar' and $align = 'left'">start</xsl:when>
				<xsl:when test="$lang = 'ar' and $align = 'right'">end</xsl:when>
				<xsl:when test="$align != '' and not($align = 'indent')"><xsl:value-of select="$align"/></xsl:when>
				<xsl:when test="ancestor::*[local-name() = 'td']/@align"><xsl:value-of select="ancestor::*[local-name() = 'td']/@align"/></xsl:when>
				<xsl:when test="ancestor::*[local-name() = 'th']/@align"><xsl:value-of select="ancestor::*[local-name() = 'th']/@align"/></xsl:when>
				<xsl:otherwise><xsl:value-of select="$default"/></xsl:otherwise>
			</xsl:choose>
		</xsl:attribute>
		<xsl:if test="$align = 'indent'">
			<xsl:attribute name="margin-left">7mm</xsl:attribute>
		</xsl:if>
	</xsl:template><xsl:template name="number-to-words">
		<xsl:param name="number"/>
		<xsl:param name="first"/>
		<xsl:if test="$number != ''">
			<xsl:variable name="words">
				<words>
					<xsl:choose>
						<xsl:when test="$lang = 'fr'"> <!-- https://en.wiktionary.org/wiki/Appendix:French_numbers -->
							<word cardinal="1">Une-</word>
							<word ordinal="1">Première </word>
							<word cardinal="2">Deux-</word>
							<word ordinal="2">Seconde </word>
							<word cardinal="3">Trois-</word>
							<word ordinal="3">Tierce </word>
							<word cardinal="4">Quatre-</word>
							<word ordinal="4">Quatrième </word>
							<word cardinal="5">Cinq-</word>
							<word ordinal="5">Cinquième </word>
							<word cardinal="6">Six-</word>
							<word ordinal="6">Sixième </word>
							<word cardinal="7">Sept-</word>
							<word ordinal="7">Septième </word>
							<word cardinal="8">Huit-</word>
							<word ordinal="8">Huitième </word>
							<word cardinal="9">Neuf-</word>
							<word ordinal="9">Neuvième </word>
							<word ordinal="10">Dixième </word>
							<word ordinal="11">Onzième </word>
							<word ordinal="12">Douzième </word>
							<word ordinal="13">Treizième </word>
							<word ordinal="14">Quatorzième </word>
							<word ordinal="15">Quinzième </word>
							<word ordinal="16">Seizième </word>
							<word ordinal="17">Dix-septième </word>
							<word ordinal="18">Dix-huitième </word>
							<word ordinal="19">Dix-neuvième </word>
							<word cardinal="20">Vingt-</word>
							<word ordinal="20">Vingtième </word>
							<word cardinal="30">Trente-</word>
							<word ordinal="30">Trentième </word>
							<word cardinal="40">Quarante-</word>
							<word ordinal="40">Quarantième </word>
							<word cardinal="50">Cinquante-</word>
							<word ordinal="50">Cinquantième </word>
							<word cardinal="60">Soixante-</word>
							<word ordinal="60">Soixantième </word>
							<word cardinal="70">Septante-</word>
							<word ordinal="70">Septantième </word>
							<word cardinal="80">Huitante-</word>
							<word ordinal="80">Huitantième </word>
							<word cardinal="90">Nonante-</word>
							<word ordinal="90">Nonantième </word>
							<word cardinal="100">Cent-</word>
							<word ordinal="100">Centième </word>
						</xsl:when>
						<xsl:when test="$lang = 'ru'">
							<word cardinal="1">Одна-</word>
							<word ordinal="1">Первое </word>
							<word cardinal="2">Две-</word>
							<word ordinal="2">Второе </word>
							<word cardinal="3">Три-</word>
							<word ordinal="3">Третье </word>
							<word cardinal="4">Четыре-</word>
							<word ordinal="4">Четвертое </word>
							<word cardinal="5">Пять-</word>
							<word ordinal="5">Пятое </word>
							<word cardinal="6">Шесть-</word>
							<word ordinal="6">Шестое </word>
							<word cardinal="7">Семь-</word>
							<word ordinal="7">Седьмое </word>
							<word cardinal="8">Восемь-</word>
							<word ordinal="8">Восьмое </word>
							<word cardinal="9">Девять-</word>
							<word ordinal="9">Девятое </word>
							<word ordinal="10">Десятое </word>
							<word ordinal="11">Одиннадцатое </word>
							<word ordinal="12">Двенадцатое </word>
							<word ordinal="13">Тринадцатое </word>
							<word ordinal="14">Четырнадцатое </word>
							<word ordinal="15">Пятнадцатое </word>
							<word ordinal="16">Шестнадцатое </word>
							<word ordinal="17">Семнадцатое </word>
							<word ordinal="18">Восемнадцатое </word>
							<word ordinal="19">Девятнадцатое </word>
							<word cardinal="20">Двадцать-</word>
							<word ordinal="20">Двадцатое </word>
							<word cardinal="30">Тридцать-</word>
							<word ordinal="30">Тридцатое </word>
							<word cardinal="40">Сорок-</word>
							<word ordinal="40">Сороковое </word>
							<word cardinal="50">Пятьдесят-</word>
							<word ordinal="50">Пятидесятое </word>
							<word cardinal="60">Шестьдесят-</word>
							<word ordinal="60">Шестидесятое </word>
							<word cardinal="70">Семьдесят-</word>
							<word ordinal="70">Семидесятое </word>
							<word cardinal="80">Восемьдесят-</word>
							<word ordinal="80">Восьмидесятое </word>
							<word cardinal="90">Девяносто-</word>
							<word ordinal="90">Девяностое </word>
							<word cardinal="100">Сто-</word>
							<word ordinal="100">Сотое </word>
						</xsl:when>
						<xsl:otherwise> <!-- default english -->
							<word cardinal="1">One-</word>
							<word ordinal="1">First </word>
							<word cardinal="2">Two-</word>
							<word ordinal="2">Second </word>
							<word cardinal="3">Three-</word>
							<word ordinal="3">Third </word>
							<word cardinal="4">Four-</word>
							<word ordinal="4">Fourth </word>
							<word cardinal="5">Five-</word>
							<word ordinal="5">Fifth </word>
							<word cardinal="6">Six-</word>
							<word ordinal="6">Sixth </word>
							<word cardinal="7">Seven-</word>
							<word ordinal="7">Seventh </word>
							<word cardinal="8">Eight-</word>
							<word ordinal="8">Eighth </word>
							<word cardinal="9">Nine-</word>
							<word ordinal="9">Ninth </word>
							<word ordinal="10">Tenth </word>
							<word ordinal="11">Eleventh </word>
							<word ordinal="12">Twelfth </word>
							<word ordinal="13">Thirteenth </word>
							<word ordinal="14">Fourteenth </word>
							<word ordinal="15">Fifteenth </word>
							<word ordinal="16">Sixteenth </word>
							<word ordinal="17">Seventeenth </word>
							<word ordinal="18">Eighteenth </word>
							<word ordinal="19">Nineteenth </word>
							<word cardinal="20">Twenty-</word>
							<word ordinal="20">Twentieth </word>
							<word cardinal="30">Thirty-</word>
							<word ordinal="30">Thirtieth </word>
							<word cardinal="40">Forty-</word>
							<word ordinal="40">Fortieth </word>
							<word cardinal="50">Fifty-</word>
							<word ordinal="50">Fiftieth </word>
							<word cardinal="60">Sixty-</word>
							<word ordinal="60">Sixtieth </word>
							<word cardinal="70">Seventy-</word>
							<word ordinal="70">Seventieth </word>
							<word cardinal="80">Eighty-</word>
							<word ordinal="80">Eightieth </word>
							<word cardinal="90">Ninety-</word>
							<word ordinal="90">Ninetieth </word>
							<word cardinal="100">Hundred-</word>
							<word ordinal="100">Hundredth </word>
						</xsl:otherwise>
					</xsl:choose>
				</words>
			</xsl:variable>

			<xsl:variable name="ordinal" select="xalan:nodeset($words)//word[@ordinal = $number]/text()"/>
			
			<xsl:variable name="value">
				<xsl:choose>
					<xsl:when test="$ordinal != ''">
						<xsl:value-of select="$ordinal"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:choose>
							<xsl:when test="$number &lt; 100">
								<xsl:variable name="decade" select="concat(substring($number,1,1), '0')"/>
								<xsl:variable name="digit" select="substring($number,2)"/>
								<xsl:value-of select="xalan:nodeset($words)//word[@cardinal = $decade]/text()"/>
								<xsl:value-of select="xalan:nodeset($words)//word[@ordinal = $digit]/text()"/>
							</xsl:when>
							<xsl:otherwise>
								<!-- more 100 -->
								<xsl:variable name="hundred" select="substring($number,1,1)"/>
								<xsl:variable name="digits" select="number(substring($number,2))"/>
								<xsl:value-of select="xalan:nodeset($words)//word[@cardinal = $hundred]/text()"/>
								<xsl:value-of select="xalan:nodeset($words)//word[@cardinal = '100']/text()"/>
								<xsl:call-template name="number-to-words">
									<xsl:with-param name="number" select="$digits"/>
								</xsl:call-template>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="$first = 'true'">
					<xsl:variable name="value_lc" select="java:toLowerCase(java:java.lang.String.new($value))"/>
					<xsl:call-template name="capitalize">
						<xsl:with-param name="str" select="$value_lc"/>
					</xsl:call-template>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="$value"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>
	</xsl:template><xsl:template name="number-to-ordinal">
		<xsl:param name="number"/>
		<xsl:param name="curr_lang"/>
		<xsl:choose>
			<xsl:when test="$curr_lang = 'fr'">
				<xsl:choose>					
					<xsl:when test="$number = '1'">re</xsl:when>
					<xsl:otherwise>e</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:choose>
					<xsl:when test="$number = 1">st</xsl:when>
					<xsl:when test="$number = 2">nd</xsl:when>
					<xsl:when test="$number = 3">rd</xsl:when>
					<xsl:otherwise>th</xsl:otherwise>
				</xsl:choose>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="setAltText">
		<xsl:param name="value"/>
		<xsl:attribute name="fox:alt-text">
			<xsl:choose>
				<xsl:when test="normalize-space($value) != ''">
					<xsl:value-of select="$value"/>
				</xsl:when>
				<xsl:otherwise>_</xsl:otherwise>
			</xsl:choose>
		</xsl:attribute>
	</xsl:template><xsl:template name="substring-after-last">	
		<xsl:param name="value"/>
		<xsl:param name="delimiter"/>
		<xsl:choose>
			<xsl:when test="contains($value, $delimiter)">
				<xsl:call-template name="substring-after-last">
					<xsl:with-param name="value" select="substring-after($value, $delimiter)"/>
					<xsl:with-param name="delimiter" select="$delimiter"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$value"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*" mode="print_as_xml">
		<xsl:param name="level">0</xsl:param>

		<fo:block margin-left="{2*$level}mm">
			<xsl:text>
&lt;</xsl:text>
			<xsl:value-of select="local-name()"/>
			<xsl:for-each select="@*">
				<xsl:text> </xsl:text>
				<xsl:value-of select="local-name()"/>
				<xsl:text>="</xsl:text>
				<xsl:value-of select="."/>
				<xsl:text>"</xsl:text>
			</xsl:for-each>
			<xsl:text>&gt;</xsl:text>
			
			<xsl:if test="not(*)">
				<fo:inline font-weight="bold"><xsl:value-of select="."/></fo:inline>
				<xsl:text>&lt;/</xsl:text>
					<xsl:value-of select="local-name()"/>
					<xsl:text>&gt;</xsl:text>
			</xsl:if>
		</fo:block>
		
		<xsl:if test="*">
			<fo:block>
				<xsl:apply-templates mode="print_as_xml">
					<xsl:with-param name="level" select="$level + 1"/>
				</xsl:apply-templates>
			</fo:block>
			<fo:block margin-left="{2*$level}mm">
				<xsl:text>&lt;/</xsl:text>
				<xsl:value-of select="local-name()"/>
				<xsl:text>&gt;</xsl:text>
			</fo:block>
		</xsl:if>
	</xsl:template></xsl:stylesheet>