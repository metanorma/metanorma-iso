<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:rsd="https://www.metanorma.org/ns/rsd" xmlns:mathml="http://www.w3.org/1998/Math/MathML" xmlns:xalan="http://xml.apache.org/xalan" xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" xmlns:java="http://xml.apache.org/xalan/java" exclude-result-prefixes="java" version="1.0">

	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>
	
	<xsl:key name="kfn" match="*[local-name() = 'fn'][not(ancestor::*[(local-name() = 'table' or local-name() = 'figure') and not(ancestor::*[local-name() = 'name'])])]" use="@reference"/>

	
	
	<xsl:variable name="debug">false</xsl:variable>
	
	<xsl:variable name="color_blue">rgb(22, 97, 173)</xsl:variable>
	
	<xsl:variable name="copyright_year" select="/rsd:rsd-standard/rsd:bibdata/rsd:copyright/rsd:from"/>
	
	<xsl:variable name="copyright">
		<xsl:text>Â© </xsl:text>
		<xsl:value-of select="$copyright_year"/>
		<xsl:text> </xsl:text>
		<xsl:value-of select="/rsd:rsd-standard/rsd:bibdata/rsd:copyright/rsd:owner/rsd:organization/rsd:name"/>
	</xsl:variable>
	
	
	<xsl:variable name="contents_">
		<contents>
		
			<xsl:apply-templates select="/rsd:rsd-standard/rsd:preface/rsd:abstract" mode="contents"/>
			<xsl:apply-templates select="/rsd:rsd-standard/rsd:preface/rsd:foreword" mode="contents"/>
			<xsl:apply-templates select="/rsd:rsd-standard/rsd:preface/rsd:executivesummary" mode="contents"/>
			<xsl:apply-templates select="/rsd:rsd-standard/rsd:preface/rsd:introduction" mode="contents"/>
			<xsl:apply-templates select="/rsd:rsd-standard/rsd:preface/rsd:clause" mode="contents"/>
			<xsl:apply-templates select="/rsd:rsd-standard/rsd:preface/rsd:acknowledgements" mode="contents"/>
					
			<xsl:call-template name="processMainSectionsDefault_Contents"/>
			
			<xsl:call-template name="processTablesFigures_Contents"/>
		</contents>
	</xsl:variable>
	<xsl:variable name="contents" select="xalan:nodeset($contents_)"/>
	
	<xsl:variable name="docnumber_version">
		<xsl:value-of select="/rsd:rsd-standard/rsd:bibdata/rsd:docidentifier[@type = 'rsd' or @type = 'Ribose']"/>
			<xsl:text>:</xsl:text>
			<xsl:value-of select="$copyright_year"/>
			
			<xsl:variable name="edition" select="normalize-space(/rsd:rsd-standard/rsd:bibdata/rsd:edition[normalize-space(@language) = ''])"/>
			<xsl:if test="$edition != ''">
				<xsl:variable name="title-version">
					<xsl:call-template name="capitalize">
						<xsl:with-param name="str">
							<xsl:call-template name="getLocalizedString">
								<xsl:with-param name="key">version</xsl:with-param>
							</xsl:call-template>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:variable>
				<xsl:text>, </xsl:text><xsl:value-of select="$title-version"/><xsl:text> </xsl:text><xsl:value-of select="$edition"/>
			</xsl:if>
			
	</xsl:variable>
	
	<xsl:template match="/">
		<xsl:call-template name="namespaceCheck"/>
		<fo:root xml:lang="{$lang}">
			<xsl:variable name="root-style">
				<root-style xsl:use-attribute-sets="root-style"/>
			</xsl:variable>
			<xsl:call-template name="insertRootStyle">
				<xsl:with-param name="root-style" select="$root-style"/>
			</xsl:call-template>
			<fo:layout-master-set>
				
				<!-- Cover page -->
				<fo:simple-page-master master-name="cover-page" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="176mm" margin-bottom="11.5mm" margin-left="13mm" margin-right="78mm"/>
					<fo:region-before region-name="cover-page-header" extent="176mm"/>
					<fo:region-after region-name="cover-page-footer" extent="11.5mm"/>
					<fo:region-start extent="13mm"/>
					<fo:region-end extent="78mm"/>
				</fo:simple-page-master>
				
				<!-- ToC -->
				<fo:simple-page-master master-name="toc-odd" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="14mm" margin-bottom="26.5mm" margin-left="61mm" margin-right="12mm"/>
					<fo:region-before region-name="header-toc-odd" extent="14mm"/> 
					<fo:region-after region-name="footer-odd" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				<fo:simple-page-master master-name="toc-even" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="14mm" margin-bottom="85mm" margin-left="61mm" margin-right="12mm"/>
					<fo:region-before region-name="header-toc-even" extent="14mm"/> 
					<fo:region-after region-name="footer-even" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				<fo:page-sequence-master master-name="toc">
					<fo:repeatable-page-master-alternatives>
						<fo:conditional-page-master-reference odd-or-even="odd" master-reference="toc-odd"/>
						<fo:conditional-page-master-reference odd-or-even="even" master-reference="toc-even"/>
					</fo:repeatable-page-master-alternatives>
				</fo:page-sequence-master>	
		
		
		
				<fo:simple-page-master master-name="first" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="14mm" margin-bottom="85mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-LB-yellow" extent="14mm"/> 
					<fo:region-after region-name="footer-even" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				
				<!-- Page 2 and 3: (left bottom + right top, yellow) -->
				<fo:simple-page-master master-name="page2" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-LB-yellow" extent="14mm"/> 
					<fo:region-after region-name="footer-even" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				<fo:simple-page-master master-name="page3" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-RT-yellow" extent="14mm"/> 
					<fo:region-after region-name="footer-odd" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				
				<!-- Page 4 and 5: (left top + right bottom, blue) -->
				<fo:simple-page-master master-name="page4" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-LT-blue" extent="14mm"/> 
					<fo:region-after region-name="footer-even" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				<fo:simple-page-master master-name="page5" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-RB-blue" extent="14mm"/> 
					<fo:region-after region-name="footer-odd" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				
				<!-- Page 6 and 7: (left bottom + right top, orange) -->
				<fo:simple-page-master master-name="page6" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-LB-orange" extent="14mm"/> 
					<fo:region-after region-name="footer-even" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				<fo:simple-page-master master-name="page7" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-RT-orange" extent="14mm"/> 
					<fo:region-after region-name="footer-odd" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				
				<!-- Page 8 and 9: (left top + right bottom, yellow) -->
				<fo:simple-page-master master-name="page8" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-LT-yellow" extent="14mm"/> 
					<fo:region-after region-name="footer-even" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				<fo:simple-page-master master-name="page9" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-RB-yellow" extent="14mm"/> 
					<fo:region-after region-name="footer-odd" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				
				<fo:simple-page-master master-name="page10" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-LB-blue" extent="14mm"/> 
					<fo:region-after region-name="footer-even" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				<fo:simple-page-master master-name="page11" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-RT-blue" extent="14mm"/> 
					<fo:region-after region-name="footer-odd" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				
				<fo:simple-page-master master-name="page12" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-LT-orange" extent="14mm"/> 
					<fo:region-after region-name="footer-even" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				<fo:simple-page-master master-name="page13" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-RB-orange" extent="14mm"/> 
					<fo:region-after region-name="footer-odd" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				
				<fo:simple-page-master master-name="page14" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-LB-yellow" extent="14mm"/> 
					<fo:region-after region-name="footer-even" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				<fo:simple-page-master master-name="page15" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-RT-yellow" extent="14mm"/> 
					<fo:region-after region-name="footer-odd" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				
				<fo:simple-page-master master-name="page16" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-LT-blue" extent="14mm"/> 
					<fo:region-after region-name="footer-even" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				<fo:simple-page-master master-name="page17" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-RB-blue" extent="14mm"/> 
					<fo:region-after region-name="footer-odd" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				
				<fo:simple-page-master master-name="page18" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-LB-orange" extent="14mm"/> 
					<fo:region-after region-name="footer-even" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				<fo:simple-page-master master-name="page19" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-RT-orange" extent="14mm"/> 
					<fo:region-after region-name="footer-odd" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				
				<fo:simple-page-master master-name="page20" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-LT-yellow" extent="14mm"/> 
					<fo:region-after region-name="footer-even" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				<fo:simple-page-master master-name="page21" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-RB-yellow" extent="14mm"/> 
					<fo:region-after region-name="footer-odd" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				
				<fo:simple-page-master master-name="page22" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-LB-blue" extent="14mm"/> 
					<fo:region-after region-name="footer-even" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				<fo:simple-page-master master-name="page23" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-RT-blue" extent="14mm"/> 
					<fo:region-after region-name="footer-odd" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				
				<fo:simple-page-master master-name="page24" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-LT-orange" extent="14mm"/> 
					<fo:region-after region-name="footer-even" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				<fo:simple-page-master master-name="page25" page-width="{$pageWidth}mm" page-height="{$pageHeight}mm">
					<fo:region-body margin-top="{$marginTop}mm" margin-bottom="{$marginBottom}mm" margin-left="{$marginLeftRight1}mm" margin-right="{$marginLeftRight2}mm"/>
					<fo:region-before region-name="header-RB-orange" extent="14mm"/> 
					<fo:region-after region-name="footer-odd" extent="12.5mm"/>
					<fo:region-start region-name="left-region" extent="13mm"/>
					<fo:region-end region-name="right-region" extent="12mm"/>
				</fo:simple-page-master>
				
				<fo:page-sequence-master master-name="document">
					<fo:single-page-master-reference master-reference="first"/>
					<xsl:call-template name="insert_single-page-master-reference">
						<xsl:with-param name="initial">true</xsl:with-param>
					</xsl:call-template>
					<fo:repeatable-page-master-reference master-reference="page2"/>
				</fo:page-sequence-master>
				
				
			</fo:layout-master-set>
			
			<fo:declarations>
				<xsl:call-template name="addPDFUAmeta"/>
			</fo:declarations>
			
			<xsl:call-template name="addBookmarks">
				<xsl:with-param name="contents" select="$contents"/>
			</xsl:call-template>
			
			<!-- Cover Page -->
			<fo:page-sequence master-reference="cover-page" force-page-count="no-force">
				
				<fo:flow flow-name="xsl-region-body" color="black">
					<!-- background image -->
					<fo:block-container absolute-position="fixed" left="0mm" top="0mm" font-size="0">
						<fo:block>
							<!-- <fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Cover-Background))}" width="{$pageWidth}mm" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Image Front"/> -->
							<fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Cover-Background))}" height="{$pageHeight}mm" content-width="scale-to-fit" scaling="uniform" fox:alt-text="Image Front"/>
						</fo:block>
					</fo:block-container>
					
					<!-- Ribose logo -->
					<fo:block-container absolute-position="fixed" left="171mm" top="{$pageHeight - 33.4}mm" height="30mm" width="40mm"> <!-- top="246mm" -->
						<fo:block>
							<fo:instream-foreign-object content-width="32mm" fox:alt-text="Ribose Logo">
								<xsl:copy-of select="$Ribose-Logo"/>
							</fo:instream-foreign-object>
						</fo:block>
					</fo:block-container>
					
					<fo:block-container absolute-position="fixed" left="0mm" top="{$pageHeight - 52.4}mm" height="41mm" display-align="after"> <!--  top="227mm" -->
						<fo:block font-size="10pt" line-height="1.4">
							<fo:table table-layout="fixed" width="100%">
								<fo:table-column column-width="proportional-column-width(13)"/>
								<fo:table-column column-width="proportional-column-width(38)"/>
								<fo:table-column column-width="proportional-column-width(90)"/>
								<fo:table-column column-width="proportional-column-width(61)"/>
								<fo:table-column column-width="proportional-column-width(12)"/>
								<fo:table-body>
									<fo:table-row>
										<fo:table-cell><fo:block/></fo:table-cell>
										<fo:table-cell display-align="before" border-right="0.5pt solid black" padding-top="1.5mm" padding-right="5mm">
											<!-- Author's list -->
											<fo:block>
												<xsl:for-each select="/rsd:rsd-standard/rsd:bibdata/rsd:contributor[rsd:role/@type='author']/rsd:person/rsd:name/rsd:completename">
													<fo:block>
														<xsl:apply-templates/>
													</fo:block>
												</xsl:for-each>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell display-align="before" padding-top="1.5mm" padding-left="8mm">
											<fo:block>
												<xsl:apply-templates select="/rsd:rsd-standard/rsd:bibdata/rsd:ext/rsd:security"/>
												<fo:block>
													<xsl:call-template name="convertDate">
														<xsl:with-param name="date" select="/rsd:rsd-standard/rsd:bibdata/rsd:date[@type = 'published']/rsd:on"/>
														<xsl:with-param name="format" select="'Month DD, YYYY'"/>
													</xsl:call-template>
												</fo:block>
												<fo:block><xsl:value-of select="$docnumber_version"/></fo:block>
												<xsl:apply-templates select="/rsd:rsd-standard/rsd:bibdata/rsd:ext/rsd:editorialgroup/rsd:committee"/>
												<fo:block>
													<xsl:text>Â© </xsl:text>
													<xsl:value-of select="$copyright_year"/>
													<xsl:text> </xsl:text>
													<xsl:variable name="publisher" select="/rsd:rsd-standard/rsd:bibdata/rsd:contributor[rsd:role/@type='publisher']/rsd:organization/rsd:name"/>
													<xsl:value-of select="$publisher"/>
													<xsl:if test="substring($publisher, string-length($publisher)) != '.'"><xsl:text>.</xsl:text></xsl:if>
													<xsl:text> </xsl:text>
													<xsl:call-template name="getLocalizedString">
														<xsl:with-param name="key">all_rights_reserved</xsl:with-param>
													</xsl:call-template>
												</fo:block>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell display-align="after">
											<fo:block text-align="right">
												<!-- <fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Ribose-Logo))}" width="32mm" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Ribose Logo"/> -->
											</fo:block>
										</fo:table-cell>
										<fo:table-cell><fo:block/></fo:table-cell>
									</fo:table-row>
								</fo:table-body>
							</fo:table>
						</fo:block>
					</fo:block-container>
					
					<!-- title and version  -->
					<fo:block-container margin-top="{$pageHeight - 279.4}mm" height="60mm" display-align="center">
						<xsl:variable name="title" select="/rsd:rsd-standard/rsd:bibdata/rsd:title[@language = $lang]"/>
						<xsl:if test="string-length($title) &gt; 80">
							<xsl:attribute name="margin-right">-30mm</xsl:attribute>
						</xsl:if>
						<fo:block font-size="27pt" font-weight="bold" role="H1">
								<xsl:apply-templates select="/rsd:rsd-standard/rsd:bibdata/rsd:title[@language = $lang]" mode="cover_page"/>
						</fo:block>
						<fo:block space-before="9pt" font-size="16.8pt" font-weight="600">
							<xsl:value-of select="$docnumber_version"/>
						</fo:block>
					</fo:block-container>
				</fo:flow>
			</fo:page-sequence>
			<!-- END Cover page -->
			
			<!-- ToC pages -->
			<fo:page-sequence master-reference="document" force-page-count="no-force"> <!-- master-reference="toc" -->
				<xsl:call-template name="insertHeaderFooter"/>
				<fo:flow flow-name="xsl-region-body">
					<xsl:if test="$contents//item[@display = 'true']">
						<fo:block role="TOC">
						<!-- <fo:block-container absolute-position="fixed" left="13mm" top="15mm"> -->
							<fo:block font-size="27pt" font-weight="bold" color="black" margin-left="-15mm" margin-bottom="13mm" role="H1">
								<xsl:call-template name="getLocalizedString">
									<xsl:with-param name="key">table_of_contents</xsl:with-param>
								</xsl:call-template>
							</fo:block>
						<!-- </fo:block-container> -->
						
							<fo:block-container margin-left="32mm" margin-right="-17mm">
								<fo:block-container margin-left="0mm" margin-right="0mm">
									<xsl:for-each select="$contents//item[@display = 'true']">
										<fo:block font-size="13pt" role="TOCI">
											<xsl:if test="@level = 1">
												<xsl:if test="preceding-sibling::item[@display = 'true' and @level = 1]">
													<xsl:attribute name="space-before">16pt</xsl:attribute>
												</xsl:if>
												<xsl:attribute name="space-after">4pt</xsl:attribute>
												<xsl:attribute name="font-weight">bold</xsl:attribute>
												<xsl:attribute name="keep-with-next">always</xsl:attribute>
												<xsl:attribute name="color">black</xsl:attribute>
											</xsl:if>
											<xsl:if test="@level &gt;= 2">
												<xsl:attribute name="margin-left"><xsl:value-of select="(@level - 1) * 16.5"/>mm</xsl:attribute>
												<xsl:attribute name="space-before">4pt</xsl:attribute>
												<xsl:attribute name="space-after">5pt</xsl:attribute>
											</xsl:if>
											<fo:block text-align-last="justify">
												<fo:basic-link internal-destination="{@id}" fox:alt-text="{title}">
													<xsl:value-of select="@section"/>
													<xsl:text> </xsl:text>
													<xsl:apply-templates select="title"/>
													<xsl:text> Â </xsl:text>
													<fo:inline>
														<fo:leader leader-pattern="rule" rule-thickness="0.2mm"/>
														<fo:inline padding-left="2mm"><fo:page-number-citation ref-id="{@id}"/></fo:inline>
													</fo:inline>
												</fo:basic-link>
											</fo:block>
										</fo:block>
									</xsl:for-each>
									
									<!-- List of Tables -->
									<xsl:if test="$contents//tables/table">
										<xsl:call-template name="insertListOf_Title">
											<xsl:with-param name="title" select="$title-list-tables"/>
										</xsl:call-template>
										<xsl:for-each select="$contents//tables/table">
											<xsl:call-template name="insertListOf_Item"/>
										</xsl:for-each>
									</xsl:if>
									
									<!-- List of Figures -->
									<xsl:if test="$contents//figures/figure">
										<xsl:call-template name="insertListOf_Title">
											<xsl:with-param name="title" select="$title-list-figures"/>
										</xsl:call-template>
										<xsl:for-each select="$contents//figures/figure">
											<xsl:call-template name="insertListOf_Item"/>
										</xsl:for-each>
									</xsl:if>
									
								</fo:block-container>
							</fo:block-container>
						</fo:block>
						<fo:block break-after="page"/>
					</xsl:if>
					<fo:block margin-bottom="12pt">Â </fo:block>
					
					<xsl:apply-templates select="/rsd:rsd-standard/rsd:boilerplate/rsd:legal-statement"/>
					
					<xsl:apply-templates select="/rsd:rsd-standard/rsd:boilerplate/rsd:feedback-statement"/>
				
				</fo:flow>
			</fo:page-sequence>
			<!-- ============== -->
			<!-- END ToC  pages -->
			<!-- ============== -->
			
			<fo:page-sequence master-reference="document" force-page-count="no-force">
				<fo:static-content flow-name="xsl-footnote-separator">
					<fo:block>
						<fo:leader leader-pattern="rule" leader-length="30%"/>
					</fo:block>
				</fo:static-content>
				<xsl:call-template name="insertHeaderFooter"/>
				<fo:flow flow-name="xsl-region-body">
				
					<fo:block line-height="130%">
					
						<xsl:apply-templates select="/rsd:rsd-standard/rsd:preface/rsd:abstract"/>
						<xsl:apply-templates select="/rsd:rsd-standard/rsd:preface/rsd:foreword"/>
						<xsl:apply-templates select="/rsd:rsd-standard/rsd:preface/rsd:executivesummary"/>
						<xsl:apply-templates select="/rsd:rsd-standard/rsd:preface/rsd:introduction"/>
						<xsl:apply-templates select="/rsd:rsd-standard/rsd:preface/rsd:clause"/>
						<xsl:apply-templates select="/rsd:rsd-standard/rsd:preface/rsd:acknowledgements"/>
					
						<xsl:call-template name="processMainSectionsDefault"/>
						
					</fo:block>
				</fo:flow>
			</fo:page-sequence>
			
		</fo:root>
	</xsl:template> 

	<xsl:template name="insertListOf_Title">
		<xsl:param name="title"/>
		<fo:block font-size="13pt" font-weight="bold" color="black" margin-top="12pt" margin-bottom="12pt" keep-with-next="always">
			<xsl:value-of select="$title"/>
		</fo:block>
	</xsl:template>
	
	<xsl:template name="insertListOf_Item">
		<fo:block font-size="13pt" role="TOCI" margin-left="16.5mm" space-before="4pt" space-after="5pt">
			<fo:block text-align-last="justify">
				<fo:basic-link internal-destination="{@id}">
					<xsl:call-template name="setAltText">
						<xsl:with-param name="value" select="@alt-text"/>
					</xsl:call-template>
					<xsl:apply-templates select="." mode="contents"/>
					<xsl:text> Â </xsl:text>
					<fo:inline>
						<fo:leader leader-pattern="rule" rule-thickness="0.2mm"/>
						<fo:inline padding-left="2mm"><fo:page-number-citation ref-id="{@id}"/></fo:inline>
					</fo:inline>
				</fo:basic-link>
			</fo:block>
		</fo:block>
	</xsl:template>

	<xsl:template match="rsd:title" mode="cover_page">
		<xsl:apply-templates/>
	</xsl:template>

	<xsl:template match="rsd:bibdata/rsd:ext/rsd:security">
		<fo:block>
			<xsl:call-template name="capitalize">
				<xsl:with-param name="str" select="."/>
			</xsl:call-template>
		</fo:block>
	</xsl:template>

	<xsl:template match="rsd:bibdata/rsd:ext/rsd:editorialgroup/rsd:committee">
		<fo:block><xsl:apply-templates/></fo:block>
	</xsl:template>

	<xsl:template match="node()">		
		<xsl:apply-templates/>			
	</xsl:template>
	
	<!-- ============================= -->
	<!-- CONTENTS                                       -->
	<!-- ============================= -->

	<!-- element with title -->
	<xsl:template match="*[rsd:title]" mode="contents">
		<xsl:variable name="level">
			<xsl:call-template name="getLevel">
				<xsl:with-param name="depth" select="rsd:title/@depth"/>
			</xsl:call-template>
		</xsl:variable>
		
		<xsl:variable name="display">
			<xsl:choose>				
				<xsl:when test="$level &gt; $toc_level">false</xsl:when>
				<xsl:otherwise>true</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:variable name="skip">
			<xsl:choose>
				<xsl:when test="ancestor-or-self::rsd:bibitem">true</xsl:when>
				<xsl:when test="ancestor-or-self::rsd:term">true</xsl:when>				
				<xsl:otherwise>false</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		
		<xsl:if test="$skip = 'false'">		
		
			<xsl:variable name="section">
				<xsl:call-template name="getSection"/>
			</xsl:variable>
			
			<xsl:variable name="title">
				<xsl:call-template name="getName"/>
			</xsl:variable>
			
			<xsl:variable name="type">
				<xsl:value-of select="local-name()"/>
			</xsl:variable>
			
			<item id="{@id}" level="{$level}" section="{$section}" type="{$type}" display="{$display}">
				<title>
					<xsl:apply-templates select="xalan:nodeset($title)" mode="contents_item"/>
				</title>
				<xsl:apply-templates mode="contents"/>
			</item>
			
		</xsl:if>	
		
	</xsl:template>	
	
	<!-- ============================= -->
	<!-- ============================= -->
	
	
	<xsl:template match="rsd:feedback-statement" priority="2">
		<fo:block-container border="1pt solid black" padding="1mm" padding-left="2mm">
			<fo:block>
				<xsl:apply-templates/>
			</fo:block>
		</fo:block-container>
	</xsl:template>

	
	<xsl:template match="rsd:legal-statement" priority="2">
		<xsl:apply-templates/>
	</xsl:template>
		
	
	<!-- ====== -->
	<!-- title      -->
	<!-- ====== -->
	
	<!-- <xsl:template match="rsd:annex/rsd:title">
		<xsl:variable name="level">
			<xsl:call-template name="getLevel"/>
		</xsl:variable>
		<xsl:variable name="color">
			<xsl:choose>
				<xsl:when test="$level &gt;= 1">rgb(14, 26, 133)</xsl:when>
				<xsl:otherwise>black</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<fo:block font-size="12pt" text-align="center" margin-bottom="12pt" keep-with-next="always" color="{$color}">			
			<xsl:apply-templates />
		</fo:block>
	</xsl:template> -->
	
	<xsl:template match="rsd:title" name="title">
		
		<xsl:variable name="level">
			<xsl:call-template name="getLevel"/>
		</xsl:variable>
		
		<xsl:variable name="font-size">
			<xsl:choose>
				<!-- <xsl:when test="ancestor::rsd:preface and $level &gt;= 2">12pt</xsl:when>
				<xsl:when test="ancestor::rsd:preface">13pt</xsl:when> -->
				<xsl:when test="$level = 1">22pt</xsl:when>
				<xsl:when test="$level = 2">13pt</xsl:when>
				<xsl:when test="$level &gt;= 3">11pt</xsl:when>
				<xsl:otherwise>16pt</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
	
		<xsl:variable name="font-weight">
			<xsl:choose>
				<xsl:when test="$level &gt;= 4">normal</xsl:when>
				<xsl:otherwise>bold</xsl:otherwise> <!-- 600 - semibold-->
			</xsl:choose>
		</xsl:variable>
	
		<xsl:variable name="space-before">
			<xsl:choose>
				<xsl:when test="$level = 1">25mm</xsl:when>
				<xsl:when test="$level = 2">9mm</xsl:when>
				<xsl:when test="$level = 3">12pt</xsl:when>
				<xsl:when test="$level &gt;= 4">8pt</xsl:when>
				<xsl:otherwise>13.5pt</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:variable name="margin-bottom">
			<xsl:choose>
				<xsl:when test="$level = 1">12pt</xsl:when>
				<xsl:when test="$level &gt;= 4">4pt</xsl:when>
				<xsl:otherwise>12pt</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:variable name="element-name">
			<xsl:choose>
				<xsl:when test="../@inline-header = 'true'">fo:inline</xsl:when>
				<xsl:otherwise>fo:block</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:variable name="color">
			<xsl:choose>
				<xsl:when test="$level = 3"><xsl:value-of select="$color_blue"/></xsl:when>
				<xsl:otherwise>black</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		
		<xsl:element name="{$element-name}">
			<xsl:attribute name="font-size"><xsl:value-of select="$font-size"/></xsl:attribute>
			<xsl:attribute name="font-weight"><xsl:value-of select="$font-weight"/></xsl:attribute> 
			<xsl:attribute name="space-before"><xsl:value-of select="$space-before"/></xsl:attribute>
			<xsl:attribute name="margin-bottom"><xsl:value-of select="$margin-bottom"/></xsl:attribute>
			<xsl:attribute name="keep-with-next">always</xsl:attribute>		
			<xsl:attribute name="color"><xsl:value-of select="$color"/></xsl:attribute>
			<xsl:attribute name="line-height">125%</xsl:attribute>
			<xsl:attribute name="role">H<xsl:value-of select="$level"/></xsl:attribute>
			
			<xsl:choose>
				<xsl:when test="$level = 1">
					<fo:block-container margin-left="-15mm">
						<fo:block-container margin-left="0mm">
							<fo:table width="100%" table-layout="fixed">
								<fo:table-column column-width="15mm"/>
								<fo:table-column column-width="150mm"/>				
								<fo:table-body>
									<fo:table-row>
										<fo:table-cell text-align="left">
											<fo:block>
												<xsl:call-template name="extractSection"/><!-- section number 1 2 3  ... -->
											</fo:block>
										</fo:table-cell>
										<fo:table-cell>
											<fo:block>
													<xsl:call-template name="extractTitle"/> <!-- section title -->
													<xsl:apply-templates select="following-sibling::*[1][local-name() = 'variant-title'][@type = 'sub']" mode="subtitle"/>
												</fo:block>
										</fo:table-cell>
									</fo:table-row>
								</fo:table-body>
							</fo:table>
						</fo:block-container>
					</fo:block-container>
				</xsl:when>
				<xsl:otherwise>
						<xsl:apply-templates/>
						<xsl:apply-templates select="following-sibling::*[1][local-name() = 'variant-title'][@type = 'sub']" mode="subtitle"/>
				</xsl:otherwise>
			</xsl:choose>
			
		</xsl:element>
			
	</xsl:template>
	<!-- ====== -->
	<!-- ====== -->
	
	<!-- <xsl:template match="*[local-name() = 'clause'][@type = 'scope']" priority="3">
		<fo:block-container width="90mm">
			<xsl:call-template name="setId"/>
			<fo:block>
				<xsl:apply-templates />
			</fo:block>
		</fo:block-container>
	</xsl:template> -->
	
	<xsl:template match="*[local-name() = 'terms']" priority="3">
		<fo:block break-after="page"/>
		<fo:block id="{@id}">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template>
	
	<xsl:template match="rsd:p" name="paragraph">
		<xsl:param name="inline" select="'false'"/>
		<xsl:param name="split_keep-within-line"/>
		<xsl:variable name="previous-element" select="local-name(preceding-sibling::*[1])"/>
		<xsl:variable name="element-name">
			<xsl:choose>
				<xsl:when test="$inline = 'true'">fo:inline</xsl:when>
				<xsl:when test="../@inline-header = 'true' and $previous-element = 'title'">fo:inline</xsl:when> <!-- first paragraph after inline title -->
				<xsl:when test="local-name(..) = 'admonition'">fo:inline</xsl:when>
				<xsl:otherwise>fo:block</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:element name="{$element-name}">
			<xsl:attribute name="id">
				<xsl:value-of select="@id"/>
			</xsl:attribute>
			<xsl:attribute name="text-align">
				<xsl:choose>
					<!-- <xsl:when test="ancestor::rsd:preface">justify</xsl:when> -->
					<xsl:when test="@align"><xsl:value-of select="@align"/></xsl:when>
					<xsl:otherwise>left</xsl:otherwise><!-- justify -->
				</xsl:choose>
			</xsl:attribute>
			<xsl:attribute name="space-after">
				<xsl:choose>
					<xsl:when test="ancestor::rsd:li">6pt</xsl:when>
					<xsl:when test="ancestor::rsd:feedback-statement and not(following-sibling::rsd:p)">0pt</xsl:when>
					<xsl:otherwise>6pt</xsl:otherwise> <!-- 12pt-->
				</xsl:choose>
			</xsl:attribute>
			<xsl:if test="ancestor::rsd:dl"> <!-- ancestor::rsd:li or  -->
				<xsl:attribute name="margin-bottom">0pt</xsl:attribute>
			</xsl:if>
			
			<!-- <xsl:attribute name="line-height">155%</xsl:attribute> -->
			<xsl:apply-templates>
				<xsl:with-param name="split_keep-within-line" select="$split_keep-within-line"/>
			</xsl:apply-templates>
		</xsl:element>
		<xsl:if test="$element-name = 'fo:inline' and not($inline = 'true') and not(local-name(..) = 'admonition')">
			<fo:block margin-bottom="12pt">
				 <xsl:if test="ancestor::rsd:annex">
					<xsl:attribute name="margin-bottom">0</xsl:attribute>
				 </xsl:if>
				<xsl:value-of select="$linebreak"/>
			</fo:block>
		</xsl:if>
		<xsl:if test="$inline = 'true'">
			<fo:block>Â </fo:block>
		</xsl:if>
	</xsl:template>
	
	
	<xsl:template match="rsd:fn/rsd:p">
		<fo:block>
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template>
	

	<xsl:template match="rsd:ul | rsd:ol" mode="list" priority="2">
		<fo:block-container>
			<fo:block-container margin-left="0mm">
				<xsl:choose>
					<xsl:when test="not(ancestor::rsd:ul) and not(ancestor::rsd:ol)">
						<fo:block padding-bottom="12pt" padding-top="4pt">
							<xsl:call-template name="listProcessing"/>
						</fo:block>
					</xsl:when>
					<xsl:otherwise>
						<xsl:call-template name="listProcessing"/>
					</xsl:otherwise>
				</xsl:choose>
			</fo:block-container>
		</fo:block-container>
	</xsl:template>
	
	<xsl:template name="listProcessing">
		<fo:list-block xsl:use-attribute-sets="list-style">
			<xsl:apply-templates/>
		</fo:list-block>
	</xsl:template>
	
	
	<xsl:template match="rsd:ul/rsd:note | rsd:ol/rsd:note" priority="2">
		<fo:list-item font-size="10pt">
			<xsl:if test="ancestor::rsd:table">
				<xsl:attribute name="font-size">8pt</xsl:attribute>
			</xsl:if>
			<fo:list-item-label><fo:block/></fo:list-item-label>
			<fo:list-item-body>
				<fo:block>
					<xsl:apply-templates select="rsd:name"/>
					<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
				</fo:block>
			</fo:list-item-body>
		</fo:list-item>
	</xsl:template>
	
	
	
	<xsl:template match="rsd:preferred | rsd:deprecates | rsd:admitted" priority="2">
		<xsl:variable name="level">
			<xsl:call-template name="getLevel"/>
		</xsl:variable>
		<xsl:variable name="font-size">
			<xsl:choose>
				<xsl:when test="$level &gt;= 2">13pt</xsl:when>
				<xsl:otherwise>12pt</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="levelTerm">
			<xsl:call-template name="getLevelTermName"/>
		</xsl:variable>
		<fo:block font-weight="bold" color="black" font-size="{$font-size}" keep-with-next="always" role="H{$levelTerm}"> <!-- 600 - semibold -->
			<xsl:if test="preceding-sibling::*[1][self::rsd:name]">
				<xsl:attribute name="space-before">11mm</xsl:attribute>
				<fo:inline padding-right="1mm">
					<xsl:apply-templates select="ancestor::rsd:term[1]/rsd:name"/>
				</fo:inline>
			</xsl:if>
			
			<fo:inline padding-right="4mm"><xsl:if test="local-name() = 'preferred'"><xsl:call-template name="setStyle_preferred"/></xsl:if><xsl:apply-templates/></fo:inline>
			
			<xsl:variable name="term_kind">
				<xsl:choose>
					<xsl:when test="local-name() = 'deprecates'">
						<xsl:call-template name="getLocalizedString">
							<xsl:with-param name="key">deprecated</xsl:with-param>
						</xsl:call-template>
					</xsl:when>
					<xsl:otherwise><xsl:value-of select="local-name()"/></xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:variable name="kind" select="local-name()"/>
			
			<fo:inline-container text-align="center" width="29mm">
				<xsl:attribute name="background-color">
					<xsl:choose>
						<xsl:when test="$kind = 'preferred'">rgb(255, 240, 198)</xsl:when>
						<xsl:when test="$kind = 'deprecates'">rgb(252, 221, 194)</xsl:when>
						<xsl:when test="$kind = 'admitted'">rgb(208, 223, 239)</xsl:when>							
					</xsl:choose>
				</xsl:attribute>
				<fo:block padding-top="1mm" padding-bottom="0.5mm">
					<fo:inline font-size="11pt" font-weight="300">
						<xsl:value-of select="java:toUpperCase(java:java.lang.String.new($term_kind))"/>
					</fo:inline>
				</fo:block>
			</fo:inline-container>
			
		</fo:block>
	</xsl:template>
	
	<xsl:template match="rsd:references[not(@normative='true')]" priority="3">
		<fo:block break-after="page"/>
		<fo:block id="{@id}">
			<fo:table width="100%" table-layout="fixed">
				<fo:table-column column-width="100%"/>				
				<fo:table-header>
					<fo:table-row>
						<fo:table-cell text-align="left">
							<fo:block margin-left="-15mm" role="H1"> <!-- Bibliography section title -->
								<xsl:attribute name="font-size">22pt</xsl:attribute>
								<xsl:attribute name="font-weight">bold</xsl:attribute>
								<xsl:attribute name="margin-bottom">16pt</xsl:attribute>
								<xsl:attribute name="color">black</xsl:attribute>
								<xsl:attribute name="line-height">125%</xsl:attribute>
								<xsl:apply-templates select="rsd:title/node()"/>
							</fo:block>
						</fo:table-cell>
					</fo:table-row>
				</fo:table-header>
				<fo:table-body>
					<fo:table-row>
						<fo:table-cell text-align="left">
							<fo:block>
								<xsl:apply-templates select="node()[not(local-name() = 'title')]"/>
							</fo:block>
						</fo:table-cell>
					</fo:table-row>
				</fo:table-body>
			</fo:table>
			
		</fo:block>
	</xsl:template>
	
	
	
	<xsl:template match="*[local-name()='table' or local-name()='figure'  or local-name()='sourcecode']/*[local-name() = 'name']/node()[1][self::text()]" priority="2">
		<xsl:choose>
			<xsl:when test="contains(., 'â')">
				<xsl:variable name="name_number" select="normalize-space(translate(substring-before(., 'â'), 'Â ', ' '))"/>
				<fo:inline font-weight="bold" font-style="normal" color="black"><xsl:value-of select="java:toUpperCase(java:java.lang.String.new($name_number))"/><xsl:text>:</xsl:text></fo:inline>
				<xsl:value-of select="substring-after(., 'â')"/>
			</xsl:when>
			<xsl:when test="starts-with(., 'Figure ') or starts-with(., 'Table ')">
				<fo:inline font-weight="bold" font-style="normal" color="black"><xsl:value-of select="java:toUpperCase(java:java.lang.String.new(.))"/></fo:inline>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="."/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	
	<xsl:template match="*[local-name() = 'clause']" priority="2">
		<xsl:variable name="level">
			<xsl:call-template name="getLevel">
				<xsl:with-param name="depth" select="rsd:title/@depth"/>
			</xsl:call-template>
		</xsl:variable>
		<fo:block-container>
			<xsl:if test="$level &gt;= 4">
				<xsl:attribute name="margin-left">13mm</xsl:attribute>
			</xsl:if>
			<fo:block-container margin-left="0mm">
				<fo:block>
					<xsl:call-template name="setId"/>
					<xsl:apply-templates/>
				</fo:block>
			</fo:block-container>
		</fo:block-container>
	</xsl:template>
	
	
	<xsl:template name="insertHeaderFooter">
		
		<!-- LT - left top -->
		<!-- RT - right top -->
		<!-- LB - left bottom -->
		<!-- RB - right bottom -->
		<xsl:variable name="width">170,26</xsl:variable>
		<xsl:variable name="left_left">-28.02</xsl:variable>
		<xsl:variable name="left_right">72</xsl:variable>
		<xsl:variable name="top_top">-25.75</xsl:variable>
		<xsl:variable name="top_bottom">194</xsl:variable>
		<!-- Yellow -->
		<fo:static-content flow-name="header-LT-yellow" role="artifact">
			<fo:block-container absolute-position="fixed" left="{$left_left}mm" top="{$top_top}mm" font-size="0">
				<fo:block>
						<fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Page-Background-yellow-left))}" content-width="100%" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Image Page"/>
					</fo:block>
			</fo:block-container>
		</fo:static-content>
		<fo:static-content flow-name="header-RT-yellow" role="artifact">
			<fo:block-container absolute-position="fixed" left="{$left_right}mm" top="{$top_top}mm" font-size="0">
				<fo:block>
						<fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Page-Background-yellow-right))}" content-width="100%" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Image Page"/>
					</fo:block>
			</fo:block-container>
		</fo:static-content>
		<fo:static-content flow-name="header-LB-yellow" role="artifact">
			<fo:block-container absolute-position="fixed" left="{$left_left}mm" top="{$top_bottom}mm" font-size="0">
				<fo:block>
						<fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Page-Background-yellow-left))}" content-width="100%" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Image Page"/>
					</fo:block>
			</fo:block-container>
		</fo:static-content>
		<fo:static-content flow-name="header-RB-yellow" role="artifact">
			<fo:block-container absolute-position="fixed" left="{$left_right}mm" top="{$top_bottom}mm" font-size="0">
				<fo:block>
						<fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Page-Background-yellow-right))}" content-width="100%" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Image Page"/>
					</fo:block>
			</fo:block-container>
		</fo:static-content>
		<!-- Blue -->
		<fo:static-content flow-name="header-LT-blue" role="artifact">
			<fo:block-container absolute-position="fixed" left="{$left_left}mm" top="{$top_top}mm" font-size="0">
				<fo:block>
						<fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Page-Background-blue-left))}" content-width="100%" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Image Page"/>
					</fo:block>
			</fo:block-container>
		</fo:static-content>
		<fo:static-content flow-name="header-RT-blue" role="artifact">
			<fo:block-container absolute-position="fixed" left="{$left_right}mm" top="{$top_top}mm" font-size="0">
				<fo:block>
						<fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Page-Background-blue-right))}" content-width="100%" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Image Page"/>
					</fo:block>
			</fo:block-container>
		</fo:static-content>
		<fo:static-content flow-name="header-LB-blue" role="artifact">
			<fo:block-container absolute-position="fixed" left="{$left_left}mm" top="{$top_bottom}mm" font-size="0">
				<fo:block>
						<fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Page-Background-blue-left))}" content-width="100%" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Image Page"/>
					</fo:block>
			</fo:block-container>
		</fo:static-content>
		<fo:static-content flow-name="header-RB-blue" role="artifact">
			<fo:block-container absolute-position="fixed" left="{$left_right}mm" top="{$top_bottom}mm" font-size="0">
				<fo:block>
						<fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Page-Background-blue-right))}" content-width="100%" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Image Page"/>
					</fo:block>
			</fo:block-container>
		</fo:static-content>
		<!-- Orange -->
		<fo:static-content flow-name="header-LT-orange" role="artifact">
			<fo:block-container absolute-position="fixed" left="{$left_left}mm" top="{$top_top}mm" font-size="0">
				<fo:block>
						<fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Page-Background-orange-left))}" content-width="100%" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Image Page"/>
					</fo:block>
			</fo:block-container>
		</fo:static-content>
		<fo:static-content flow-name="header-RT-orange" role="artifact">
			<fo:block-container absolute-position="fixed" left="{$left_right}mm" top="{$top_top}mm" font-size="0">
				<fo:block>
						<fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Page-Background-orange-right))}" content-width="100%" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Image Page"/>
					</fo:block>
			</fo:block-container>
		</fo:static-content>
		<fo:static-content flow-name="header-LB-orange" role="artifact">
			<fo:block-container absolute-position="fixed" left="{$left_left}mm" top="{$top_bottom}mm" font-size="0">
				<fo:block>
						<fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Page-Background-orange-left))}" content-width="100%" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Image Page"/>
					</fo:block>
			</fo:block-container>
		</fo:static-content>
		<fo:static-content flow-name="header-RB-orange" role="artifact">
			<fo:block-container absolute-position="fixed" left="{$left_right}mm" top="{$top_bottom}mm" font-size="0">
				<fo:block>
						<fo:external-graphic src="{concat('data:image/png;base64,', normalize-space($Image-Page-Background-orange-right))}" content-width="100%" content-height="scale-to-fit" scaling="uniform" fox:alt-text="Image Page"/>
					</fo:block>
			</fo:block-container>
		</fo:static-content>
		
		<xsl:call-template name="insertFooter"/>
	</xsl:template>
	
	<xsl:template name="insertFooter">
		<xsl:param name="invert"/>
		<xsl:variable name="footerText"> 
			<xsl:text>Ribose</xsl:text>
			<xsl:text>Â </xsl:text>
			<xsl:call-template name="capitalize">
				<xsl:with-param name="str" select="/rsd:rsd-standard/rsd:bibdata/rsd:ext/rsd:doctype"/>
			</xsl:call-template>
		</xsl:variable>
		<fo:static-content flow-name="footer-odd" role="artifact">
			<fo:block-container font-size="8pt" height="100%" color="black">
				<fo:block text-align-last="justify" margin-right="1mm">
					<fo:inline padding-right="11mm"><fo:page-number/></fo:inline>
					<xsl:value-of select="$footerText"/>
					<fo:inline keep-together.within-line="always">
						<fo:leader leader-pattern="space"/>
						<xsl:value-of select="$copyright"/>
					</fo:inline>
				</fo:block>
			</fo:block-container>
		</fo:static-content>
		<fo:static-content flow-name="footer-even" role="artifact">
			<fo:block-container font-size="8pt" height="100%" color="black">
				<fo:block text-align-last="justify" margin-right="1mm">
					<fo:inline padding-right="11mm"><fo:page-number/></fo:inline>
					<fo:inline>
						<xsl:if test="$invert = 'true'">
							<xsl:attribute name="color">white</xsl:attribute>
						</xsl:if>
						<xsl:value-of select="$footerText"/>
					</fo:inline>
					<fo:inline keep-together.within-line="always">
						<fo:leader leader-pattern="space"/>
						<xsl:value-of select="$copyright"/>
					</fo:inline>
				</fo:block>
			</fo:block-container>
		</fo:static-content>
	</xsl:template>

	<xsl:variable name="Ribose-Logo">
		<svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" data-name="Layer 1" viewBox="0 0 2000 501"><title>ribose logo normal</title><path d="M180.9,31.3h36.2l18.1,31.3h36.2l18.1,31.3-18.1,31.4,18.1,31.3-18.1,31.3,18.1,31.3-18.1,31.3H235.2l-18.1,31.3,18.1,31.3h36.2l18.1,31.4-18.1,31.3,18.1,31.3-18.1,31.3,18.1,31.3L272.1,501H235.9l-18.8-31.3,18.1-31.3-18.1-31.3,18.1-31.3-18.1-31.3H180.9l-18.1-31.4H126.7l-18.1-31.3H72.4L54.3,313.1l18.1,31.4L54.3,375.8l18.1,31.3L54.3,438.4l18.1,31.3L55,501H18.8L0,469.7l18.1-31.3L0,407.1l18.1-31.3L0,344.5l18.1-31.4L0,281.8l18.1-31.3L0,219.2l18.1-31.3L0,156.6l18.1-31.3L0,93.9,18.1,62.6H54.3L72.4,31.3h36.2L126.7,0h36.1ZM126.7,250.5h36.1l18.1-31.3h36.2l18.1-31.3-18.1-31.3,18.1-31.3L217.1,93.9H180.9L162.8,62.6H126.7L108.6,93.9H72.4L54.3,125.3l18.1,31.3L54.3,187.9l18.1,31.3h36.2Z"/><path d="M470.2,93.9l-18.1,31.4H416L397.9,93.9,416,62.6h36.1Zm0,125.3-18.1,31.3,18.1,31.3-18.1,31.3,18.1,31.4-18.1,31.3,18.1,31.3-18.1,31.3,18.1,31.3L452.8,501H416.7l-18.8-31.3L416,438.4l-18.1-31.3L416,375.8l-18.1-31.3L416,313.1l-18.1-31.3L416,250.5l-18.1-31.3L416,187.9h36.1Z"/><path d="M659.9,31.3,641.8,62.6l18.1,31.3-18.1,31.4,18.1,31.3-18.1,31.3,18.1,31.3h36.2l18.1-31.3h36.2l18.1,31.3h36.2l18.1,31.3h36.1L877,281.8l-18.1,31.3L877,344.5l-18.1,31.3L877,407.1l-18.1,31.3H822.8l-18.1,31.3H768.5L751.1,501H714.9l-18.8-31.3H659.9L642.5,501H606.3l-18.7-31.3,18.1-31.3-18.1-31.3,18.1-31.3-18.1-31.3,18.1-31.4-18.1-31.3,18.1-31.3-18.1-31.3,18.1-31.3-18.1-31.3,18.1-31.3L587.6,93.9l18.1-31.3L587.6,31.3,605.7,0h36.1ZM822.8,375.8l-18.1-31.3,18.1-31.4-18.1-31.3H768.5l-18.1-31.3H714.2l-18.1,31.3H659.9l-18.1,31.3,18.1,31.4-18.1,31.3,18.1,31.3h36.2l18.1,31.3h36.2l18.1-31.3h36.2Z"/><path d="M1034.6,219.2h36.2l18.1-31.3H1125l18.1,31.3h36.2l18.1,31.3h36.2l18.1,31.3-18.1,31.3,18.1,31.4-18.1,31.3,18.1,31.3-18.1,31.3h-36.2l-18.1,31.3h-36.2L1125.7,501h-36.1l-18.8-31.3h-36.2l-18.1-31.3H980.3l-18.1-31.3,18.1-31.3-18.1-31.3,18.1-31.4-18.1-31.3,18.1-31.3h36.2Zm0,125.3-18.1,31.3,18.1,31.3h36.2l18.1,31.3H1125l18.1-31.3h36.2l18.1-31.3-18.1-31.3,18.1-31.4-18.1-31.3h-36.2L1125,250.5h-36.1l-18.1,31.3h-36.2l-18.1,31.3Z"/><path d="M1408,219.2h36.2l18.1-31.3h36.2l18.1,31.3h36.2l18.1,31.3h36.2l18,31.3-18,31.3h-36.2l-18.1-31.3h-36.2l-18.1-31.3h-36.2l-18.1,31.3,18.1,31.3h36.2l18.1,31.4h36.2l18.1,31.3h36.2l18,31.3-18,31.3h-36.2l-18.1,31.3h-36.2L1499.2,501H1463l-18.8-31.3H1408l-18.1-31.3h-36.2l-18-31.3,18-31.3h36.2l18.1,31.3h36.2l18.1,31.3h36.2l18.1-31.3-18.1-31.3h-36.2l-18.1-31.3H1408l-18.1-31.4h-36.2l-18-31.3,18-31.3h36.2Z"/><path d="M1782.9,219.2h36.2l18.1-31.3h36.2l18,31.3h36.2l18.1,31.3h36.2l18.1,31.3-18.1,31.3h-36.2l-18.1,31.4h-36.2l-18,31.3h-36.2l-18.1-31.3,18.1-31.4h36.2l18-31.3-18-31.3h-36.2l-18.1,31.3h-36.2l-18.1,31.3,18.1,31.4-18.1,31.3,18.1,31.3h36.2l18.1,31.3h36.2l18-31.3h36.2l18.1-31.3h36.2l18.1,31.3-18.1,31.3h-36.2l-18.1,31.3h-36.2L1874.1,501h-36.2l-18.8-31.3h-36.2l-18.1-31.3h-36.2l-18.1-31.3,18.1-31.3-18.1-31.3,18.1-31.4-18.1-31.3,18.1-31.3h36.2Z"/></svg>
	</xsl:variable>
	
	<xsl:variable name="Image-Cover-Background">
		<xsl:text></xsl:text>
	</xsl:variable>
	
	<xsl:variable name="Image-Page-Background-blue-left">
		<xsl:text></xsl:text>
	</xsl:variable>
	
	<xsl:variable name="Image-Page-Background-blue-right">
		<xsl:text></xsl:text>
	</xsl:variable>
	
	<xsl:variable name="Image-Page-Background-orange-left">
		<xsl:text></xsl:text>
	</xsl:variable>
	
	<xsl:variable name="Image-Page-Background-orange-right">
		<xsl:text></xsl:text>
	</xsl:variable>
	<xsl:variable name="Image-Page-Background-yellow-left">
		<xsl:text>iVBORw0KGgoAAAANSUhEUgAAB9sAAAU8CAYAAACUwfVeAAAACXBIWXMAAC4jAAAuIwF4pT92AAAFFmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNi4wLWMwMDIgNzkuMTY0MzYwLCAyMDIwLzAyLzEzLTAxOjA3OjIyICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjEuMSAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDIxLTA2LTExVDE2OjA4OjM3KzAzOjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMS0wNi0xMVQyMToxOTowOSswMzowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyMS0wNi0xMVQyMToxOTowOSswMzowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHBob3Rvc2hvcDpJQ0NQcm9maWxlPSJzUkdCIElFQzYxOTY2LTIuMSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpiNTFkYTQ5NS1lMjVjLTNi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</xsl:text>
	</xsl:variable>
	
	<xsl:variable name="Image-Page-Background-yellow-right">
		<xsl:text></xsl:text>
	</xsl:variable>


	<xsl:template name="insert_single-page-master-reference">
		<xsl:param name="initial">false</xsl:param>
		<xsl:param name="counter" select="50"/>
		<xsl:if test="$counter &gt; 0">
			<xsl:if test="$initial = 'false'">
				<fo:single-page-master-reference master-reference="page2"/>
			</xsl:if>
			<fo:single-page-master-reference master-reference="page3"/>
			<fo:single-page-master-reference master-reference="page4"/>
			<fo:single-page-master-reference master-reference="page5"/>
			<fo:single-page-master-reference master-reference="page6"/>
			<fo:single-page-master-reference master-reference="page7"/>
			<fo:single-page-master-reference master-reference="page8"/>
			<fo:single-page-master-reference master-reference="page9"/>
			<fo:single-page-master-reference master-reference="page10"/>
			<fo:single-page-master-reference master-reference="page11"/>
			<fo:single-page-master-reference master-reference="page12"/>
			<fo:single-page-master-reference master-reference="page13"/>
			<fo:single-page-master-reference master-reference="page14"/>
			<fo:single-page-master-reference master-reference="page15"/>
			<fo:single-page-master-reference master-reference="page16"/>
			<fo:single-page-master-reference master-reference="page17"/>
			<fo:single-page-master-reference master-reference="page18"/>
			<fo:single-page-master-reference master-reference="page19"/>
			<fo:single-page-master-reference master-reference="page20"/>
			<fo:single-page-master-reference master-reference="page21"/>
			<fo:single-page-master-reference master-reference="page22"/>
			<fo:single-page-master-reference master-reference="page23"/>
			<fo:single-page-master-reference master-reference="page24"/>
			<fo:single-page-master-reference master-reference="page25"/>
			<xsl:call-template name="insert_single-page-master-reference">
				<xsl:with-param name="counter" select="$counter - 1"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template>
						

	
<xsl:param name="svg_images"/><xsl:variable name="images" select="document($svg_images)"/><xsl:param name="basepath"/><xsl:param name="external_index"/><xsl:param name="syntax-highlight">false</xsl:param><xsl:param name="add_math_as_text">true</xsl:param><xsl:param name="table_if">false</xsl:param><xsl:param name="table_widths"/><xsl:variable name="table_widths_from_if" select="xalan:nodeset($table_widths)"/><xsl:variable name="table_widths_from_if_calculated_">
		<xsl:for-each select="$table_widths_from_if//table">
			<xsl:copy>
				<xsl:copy-of select="@*"/>
				<xsl:call-template name="calculate-column-widths-autolayout-algorithm"/>
			</xsl:copy>
		</xsl:for-each>
	</xsl:variable><xsl:variable name="table_widths_from_if_calculated" select="xalan:nodeset($table_widths_from_if_calculated_)"/><xsl:param name="table_if_debug">false</xsl:param><xsl:variable name="isGenerateTableIF_">
		false
	</xsl:variable><xsl:variable name="isGenerateTableIF" select="normalize-space($isGenerateTableIF_)"/><xsl:variable name="lang">
		<xsl:call-template name="getLang"/>
	</xsl:variable><xsl:variable name="papersize" select="java:toLowerCase(java:java.lang.String.new(normalize-space(//*[contains(local-name(), '-standard')]/*[local-name() = 'misc-container']/*[local-name() = 'presentation-metadata']/*[local-name() = 'papersize'])))"/><xsl:variable name="papersize_width_">
		<xsl:choose>
			<xsl:when test="$papersize = 'letter'">215.9</xsl:when>
			<xsl:when test="$papersize = 'a4'">210</xsl:when>
		</xsl:choose>
	</xsl:variable><xsl:variable name="papersize_width" select="normalize-space($papersize_width_)"/><xsl:variable name="papersize_height_">
		<xsl:choose>
			<xsl:when test="$papersize = 'letter'">279.4</xsl:when>
			<xsl:when test="$papersize = 'a4'">297</xsl:when>
		</xsl:choose>
	</xsl:variable><xsl:variable name="papersize_height" select="normalize-space($papersize_height_)"/><xsl:variable name="pageWidth_">
		<xsl:choose>
			<xsl:when test="$papersize_width != ''"><xsl:value-of select="$papersize_width"/></xsl:when>
			<xsl:otherwise>
				215.9
			</xsl:otherwise>
		</xsl:choose>
	</xsl:variable><xsl:variable name="pageWidth" select="normalize-space($pageWidth_)"/><xsl:variable name="pageHeight_">
		<xsl:choose>
			<xsl:when test="$papersize_height != ''"><xsl:value-of select="$papersize_height"/></xsl:when>
			<xsl:otherwise>
				279.4
			</xsl:otherwise>
		</xsl:choose>
	</xsl:variable><xsl:variable name="pageHeight" select="normalize-space($pageHeight_)"/><xsl:variable name="marginLeftRight1_">
		29
	</xsl:variable><xsl:variable name="marginLeftRight1" select="normalize-space($marginLeftRight1_)"/><xsl:variable name="marginLeftRight2_">
		29
	</xsl:variable><xsl:variable name="marginLeftRight2" select="normalize-space($marginLeftRight2_)"/><xsl:variable name="marginTop_">
		14
	</xsl:variable><xsl:variable name="marginTop" select="normalize-space($marginTop_)"/><xsl:variable name="marginBottom_">
		22
	</xsl:variable><xsl:variable name="marginBottom" select="normalize-space($marginBottom_)"/><xsl:variable name="titles_">
		
		
		<!-- These titles of Table of contents renders different than determined in localized-strings -->
		<title-toc lang="en">
			
			
			
		</title-toc>
		<title-toc lang="fr">
			<xsl:text>Sommaire</xsl:text>
		</title-toc>
		<title-toc lang="zh">
			
					<xsl:text>Contents</xsl:text>
				
		</title-toc>
		
		<title-descriptors lang="en">Descriptors</title-descriptors>
		
		<title-part lang="en">
			
			
			
		</title-part>
		<title-part lang="fr">
			
			
			
		</title-part>
		<title-part lang="ru">
			
			
		</title-part>
		<title-part lang="zh">ç¬¬ # é¨å:</title-part>
		
		<title-subpart lang="en">Sub-part #</title-subpart>
		<title-subpart lang="fr">Partie de sub #</title-subpart>
		
		<title-list-tables lang="en">List of Tables</title-list-tables>
		
		<title-list-figures lang="en">List of Figures</title-list-figures>
		
		<title-table-figures lang="en">Table of Figures</title-table-figures>
		
		<title-list-recommendations lang="en">List of Recommendations</title-list-recommendations>
		
		<title-summary lang="en">Summary</title-summary>
		
		<title-continued lang="ru">(Ð¿ÑÐ¾Ð´Ð¾Ð»Ð¶ÐµÐ½Ð¸Ðµ)</title-continued>
		<title-continued lang="en">(continued)</title-continued>
		<title-continued lang="fr">(continuÃ©)</title-continued>
		
	</xsl:variable><xsl:variable name="titles" select="xalan:nodeset($titles_)"/><xsl:variable name="title-list-tables">
		<xsl:variable name="toc_table_title" select="//*[contains(local-name(), '-standard')]/*[local-name() = 'misc-container']/*[local-name() = 'toc'][@type='table']/*[local-name() = 'title']"/>
		<xsl:value-of select="$toc_table_title"/>
		<xsl:if test="normalize-space($toc_table_title) = ''">
			<xsl:call-template name="getTitle">
				<xsl:with-param name="name" select="'title-list-tables'"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:variable><xsl:variable name="title-list-figures">
		<xsl:variable name="toc_figure_title" select="//*[contains(local-name(), '-standard')]/*[local-name() = 'misc-container']/*[local-name() = 'toc'][@type='figure']/*[local-name() = 'title']"/>
		<xsl:value-of select="$toc_figure_title"/>
		<xsl:if test="normalize-space($toc_figure_title) = ''">
			<xsl:call-template name="getTitle">
				<xsl:with-param name="name" select="'title-list-figures'"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:variable><xsl:variable name="title-list-recommendations">
		<xsl:variable name="toc_requirement_title" select="//*[contains(local-name(), '-standard')]/*[local-name() = 'misc-container']/*[local-name() = 'toc'][@type='requirement']/*[local-name() = 'title']"/>
		<xsl:value-of select="$toc_requirement_title"/>
		<xsl:if test="normalize-space($toc_requirement_title) = ''">
			<xsl:call-template name="getTitle">
				<xsl:with-param name="name" select="'title-list-recommendations'"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:variable><xsl:variable name="bibdata">
		<xsl:copy-of select="//*[contains(local-name(), '-standard')]/*[local-name() = 'bibdata']"/>
		<xsl:copy-of select="//*[contains(local-name(), '-standard')]/*[local-name() = 'localized-strings']"/>
	</xsl:variable><xsl:variable name="linebreak">&#8232;</xsl:variable><xsl:variable name="tab_zh">ã</xsl:variable><xsl:variable name="non_breaking_hyphen">â</xsl:variable><xsl:variable name="thin_space">â</xsl:variable><xsl:variable name="zero_width_space">â</xsl:variable><xsl:variable name="hair_space">â</xsl:variable><xsl:variable name="en_dash">â</xsl:variable><xsl:template name="getTitle">
		<xsl:param name="name"/>
		<xsl:param name="lang"/>
		<xsl:variable name="lang_">
			<xsl:choose>
				<xsl:when test="$lang != ''">
					<xsl:value-of select="$lang"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:call-template name="getLang"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="language" select="normalize-space($lang_)"/>
		<xsl:variable name="title_" select="$titles/*[local-name() = $name][@lang = $language]"/>
		<xsl:choose>
			<xsl:when test="normalize-space($title_) != ''">
				<xsl:value-of select="$title_"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$titles/*[local-name() = $name][@lang = 'en']"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:variable name="lower">abcdefghijklmnopqrstuvwxyz</xsl:variable><xsl:variable name="upper">ABCDEFGHIJKLMNOPQRSTUVWXYZ</xsl:variable><xsl:variable name="en_chars" select="concat($lower,$upper,',.`1234567890-=~!@#$%^*()_+[]{}\|?/')"/><xsl:variable name="font_noto_sans">Noto Sans, Noto Sans HK, Noto Sans JP, Noto Sans KR, Noto Sans SC, Noto Sans TC</xsl:variable><xsl:variable name="font_noto_sans_mono">Noto Sans Mono, Noto Sans Mono CJK HK, Noto Sans Mono CJK JP, Noto Sans Mono CJK KR, Noto Sans Mono CJK SC, Noto Sans Mono CJK TC</xsl:variable><xsl:variable name="font_noto_serif">Noto Serif, Noto Serif HK, Noto Serif JP, Noto Serif KR, Noto Serif SC, Noto Serif TC</xsl:variable><xsl:attribute-set name="root-style">
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-family">OpenSans, STIX Two Math, <xsl:value-of select="$font_noto_sans"/></xsl:attribute>
			<xsl:attribute name="font-family-generic">Sans</xsl:attribute>
			<xsl:attribute name="font-weight">300</xsl:attribute>
			<xsl:attribute name="font-size">11pt</xsl:attribute>
			<xsl:attribute name="color">rgb(88, 88, 90)</xsl:attribute>
		
		
	</xsl:attribute-set><xsl:template name="insertRootStyle">
		<xsl:param name="root-style"/>
		<xsl:variable name="root-style_" select="xalan:nodeset($root-style)"/>
		
		<xsl:variable name="additional_fonts_">
			<xsl:for-each select="//*[contains(local-name(), '-standard')][1]/*[local-name() = 'misc-container']/*[local-name() = 'presentation-metadata'][*[local-name() = 'name'] = 'fonts']/*[local-name() = 'value'] |       //*[contains(local-name(), '-standard')][1]/*[local-name() = 'presentation-metadata'][*[local-name() = 'name'] = 'fonts']/*[local-name() = 'value']">
				<xsl:value-of select="."/><xsl:if test="position() != last()">, </xsl:if>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="additional_fonts" select="normalize-space($additional_fonts_)"/>
		
		<xsl:variable name="font_family_generic" select="$root-style_/root-style/@font-family-generic"/>
		
		<xsl:for-each select="$root-style_/root-style/@*">
		
			<xsl:choose>
				<xsl:when test="local-name() = 'font-family-generic'"><!-- skip, it's using for determine 'sans' or 'serif' --></xsl:when>
				<xsl:when test="local-name() = 'font-family'">
				
					<xsl:variable name="font_regional_prefix">
						<xsl:choose>
							<xsl:when test="$font_family_generic = 'Sans'">Noto Sans</xsl:when>
							<xsl:otherwise>Noto Serif</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
				
					<xsl:attribute name="{local-name()}">
					
						<xsl:variable name="font_extended">
							<xsl:choose>
								<xsl:when test="$lang = 'zh'"><xsl:value-of select="$font_regional_prefix"/> SC</xsl:when>
								<xsl:when test="$lang = 'hk'"><xsl:value-of select="$font_regional_prefix"/> HK</xsl:when>
								<xsl:when test="$lang = 'jp'"><xsl:value-of select="$font_regional_prefix"/> JP</xsl:when>
								<xsl:when test="$lang = 'kr'"><xsl:value-of select="$font_regional_prefix"/> KR</xsl:when>
								<xsl:when test="$lang = 'sc'"><xsl:value-of select="$font_regional_prefix"/> SC</xsl:when>
								<xsl:when test="$lang = 'tc'"><xsl:value-of select="$font_regional_prefix"/> TC</xsl:when>
							</xsl:choose>
						</xsl:variable>
						<xsl:if test="normalize-space($font_extended) != ''">
							<xsl:value-of select="$font_regional_prefix"/><xsl:text>, </xsl:text>
							<xsl:value-of select="$font_extended"/><xsl:text>, </xsl:text>
						</xsl:if>
					
						<xsl:value-of select="."/>
						
						<xsl:if test="$additional_fonts != ''">
							<xsl:text>, </xsl:text><xsl:value-of select="$additional_fonts"/>
						</xsl:if>
					</xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:copy-of select="."/>
				</xsl:otherwise>
			</xsl:choose>
		
			<!-- <xsl:choose>
				<xsl:when test="local-name() = 'font-family'">
					<xsl:attribute name="{local-name()}">
						<xsl:value-of select="."/>, <xsl:value-of select="$additional_fonts"/>
					</xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:copy-of select="."/>
				</xsl:otherwise>
			</xsl:choose> -->
		</xsl:for-each>
	</xsl:template><xsl:attribute-set name="copyright-statement-style">
		
	</xsl:attribute-set><xsl:attribute-set name="copyright-statement-title-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="copyright-statement-p-style">
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="license-statement-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="license-statement-title-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="license-statement-p-style">
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="legal-statement-style">
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="legal-statement-title-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		
		
		
		
		
			<xsl:attribute name="font-weight">normal</xsl:attribute>
			<xsl:attribute name="padding-top">2mm</xsl:attribute>
			<xsl:attribute name="margin-bottom">6pt</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="legal-statement-p-style">
		
	</xsl:attribute-set><xsl:attribute-set name="feedback-statement-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="feedback-statement-title-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="feedback-statement-p-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="link-style">
		
		
		
			<xsl:attribute name="color"><xsl:value-of select="$color_blue"/></xsl:attribute>
			<xsl:attribute name="font-weight">300</xsl:attribute><!-- bold -->
			<xsl:attribute name="text-decoration">underline</xsl:attribute>
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="sourcecode-container-style">
		
			<xsl:attribute name="space-after">12pt</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="sourcecode-style">
		<xsl:attribute name="white-space">pre</xsl:attribute>
		<xsl:attribute name="wrap-option">wrap</xsl:attribute>
		<xsl:attribute name="role">Code</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
				
		
		
		
			<xsl:attribute name="font-family">Source Code Pro, <xsl:value-of select="$font_noto_sans_mono"/></xsl:attribute>			
			<xsl:attribute name="margin-bottom">6pt</xsl:attribute>
			<xsl:attribute name="keep-with-next">always</xsl:attribute>
			<xsl:attribute name="line-height">113%</xsl:attribute>
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="permission-style">
		
	</xsl:attribute-set><xsl:attribute-set name="permission-name-style">
		
	</xsl:attribute-set><xsl:attribute-set name="permission-label-style">
		
	</xsl:attribute-set><xsl:attribute-set name="requirement-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="requirement-name-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		
		
	</xsl:attribute-set><xsl:attribute-set name="requirement-label-style">
		
	</xsl:attribute-set><xsl:attribute-set name="subject-style">
	</xsl:attribute-set><xsl:attribute-set name="inherit-style">
	</xsl:attribute-set><xsl:attribute-set name="description-style">
	</xsl:attribute-set><xsl:attribute-set name="specification-style">
	</xsl:attribute-set><xsl:attribute-set name="measurement-target-style">
	</xsl:attribute-set><xsl:attribute-set name="verification-style">
	</xsl:attribute-set><xsl:attribute-set name="import-style">
	</xsl:attribute-set><xsl:attribute-set name="recommendation-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="recommendation-name-style">
		
		
	</xsl:attribute-set><xsl:attribute-set name="recommendation-label-style">
		
	</xsl:attribute-set><xsl:attribute-set name="termexample-style">
		
		
		
		
		
		
		
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		

	</xsl:attribute-set><xsl:attribute-set name="example-style">
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="margin-top">12pt</xsl:attribute>			
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>			
		
	</xsl:attribute-set><xsl:attribute-set name="example-body-style">
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="example-name-style">
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-weight">bold</xsl:attribute>
			<xsl:attribute name="color"><xsl:value-of select="$color_blue"/></xsl:attribute>
			<xsl:attribute name="padding-right">0.5mm</xsl:attribute>
				
				
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="example-p-style">
		
		
		
		
		
		
		
		
		
		
					
			<xsl:attribute name="margin-bottom">14pt</xsl:attribute>
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="termexample-name-style">
		
		
		
		
				
		
			<xsl:attribute name="font-weight">bold</xsl:attribute>
			<xsl:attribute name="color"><xsl:value-of select="$color_blue"/></xsl:attribute>
			<xsl:attribute name="padding-right">0.5mm</xsl:attribute>
				
	</xsl:attribute-set><xsl:variable name="table-border_">
		
		
	</xsl:variable><xsl:variable name="table-border" select="normalize-space($table-border_)"/><xsl:attribute-set name="table-container-style">
		<xsl:attribute name="margin-left">0mm</xsl:attribute>
		<xsl:attribute name="margin-right">0mm</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
					
		
		
	</xsl:attribute-set><xsl:attribute-set name="table-style">
		<xsl:attribute name="table-omit-footer-at-break">true</xsl:attribute>
		<xsl:attribute name="table-layout">fixed</xsl:attribute>
		<xsl:attribute name="margin-left">0mm</xsl:attribute>
		<xsl:attribute name="margin-right">0mm</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="border">0pt solid black</xsl:attribute>
			<xsl:attribute name="font-size">9.5pt</xsl:attribute> <!-- 8pt -->
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="table-name-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
			
		
		
		
				
		
				
		
		
		
				
		
		
		
		
			<xsl:attribute name="font-size">13pt</xsl:attribute>
			<xsl:attribute name="font-weight">300</xsl:attribute>
			<xsl:attribute name="color">black</xsl:attribute>
			<xsl:attribute name="text-align">left</xsl:attribute>
			<xsl:attribute name="margin-top">12pt</xsl:attribute>
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="table-row-style">
		<xsl:attribute name="min-height">4mm</xsl:attribute>
		
		
		
		
			<xsl:attribute name="min-height">8.5mm</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="table-header-row-style" use-attribute-sets="table-row-style">
		<xsl:attribute name="font-weight">bold</xsl:attribute>
		
		
		
		
		
		
		
				
		
			<xsl:attribute name="font-weight">normal</xsl:attribute>
			<xsl:attribute name="background-color">rgb(32, 98, 169)</xsl:attribute>
			<xsl:attribute name="color">white</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="table-footer-row-style" use-attribute-sets="table-row-style">
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="table-body-row-style" use-attribute-sets="table-row-style">

	</xsl:attribute-set><xsl:attribute-set name="table-header-cell-style">
		<xsl:attribute name="font-weight">bold</xsl:attribute>
		<xsl:attribute name="border">solid black 1pt</xsl:attribute>
		<xsl:attribute name="padding-left">1mm</xsl:attribute>
		<xsl:attribute name="padding-right">1mm</xsl:attribute>
		<xsl:attribute name="display-align">center</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-weight">normal</xsl:attribute>
			<xsl:attribute name="border">0pt solid black</xsl:attribute>
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="table-cell-style">
		<xsl:attribute name="display-align">center</xsl:attribute>
		<xsl:attribute name="border">solid black 1pt</xsl:attribute>
		<xsl:attribute name="padding-left">1mm</xsl:attribute>
		<xsl:attribute name="padding-right">1mm</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="border">0pt solid black</xsl:attribute>
			<xsl:attribute name="padding-top">0.5mm</xsl:attribute>
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="table-footer-cell-style">
		<xsl:attribute name="border">solid black 1pt</xsl:attribute>
		<xsl:attribute name="padding-left">1mm</xsl:attribute>
		<xsl:attribute name="padding-right">1mm</xsl:attribute>
		<xsl:attribute name="padding-top">1mm</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="border">solid black 0pt</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="table-note-style">
		<xsl:attribute name="font-size">10pt</xsl:attribute>
		<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-size">8pt</xsl:attribute>					
		
	</xsl:attribute-set><xsl:attribute-set name="table-fn-style">
		<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
		
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="table-fn-number-style">
		<xsl:attribute name="font-size">80%</xsl:attribute>
		<xsl:attribute name="padding-right">5mm</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="fn-container-body-style">
		<xsl:attribute name="text-indent">0</xsl:attribute>
		<xsl:attribute name="start-indent">0</xsl:attribute>
		
		
	</xsl:attribute-set><xsl:attribute-set name="table-fn-body-style">
		
	</xsl:attribute-set><xsl:attribute-set name="figure-fn-number-style">
		<xsl:attribute name="font-size">80%</xsl:attribute>
		<xsl:attribute name="padding-right">5mm</xsl:attribute>
		<xsl:attribute name="vertical-align">super</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="figure-fn-body-style">
		<xsl:attribute name="text-align">justify</xsl:attribute>
		<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="dt-row-style">
		
		
			<xsl:attribute name="min-height">7mm</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="dt-cell-style">
	</xsl:attribute-set><xsl:attribute-set name="dt-block-style">
		<xsl:attribute name="margin-top">6pt</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="margin-top">0pt</xsl:attribute>
			<xsl:attribute name="font-weight">bold</xsl:attribute>
			<xsl:attribute name="color"><xsl:value-of select="$color_blue"/></xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="dl-name-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		<xsl:attribute name="margin-bottom">6pt</xsl:attribute>
			
		
		
		
		
		
				
		
		
		
				
		
		
		
		
			<xsl:attribute name="font-weight">300</xsl:attribute>
			<xsl:attribute name="color">black</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="dd-cell-style">
		<xsl:attribute name="padding-left">2mm</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="appendix-style">
		
		
		
			<xsl:attribute name="font-size">12pt</xsl:attribute>
			<xsl:attribute name="font-weight">normal</xsl:attribute>
			<xsl:attribute name="color">black</xsl:attribute>
			<xsl:attribute name="margin-top">12pt</xsl:attribute>
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="appendix-example-style">
		
		
		
			<xsl:attribute name="font-weight">normal</xsl:attribute>
			<xsl:attribute name="color">black</xsl:attribute>
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="xref-style">
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="eref-style">
		
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="note-style">
		
		
		
		
				
				
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="margin-top">12pt</xsl:attribute>			
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>			
		
	</xsl:attribute-set><xsl:variable name="note-body-indent">10mm</xsl:variable><xsl:variable name="note-body-indent-table">5mm</xsl:variable><xsl:attribute-set name="note-name-style">
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-weight">bold</xsl:attribute>
			<xsl:attribute name="color"><xsl:value-of select="$color_blue"/></xsl:attribute>
			<xsl:attribute name="padding-right">0.5mm</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="table-note-name-style">
		<xsl:attribute name="padding-right">2mm</xsl:attribute>
		
		
		
		
			<xsl:attribute name="font-weight">bold</xsl:attribute>
			<xsl:attribute name="color"><xsl:value-of select="$color_blue"/></xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="note-p-style">
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="margin-top">12pt</xsl:attribute>			
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="termnote-style">
		
		
				
		
		
		
		
		
			<xsl:attribute name="margin-bottom">6pt</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="termnote-name-style">
		
				
		
		
			<xsl:attribute name="font-weight">bold</xsl:attribute>
			<xsl:attribute name="color"><xsl:value-of select="$color_blue"/></xsl:attribute>
			<xsl:attribute name="padding-right">0.5mm</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="termnote-p-style">
		
	</xsl:attribute-set><xsl:attribute-set name="quote-style">
		<xsl:attribute name="margin-left">12mm</xsl:attribute>
		<xsl:attribute name="margin-right">12mm</xsl:attribute>
		
			<xsl:attribute name="margin-top">12pt</xsl:attribute>
			<xsl:attribute name="margin-left">13mm</xsl:attribute>
		
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="quote-source-style">		
		<xsl:attribute name="text-align">right</xsl:attribute>
		
			<xsl:attribute name="margin-right">25mm</xsl:attribute>
		
				
	</xsl:attribute-set><xsl:attribute-set name="termsource-style">
		
		
		
		
		
		
		
			<xsl:attribute name="keep-with-previous">always</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="termsource-text-style">
		
			<xsl:attribute name="color"><xsl:value-of select="$color_blue"/></xsl:attribute>
		
		
	</xsl:attribute-set><xsl:attribute-set name="origin-style">
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="term-style">
		
	</xsl:attribute-set><xsl:attribute-set name="term-name-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		<xsl:attribute name="font-weight">bold</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="figure-style">
		 <!-- background for image -->
			<xsl:attribute name="background-color">rgb(236,242,246)</xsl:attribute>
			<xsl:attribute name="padding-left">11mm</xsl:attribute>
			<xsl:attribute name="margin-left">0mm</xsl:attribute>
			<xsl:attribute name="padding-right">11mm</xsl:attribute>
			<xsl:attribute name="margin-right">0mm</xsl:attribute>
			<xsl:attribute name="padding-top">7.5mm</xsl:attribute>
			<xsl:attribute name="padding-bottom">7.5mm</xsl:attribute>
			<xsl:attribute name="margin-bottom">3mm</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="figure-name-style">
		
		
		
				
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-size">13pt</xsl:attribute>
			<xsl:attribute name="font-weight">300</xsl:attribute>
			<xsl:attribute name="color">black</xsl:attribute>
			<xsl:attribute name="text-align">left</xsl:attribute>
			<xsl:attribute name="margin-top">12pt</xsl:attribute>
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
			<xsl:attribute name="keep-with-next">always</xsl:attribute>
		
		

		
		
		
			
	</xsl:attribute-set><xsl:attribute-set name="formula-style">
		<xsl:attribute name="margin-top">6pt</xsl:attribute>
		<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="formula-stem-block-style">
		<xsl:attribute name="text-align">center</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="text-align">left</xsl:attribute>
			<xsl:attribute name="margin-left">5mm</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="formula-stem-number-style">
		<xsl:attribute name="text-align">right</xsl:attribute>
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="image-style">
		<xsl:attribute name="text-align">center</xsl:attribute>
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="figure-pseudocode-p-style">
		
	</xsl:attribute-set><xsl:attribute-set name="image-graphic-style">
		<xsl:attribute name="width">100%</xsl:attribute>
		<xsl:attribute name="content-height">100%</xsl:attribute>
		<xsl:attribute name="scaling">uniform</xsl:attribute>			
		
		
			<xsl:attribute name="content-height">scale-to-fit</xsl:attribute>
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="tt-style">
		
			<xsl:attribute name="font-family">Source Code Pro, <xsl:value-of select="$font_noto_sans_mono"/></xsl:attribute>			
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="sourcecode-name-style">
		<xsl:attribute name="font-size">11pt</xsl:attribute>
		<xsl:attribute name="font-weight">bold</xsl:attribute>
		<xsl:attribute name="text-align">center</xsl:attribute>
		<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		<xsl:attribute name="keep-with-previous">always</xsl:attribute>
		
			<xsl:attribute name="font-size">13pt</xsl:attribute>
			<xsl:attribute name="font-weight">300</xsl:attribute>
			<xsl:attribute name="color">black</xsl:attribute>
			<xsl:attribute name="text-align">left</xsl:attribute>
			<xsl:attribute name="margin-top">12pt</xsl:attribute>
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
			<xsl:attribute name="keep-with-next">always</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="preferred-block-style">
		
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="preferred-term-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		<xsl:attribute name="font-weight">bold</xsl:attribute>
		
		
	</xsl:attribute-set><xsl:attribute-set name="domain-style">
				
	</xsl:attribute-set><xsl:attribute-set name="admitted-style">
		
		
		
			<xsl:attribute name="font-weight">bold</xsl:attribute>
			<xsl:attribute name="color">black</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="deprecates-style">
		
		
			<xsl:attribute name="font-weight">bold</xsl:attribute>
			<xsl:attribute name="color">black</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="definition-style">
		
		
		
			<xsl:attribute name="keep-with-previous">always</xsl:attribute>
			<xsl:attribute name="space-before">12pt</xsl:attribute>
			<xsl:attribute name="space-after">6pt</xsl:attribute>
		
	</xsl:attribute-set><xsl:variable name="color-added-text">
		<xsl:text>rgb(0, 255, 0)</xsl:text>
	</xsl:variable><xsl:attribute-set name="add-style">
		
				<xsl:attribute name="color">red</xsl:attribute>
				<xsl:attribute name="text-decoration">underline</xsl:attribute>
				<!-- <xsl:attribute name="color">black</xsl:attribute>
				<xsl:attribute name="background-color"><xsl:value-of select="$color-added-text"/></xsl:attribute>
				<xsl:attribute name="padding-top">1mm</xsl:attribute>
				<xsl:attribute name="padding-bottom">0.5mm</xsl:attribute> -->
			
	</xsl:attribute-set><xsl:variable name="add-style">
			<add-style xsl:use-attribute-sets="add-style"/>
		</xsl:variable><xsl:template name="append_add-style">
		<xsl:copy-of select="xalan:nodeset($add-style)/add-style/@*"/>
	</xsl:template><xsl:variable name="color-deleted-text">
		<xsl:text>red</xsl:text>
	</xsl:variable><xsl:attribute-set name="del-style">
		<xsl:attribute name="color"><xsl:value-of select="$color-deleted-text"/></xsl:attribute>
		<xsl:attribute name="text-decoration">line-through</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="mathml-style">
		<xsl:attribute name="font-family">STIX Two Math</xsl:attribute>
		
		
	</xsl:attribute-set><xsl:attribute-set name="list-style">
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="provisional-distance-between-starts">6mm</xsl:attribute>
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="list-name-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
			
		
		
		
		
				
		
		
		
				
		
		
		
		
			<xsl:attribute name="font-weight">300</xsl:attribute>
			<xsl:attribute name="color">black</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="list-item-style">
		
		
			<xsl:attribute name="space-after">4pt</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="list-item-label-style">
		
		
		
			<xsl:attribute name="color"><xsl:value-of select="$color_blue"/></xsl:attribute>
			<xsl:attribute name="font-weight">bold</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="list-item-body-style">
		
		
		
			<xsl:attribute name="line-height-shift-adjustment">disregard-shifts</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="toc-style">
		<xsl:attribute name="line-height">135%</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="fn-reference-style">
		<xsl:attribute name="font-size">80%</xsl:attribute>
		<xsl:attribute name="keep-with-previous.within-line">always</xsl:attribute>
		
		
		
		
		
		
		
			<xsl:attribute name="font-size">70%</xsl:attribute>
			<xsl:attribute name="vertical-align">super</xsl:attribute>
			<xsl:attribute name="font-style">italic</xsl:attribute>
		
		
	</xsl:attribute-set><xsl:attribute-set name="fn-style">
		<xsl:attribute name="keep-with-previous.within-line">always</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="fn-num-style">
		<xsl:attribute name="keep-with-previous.within-line">always</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-size">65%</xsl:attribute>
			<xsl:attribute name="vertical-align">super</xsl:attribute>
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="fn-body-style">
		<xsl:attribute name="font-weight">normal</xsl:attribute>
		<xsl:attribute name="font-style">normal</xsl:attribute>
		<xsl:attribute name="text-indent">0</xsl:attribute>
		<xsl:attribute name="start-indent">0</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-size">10pt</xsl:attribute>
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
			<xsl:attribute name="color">rgb(168, 170, 173)</xsl:attribute>
			<xsl:attribute name="text-align">left</xsl:attribute>
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="fn-body-num-style">
		<xsl:attribute name="keep-with-next.within-line">always</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-size">60%</xsl:attribute>
			<xsl:attribute name="vertical-align">super</xsl:attribute>
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="admonition-style">
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="border">0.5pt solid rgb(79, 129, 189)</xsl:attribute>
			<xsl:attribute name="color">rgb(79, 129, 189)</xsl:attribute>
			<xsl:attribute name="margin-left">16mm</xsl:attribute>
			<xsl:attribute name="margin-right">16mm</xsl:attribute>
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="admonition-container-style">
		<xsl:attribute name="margin-left">0mm</xsl:attribute>
		<xsl:attribute name="margin-right">0mm</xsl:attribute>
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="padding">2mm</xsl:attribute>
			<xsl:attribute name="padding-top">3mm</xsl:attribute>
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="admonition-name-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-size">11pt</xsl:attribute>
			<xsl:attribute name="margin-bottom">6pt</xsl:attribute>
			<xsl:attribute name="font-weight">normal</xsl:attribute>
			<xsl:attribute name="font-style">italic</xsl:attribute>
			<xsl:attribute name="text-align">center</xsl:attribute>
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="admonition-p-style">
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-style">italic</xsl:attribute>
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-normative-style">
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
			<xsl:attribute name="font-weight">normal</xsl:attribute>
		
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-normative-list-style">
		<xsl:attribute name="provisional-distance-between-starts">12mm</xsl:attribute>
		<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
		
		
		
		<!-- <xsl:if test="$namespace = 'ieee'">
			<xsl:attribute name="margin-bottom">6pt</xsl:attribute>
			<xsl:attribute name="provisional-distance-between-starts">9.5mm</xsl:attribute>
		</xsl:if> -->
		
		
		
		
		
		
		
			<xsl:attribute name="margin-bottom">4pt</xsl:attribute>
			<xsl:attribute name="provisional-distance-between-starts">8mm</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-non-normative-style">
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-non-normative-list-style">
		<xsl:attribute name="provisional-distance-between-starts">12mm</xsl:attribute>
		<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="margin-bottom">4pt</xsl:attribute>
			<xsl:attribute name="provisional-distance-between-starts">8mm</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-normative-list-body-style">
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-non-normative-list-body-style">
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-note-fn-style">
		<xsl:attribute name="keep-with-previous.within-line">always</xsl:attribute>
		<xsl:attribute name="font-size">65%</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="vertical-align">super</xsl:attribute>
		
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-note-fn-number-style">
		<xsl:attribute name="keep-with-next.within-line">always</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="font-size">60%</xsl:attribute>
			<xsl:attribute name="vertical-align">super</xsl:attribute>
		
		
	</xsl:attribute-set><xsl:attribute-set name="bibitem-note-fn-body-style">
		<xsl:attribute name="font-size">10pt</xsl:attribute>
		<xsl:attribute name="margin-bottom">12pt</xsl:attribute>
		<xsl:attribute name="start-indent">0pt</xsl:attribute>
		
		
		
		
		
		
		
		
		
		
		
		
			<xsl:attribute name="color">rgb(168, 170, 173)</xsl:attribute>
		
	</xsl:attribute-set><xsl:attribute-set name="references-non-normative-style">
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="hljs-doctag">
		<xsl:attribute name="color">#d73a49</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-keyword">
		<xsl:attribute name="color">#d73a49</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-meta_hljs-keyword">
		<xsl:attribute name="color">#d73a49</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-template-tag">
		<xsl:attribute name="color">#d73a49</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-template-variable">
		<xsl:attribute name="color">#d73a49</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-type">
		<xsl:attribute name="color">#d73a49</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-variable_and_language_">
		<xsl:attribute name="color">#d73a49</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-title">
		<xsl:attribute name="color">#6f42c1</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-title_and_class_">
		<xsl:attribute name="color">#6f42c1</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-title_and_class__and_inherited__">
		<xsl:attribute name="color">#6f42c1</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-title_and_function_">
		<xsl:attribute name="color">#6f42c1</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-attr">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-attribute">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-literal">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-meta">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-number">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-operator">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-variable">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-selector-attr">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-selector-class">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-selector-id">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-regexp">
		<xsl:attribute name="color">#032f62</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-string">
		<xsl:attribute name="color">#032f62</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-meta_hljs-string">
		<xsl:attribute name="color">#032f62</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-built_in">
		<xsl:attribute name="color">#e36209</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-symbol">
		<xsl:attribute name="color">#e36209</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-comment">
		<xsl:attribute name="color">#6a737d</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-code">
		<xsl:attribute name="color">#6a737d</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-formula">
		<xsl:attribute name="color">#6a737d</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-name">
		<xsl:attribute name="color">#22863a</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-quote">
		<xsl:attribute name="color">#22863a</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-selector-tag">
		<xsl:attribute name="color">#22863a</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-selector-pseudo">
		<xsl:attribute name="color">#22863a</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-subst">
		<xsl:attribute name="color">#24292e</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-section">
		<xsl:attribute name="color">#005cc5</xsl:attribute>
		<xsl:attribute name="font-weight">bold</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-bullet">
		<xsl:attribute name="color">#735c0f</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-emphasis">
		<xsl:attribute name="color">#24292e</xsl:attribute>
		<xsl:attribute name="font-style">italic</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-strong">
		<xsl:attribute name="color">#24292e</xsl:attribute>
		<xsl:attribute name="font-weight">bold</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-addition">
		<xsl:attribute name="color">#22863a</xsl:attribute>
		<xsl:attribute name="background-color">#f0fff4</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-deletion">
		<xsl:attribute name="color">#b31d28</xsl:attribute>
		<xsl:attribute name="background-color">#ffeef0</xsl:attribute>
	</xsl:attribute-set><xsl:attribute-set name="hljs-char_and_escape_">
	</xsl:attribute-set><xsl:attribute-set name="hljs-link">
	</xsl:attribute-set><xsl:attribute-set name="hljs-params">
	</xsl:attribute-set><xsl:attribute-set name="hljs-property">
	</xsl:attribute-set><xsl:attribute-set name="hljs-punctuation">
	</xsl:attribute-set><xsl:attribute-set name="hljs-tag">
	</xsl:attribute-set><xsl:attribute-set name="indexsect-title-style">
		<xsl:attribute name="role">H1</xsl:attribute>
		
		
		
		
		
	</xsl:attribute-set><xsl:attribute-set name="indexsect-clause-title-style">
		<xsl:attribute name="keep-with-next">always</xsl:attribute>
		
		
		
		
		
	</xsl:attribute-set><xsl:variable name="border-block-added">2.5pt solid rgb(0, 176, 80)</xsl:variable><xsl:variable name="border-block-deleted">2.5pt solid rgb(255, 0, 0)</xsl:variable><xsl:variable name="ace_tag">ace-tag_</xsl:variable><xsl:template name="processPrefaceSectionsDefault_Contents">
		<xsl:variable name="nodes_preface_">
			<xsl:for-each select="/*/*[local-name()='preface']/*[not(local-name() = 'note' or local-name() = 'admonition')]">
				<node id="{@id}"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="nodes_preface" select="xalan:nodeset($nodes_preface_)"/>
		
		<xsl:for-each select="/*/*[local-name()='preface']/*[not(local-name() = 'note' or local-name() = 'admonition')]">
			<xsl:sort select="@displayorder" data-type="number"/>
			
			<!-- process Section's title -->
			<xsl:variable name="preceding-sibling_id" select="$nodes_preface/node[@id = current()/@id]/preceding-sibling::node[1]/@id"/>
			<xsl:if test="$preceding-sibling_id != ''">
				<xsl:apply-templates select="parent::*/*[@type = 'section-title' and @id = $preceding-sibling_id and not(@displayorder)]" mode="contents_no_displayorder"/>
			</xsl:if>
			
			<xsl:apply-templates select="." mode="contents"/>
		</xsl:for-each>
	</xsl:template><xsl:template name="processMainSectionsDefault_Contents">
	
		<xsl:variable name="nodes_sections_">
			<xsl:for-each select="/*/*[local-name()='sections']/*">
				<node id="{@id}"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="nodes_sections" select="xalan:nodeset($nodes_sections_)"/>
		
		<xsl:for-each select="/*/*[local-name()='sections']/* | /*/*[local-name()='bibliography']/*[local-name()='references'][@normative='true'] |    /*/*[local-name()='bibliography']/*[local-name()='clause'][*[local-name()='references'][@normative='true']]">
			<xsl:sort select="@displayorder" data-type="number"/>
			
			<!-- process Section's title -->
			<xsl:variable name="preceding-sibling_id" select="$nodes_sections/node[@id = current()/@id]/preceding-sibling::node[1]/@id"/>
			<xsl:if test="$preceding-sibling_id != ''">
				<xsl:apply-templates select="parent::*/*[@type = 'section-title' and @id = $preceding-sibling_id and not(@displayorder)]" mode="contents_no_displayorder"/>
			</xsl:if>
			
			<xsl:apply-templates select="." mode="contents"/>
		</xsl:for-each>
		
		<xsl:for-each select="/*/*[local-name()='annex']">
			<xsl:sort select="@displayorder" data-type="number"/>
			<xsl:apply-templates select="." mode="contents"/>
		</xsl:for-each>
		
		<xsl:for-each select="/*/*[local-name()='bibliography']/*[not(@normative='true') and not(*[local-name()='references'][@normative='true'])] |          /*/*[local-name()='bibliography']/*[local-name()='clause'][*[local-name()='references'][not(@normative='true')]]">
			<xsl:sort select="@displayorder" data-type="number"/>
			<xsl:apply-templates select="." mode="contents"/>
		</xsl:for-each>
	</xsl:template><xsl:template name="processTablesFigures_Contents">
		<xsl:param name="always"/>
		<xsl:if test="(//*[contains(local-name(), '-standard')]/*[local-name() = 'misc-container']/*[local-name() = 'toc'][@type='table']/*[local-name() = 'title']) or normalize-space($always) = 'true'">
			<xsl:call-template name="processTables_Contents"/>
		</xsl:if>
		<xsl:if test="(//*[contains(local-name(), '-standard')]/*[local-name() = 'misc-container']/*[local-name() = 'toc'][@type='figure']/*[local-name() = 'title']) or normalize-space($always) = 'true'">
			<xsl:call-template name="processFigures_Contents"/>
		</xsl:if>
	</xsl:template><xsl:template name="processTables_Contents">
		<tables>
			<xsl:for-each select="//*[local-name() = 'table'][@id and *[local-name() = 'name'] and normalize-space(@id) != '']">
				<table id="{@id}" alt-text="{*[local-name() = 'name']}">
					<xsl:copy-of select="*[local-name() = 'name']"/>
				</table>
			</xsl:for-each>
		</tables>
	</xsl:template><xsl:template name="processFigures_Contents">
		<figures>
			<xsl:for-each select="//*[local-name() = 'figure'][@id and *[local-name() = 'name'] and not(@unnumbered = 'true') and normalize-space(@id) != ''] | //*[@id and starts-with(*[local-name() = 'name'], 'Figure ') and normalize-space(@id) != '']">
				<figure id="{@id}" alt-text="{*[local-name() = 'name']}">
					<xsl:copy-of select="*[local-name() = 'name']"/>
				</figure>
			</xsl:for-each>
		</figures>
	</xsl:template><xsl:template name="processPrefaceSectionsDefault">
		<xsl:for-each select="/*/*[local-name()='preface']/*[not(local-name() = 'note' or local-name() = 'admonition')]">
			<xsl:sort select="@displayorder" data-type="number"/>
			<xsl:apply-templates select="."/>
		</xsl:for-each>
	</xsl:template><xsl:template name="processMainSectionsDefault">
		<xsl:for-each select="/*/*[local-name()='sections']/* | /*/*[local-name()='bibliography']/*[local-name()='references'][@normative='true']">
			<xsl:sort select="@displayorder" data-type="number"/>
			<xsl:apply-templates select="."/>
			
		</xsl:for-each>
		
		<xsl:for-each select="/*/*[local-name()='annex']">
			<xsl:sort select="@displayorder" data-type="number"/>
			<xsl:apply-templates select="."/>
		</xsl:for-each>
		
		<xsl:for-each select="/*/*[local-name()='bibliography']/*[not(@normative='true')] |          /*/*[local-name()='bibliography']/*[local-name()='clause'][*[local-name()='references'][not(@normative='true')]]">
			<xsl:sort select="@displayorder" data-type="number"/>
			<xsl:apply-templates select="."/>
		</xsl:for-each>
	</xsl:template><xsl:variable name="tag_fo_inline_keep-together_within-line_open">###fo:inline keep-together_within-line###</xsl:variable><xsl:variable name="tag_fo_inline_keep-together_within-line_close">###/fo:inline keep-together_within-line###</xsl:variable><xsl:template match="text()" name="text">
		
				<xsl:variable name="regex_standard_reference">([A-Z]{2,}(/[A-Z]{2,})* \d+(-\d+)*(:\d{4})?)</xsl:variable>
				<xsl:variable name="text" select="java:replaceAll(java:java.lang.String.new(.),$regex_standard_reference,concat($tag_fo_inline_keep-together_within-line_open,'$1',$tag_fo_inline_keep-together_within-line_close))"/>
				<xsl:call-template name="replace_fo_inline_tags">
					<xsl:with-param name="tag_open" select="$tag_fo_inline_keep-together_within-line_open"/>
					<xsl:with-param name="tag_close" select="$tag_fo_inline_keep-together_within-line_close"/>
					<xsl:with-param name="text" select="$text"/>
				</xsl:call-template>
			
	</xsl:template><xsl:template name="replace_fo_inline_tags">
		<xsl:param name="tag_open"/>
		<xsl:param name="tag_close"/>
		<xsl:param name="text"/>
		<xsl:choose>
			<xsl:when test="contains($text, $tag_open)">
				<xsl:value-of select="substring-before($text, $tag_open)"/>
				<!-- <xsl:text disable-output-escaping="yes">&lt;fo:inline keep-together.within-line="always"&gt;</xsl:text> -->
				<xsl:variable name="text_after" select="substring-after($text, $tag_open)"/>
				<fo:inline keep-together.within-line="always">
					<xsl:value-of select="substring-before($text_after, $tag_close)"/>
				</fo:inline>
				<!-- <xsl:text disable-output-escaping="yes">&lt;/fo:inline&gt;</xsl:text> -->
				<xsl:call-template name="replace_fo_inline_tags">
					<xsl:with-param name="tag_open" select="$tag_open"/>
					<xsl:with-param name="tag_close" select="$tag_close"/>
					<xsl:with-param name="text" select="substring-after($text_after, $tag_close)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise><xsl:value-of select="$text"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name()='br']">
		<xsl:value-of select="$linebreak"/>
	</xsl:template><xsl:template match="*[local-name() = 'keep-together_within-line']">
		<xsl:param name="split_keep-within-line"/>
		
		<!-- <fo:inline>split_keep-within-line='<xsl:value-of select="$split_keep-within-line"/>'</fo:inline> -->
		<xsl:choose>
		
			<xsl:when test="normalize-space($split_keep-within-line) = 'true'">
				<xsl:variable name="sep">_</xsl:variable>
				<xsl:variable name="items">
					<xsl:call-template name="split">
						<xsl:with-param name="pText" select="."/>
						<xsl:with-param name="sep" select="$sep"/>
						<xsl:with-param name="normalize-space">false</xsl:with-param>
						<xsl:with-param name="keep_sep">true</xsl:with-param>
					</xsl:call-template>
				</xsl:variable>
				<xsl:for-each select="xalan:nodeset($items)/item">
					<xsl:choose>
						<xsl:when test=". = $sep">
							<xsl:value-of select="$sep"/><xsl:value-of select="$zero_width_space"/>
						</xsl:when>
						<xsl:otherwise>
							<fo:inline keep-together.within-line="always"><xsl:apply-templates/></fo:inline>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			</xsl:when>
			
			<xsl:otherwise>
				<fo:inline keep-together.within-line="always"><xsl:apply-templates/></fo:inline>
			</xsl:otherwise>
			
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name()='copyright-statement']">
		<fo:block xsl:use-attribute-sets="copyright-statement-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name()='copyright-statement']//*[local-name()='title']">
		
				<!-- process in the template 'title' -->
				<xsl:call-template name="title"/>
			
	</xsl:template><xsl:template match="*[local-name()='copyright-statement']//*[local-name()='p']">
		
		
				<!-- process in the template 'paragraph' -->
				<xsl:call-template name="paragraph"/>
			
	</xsl:template><xsl:template match="*[local-name()='license-statement']">
		<fo:block xsl:use-attribute-sets="license-statement-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name()='license-statement']//*[local-name()='title']">
		
				<!-- process in the template 'title' -->
				<xsl:call-template name="title"/>
			
	</xsl:template><xsl:template match="*[local-name()='license-statement']//*[local-name()='p']">
		
				<!-- process in the template 'paragraph' -->
				<xsl:call-template name="paragraph"/>
			
	</xsl:template><xsl:template match="*[local-name()='legal-statement']">
		<fo:block xsl:use-attribute-sets="legal-statement-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name()='legal-statement']//*[local-name()='title']">
		
				<!-- ogc-white-paper rsd -->
				<xsl:variable name="level">
					<xsl:call-template name="getLevel"/>
				</xsl:variable>
				<fo:block role="H{$level}" xsl:use-attribute-sets="legal-statement-title-style">
					<xsl:apply-templates/>
				</fo:block>
			
	
	</xsl:template><xsl:template match="*[local-name()='legal-statement']//*[local-name()='p']">
		<xsl:param name="margin"/>
		
				<!-- process in the template 'paragraph' -->
				<xsl:call-template name="paragraph">
					<xsl:with-param name="margin" select="$margin"/>
				</xsl:call-template>
			
	</xsl:template><xsl:template match="*[local-name()='feedback-statement']">
		<fo:block xsl:use-attribute-sets="feedback-statement-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name()='feedback-statement']//*[local-name()='title']">
		
				<!-- process in the template 'title' -->
				<xsl:call-template name="title"/>
			
	</xsl:template><xsl:template match="*[local-name()='feedback-statement']//*[local-name()='p']">
		<xsl:param name="margin"/>
		
				<!-- process in the template 'paragraph' -->
				<xsl:call-template name="paragraph">
					<xsl:with-param name="margin" select="$margin"/>
				</xsl:call-template>
			
	</xsl:template><xsl:template match="*[local-name()='td']//text() | *[local-name()='th']//text() | *[local-name()='dt']//text() | *[local-name()='dd']//text()" priority="1">
		<xsl:choose>
			<xsl:when test="parent::*[local-name() = 'keep-together_within-line']">
				<xsl:value-of select="."/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="addZeroWidthSpacesToTextNodes"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="addZeroWidthSpacesToTextNodes">
		<xsl:variable name="text"><text><xsl:call-template name="text"/></text></xsl:variable>
		<!-- <xsl:copy-of select="$text"/> -->
		<xsl:for-each select="xalan:nodeset($text)/text/node()">
			<xsl:choose>
				<xsl:when test="self::text()"><xsl:call-template name="add-zero-spaces-java"/></xsl:when>
				<xsl:otherwise><xsl:copy-of select="."/></xsl:otherwise> <!-- copy 'as-is' for <fo:inline keep-together.within-line="always" ...  -->
			</xsl:choose>
		</xsl:for-each>
	</xsl:template><xsl:template match="*[local-name()='table']" name="table">
	
		<xsl:variable name="table-preamble">
			
			
		</xsl:variable>
		
		<xsl:variable name="table">
	
			<xsl:variable name="simple-table">
				<xsl:call-template name="getSimpleTable">
					<xsl:with-param name="id" select="@id"/>
				</xsl:call-template>
			</xsl:variable>
			<!-- <xsl:variable name="simple-table" select="xalan:nodeset($simple-table_)"/> -->
		
			<!-- simple-table=<xsl:copy-of select="$simple-table"/> -->
		
			
			<!-- Display table's name before table as standalone block -->
			<!-- $namespace = 'iso' or  -->
			
					<xsl:apply-templates select="*[local-name()='name']"/> <!-- table's title rendered before table -->
				
			
			
			
			<xsl:variable name="cols-count" select="count(xalan:nodeset($simple-table)/*/tr[1]/td)"/>
			
			<xsl:variable name="colwidths">
				<xsl:if test="not(*[local-name()='colgroup']/*[local-name()='col'])">
					<xsl:call-template name="calculate-column-widths">
						<xsl:with-param name="cols-count" select="$cols-count"/>
						<xsl:with-param name="table" select="$simple-table"/>
					</xsl:call-template>
				</xsl:if>
			</xsl:variable>
			<!-- <xsl:variable name="colwidths" select="xalan:nodeset($colwidths_)"/> -->
			
			<!-- DEBUG -->
			<xsl:if test="$table_if_debug = 'true'">
				<fo:block font-size="60%">
					<xsl:apply-templates select="xalan:nodeset($colwidths)" mode="print_as_xml"/>
				</fo:block>
			</xsl:if>
			
			
			<!-- <xsl:copy-of select="$colwidths"/> -->
			
			<!-- <xsl:text disable-output-escaping="yes">&lt;!- -</xsl:text>
			DEBUG
			colwidths=<xsl:copy-of select="$colwidths"/>
		<xsl:text disable-output-escaping="yes">- -&gt;</xsl:text> -->
			
			
			
			<xsl:variable name="margin-side">
				<xsl:choose>
					<xsl:when test="sum(xalan:nodeset($colwidths)//column) &gt; 75">15</xsl:when>
					<xsl:otherwise>0</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			
			
			<fo:block-container xsl:use-attribute-sets="table-container-style">
			
				
			
				
			
				
			
				
				
				
				
				
			
				
				
				
				
				
				<!-- end table block-container attributes -->
				
				<!-- display table's name before table for PAS inside block-container (2-columnn layout) -->
				
				
				<xsl:variable name="table_width_default">100%</xsl:variable>
				<xsl:variable name="table_width">
					<!-- for centered table always 100% (@width will be set for middle/second cell of outer table) -->
					<xsl:value-of select="$table_width_default"/>
				</xsl:variable>
				
				
				<xsl:variable name="table_attributes">
				
					<xsl:element name="table_attributes" use-attribute-sets="table-style">
						<xsl:attribute name="width"><xsl:value-of select="normalize-space($table_width)"/></xsl:attribute>
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
					</xsl:element>
				</xsl:variable>
				
				<xsl:if test="$isGenerateTableIF = 'true'">
					<!-- to determine start of table -->
					<fo:block id="{concat('table_if_start_',@id)}" keep-with-next="always" font-size="1pt">Start table '<xsl:value-of select="@id"/>'.</fo:block>
				</xsl:if>
				
				<fo:table id="{@id}">
					
					<xsl:if test="$isGenerateTableIF = 'true'">
						<xsl:attribute name="wrap-option">no-wrap</xsl:attribute>
					</xsl:if>
					
					<xsl:for-each select="xalan:nodeset($table_attributes)/table_attributes/@*">					
						<xsl:attribute name="{local-name()}">
							<xsl:value-of select="."/>
						</xsl:attribute>
					</xsl:for-each>
					
					<xsl:variable name="isNoteOrFnExist" select="./*[local-name()='note'] or .//*[local-name()='fn'][local-name(..) != 'name']"/>				
					<xsl:if test="$isNoteOrFnExist = 'true'">
						<xsl:attribute name="border-bottom">0pt solid black</xsl:attribute> <!-- set 0pt border, because there is a separete table below for footer  -->
					</xsl:if>
					
					
					<xsl:choose>
						<xsl:when test="$isGenerateTableIF = 'true'">
							<!-- generate IF for table widths -->
							<!-- example:
								<tr>
									<td valign="top" align="left" id="tab-symdu_1_1">
										<p>Symbol</p>
										<word id="tab-symdu_1_1_word_1">Symbol</word>
									</td>
									<td valign="top" align="left" id="tab-symdu_1_2">
										<p>Description</p>
										<word id="tab-symdu_1_2_word_1">Description</word>
									</td>
								</tr>
							-->
							<xsl:apply-templates select="xalan:nodeset($simple-table)" mode="process_table-if"/>
							
						</xsl:when>
						<xsl:otherwise>
					
							<xsl:choose>
								<xsl:when test="*[local-name()='colgroup']/*[local-name()='col']">
									<xsl:for-each select="*[local-name()='colgroup']/*[local-name()='col']">
										<fo:table-column column-width="{@width}"/>
									</xsl:for-each>
								</xsl:when>
								<xsl:otherwise>
									<xsl:call-template name="insertTableColumnWidth">
										<xsl:with-param name="colwidths" select="$colwidths"/>
									</xsl:call-template>
								</xsl:otherwise>
							</xsl:choose>
							
							<xsl:choose>
								<xsl:when test="not(*[local-name()='tbody']) and *[local-name()='thead']">
									<xsl:apply-templates select="*[local-name()='thead']" mode="process_tbody"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:apply-templates select="node()[not(local-name() = 'name') and not(local-name() = 'note')          and not(local-name() = 'thead') and not(local-name() = 'tfoot')]"/> <!-- process all table' elements, except name, header, footer and note that renders separaterely -->
								</xsl:otherwise>
							</xsl:choose>
					
						</xsl:otherwise>
					</xsl:choose>
					
				</fo:table>
				
				<xsl:variable name="colgroup" select="*[local-name()='colgroup']"/>				
				<xsl:for-each select="*[local-name()='tbody']"><!-- select context to tbody -->
					<xsl:call-template name="insertTableFooterInSeparateTable">
						<xsl:with-param name="table_attributes" select="$table_attributes"/>
						<xsl:with-param name="colwidths" select="$colwidths"/>				
						<xsl:with-param name="colgroup" select="$colgroup"/>				
					</xsl:call-template>
				</xsl:for-each>
				
				
				
				
				
				
				<xsl:if test="*[local-name()='bookmark']"> <!-- special case: table/bookmark -->
					<fo:block keep-with-previous="always" line-height="0.1">
						<xsl:for-each select="*[local-name()='bookmark']">
							<xsl:call-template name="bookmark"/>
						</xsl:for-each>
					</fo:block>
				</xsl:if>
				
			</fo:block-container>
		</xsl:variable>
		
		<xsl:variable name="isAdded" select="@added"/>
		<xsl:variable name="isDeleted" select="@deleted"/>
		
		<xsl:choose>
			<xsl:when test="@width">
	
				<!-- centered table when table name is centered (see table-name-style) -->
				
					<fo:table table-layout="fixed" width="100%">
						<fo:table-column column-width="proportional-column-width(1)"/>
						<fo:table-column column-width="{@width}"/>
						<fo:table-column column-width="proportional-column-width(1)"/>
						<fo:table-body>
							<fo:table-row>
								<fo:table-cell column-number="2">
									<xsl:copy-of select="$table-preamble"/>
									<fo:block>
										<xsl:call-template name="setTrackChangesStyles">
											<xsl:with-param name="isAdded" select="$isAdded"/>
											<xsl:with-param name="isDeleted" select="$isDeleted"/>
										</xsl:call-template>
										<xsl:copy-of select="$table"/>
									</fo:block>
								</fo:table-cell>
							</fo:table-row>
						</fo:table-body>
					</fo:table>
				
				
				
				
			</xsl:when>
			<xsl:otherwise>
				<xsl:choose>
					<xsl:when test="$isAdded = 'true' or $isDeleted = 'true'">
						<xsl:copy-of select="$table-preamble"/>
						<fo:block>
							<xsl:call-template name="setTrackChangesStyles">
								<xsl:with-param name="isAdded" select="$isAdded"/>
								<xsl:with-param name="isDeleted" select="$isDeleted"/>
							</xsl:call-template>
							<xsl:copy-of select="$table"/>
						</fo:block>
					</xsl:when>
					<xsl:otherwise>
						<xsl:copy-of select="$table-preamble"/>
						<xsl:copy-of select="$table"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:otherwise>
		</xsl:choose>
		
	</xsl:template><xsl:template match="*[local-name()='table']/*[local-name() = 'name']">
		<xsl:param name="continued"/>
		<xsl:if test="normalize-space() != ''">
		
			
				
					<fo:block xsl:use-attribute-sets="table-name-style">

						
						
						
						
						<xsl:choose>
							<xsl:when test="$continued = 'true'"> 
								
							</xsl:when>
							<xsl:otherwise>
								<xsl:apply-templates/>
							</xsl:otherwise>
						</xsl:choose>
						
						
					</fo:block>
			
				
			
		</xsl:if>
	</xsl:template><xsl:template name="calculate-columns-numbers">
		<xsl:param name="table-row"/>
		<xsl:variable name="columns-count" select="count($table-row/*)"/>
		<xsl:variable name="sum-colspans" select="sum($table-row/*/@colspan)"/>
		<xsl:variable name="columns-with-colspan" select="count($table-row/*[@colspan])"/>
		<xsl:value-of select="$columns-count + $sum-colspans - $columns-with-colspan"/>
	</xsl:template><xsl:template name="calculate-column-widths">
		<xsl:param name="table"/>
		<xsl:param name="cols-count"/>
		
				<xsl:call-template name="calculate-column-widths-proportional">
					<xsl:with-param name="cols-count" select="$cols-count"/>
					<xsl:with-param name="table" select="$table"/>
				</xsl:call-template>
			
	</xsl:template><xsl:template name="calculate-column-widths-proportional">
		<xsl:param name="table"/>
		<xsl:param name="cols-count"/>
		<xsl:param name="curr-col" select="1"/>
		<xsl:param name="width" select="0"/>
		
		<!-- table=<xsl:copy-of select="$table"/> -->
		
		<xsl:if test="$curr-col &lt;= $cols-count">
			<xsl:variable name="widths">
				<xsl:choose>
					<xsl:when test="not($table)"><!-- this branch is not using in production, for debug only -->
						<xsl:for-each select="*[local-name()='thead']//*[local-name()='tr']">
							<xsl:variable name="words">
								<xsl:call-template name="tokenize">
									<xsl:with-param name="text" select="translate(*[local-name()='th'][$curr-col],'-ââ:', '    ')"/>
								</xsl:call-template>
							</xsl:variable>
							<xsl:variable name="max_length">
								<xsl:call-template name="max_length">
									<xsl:with-param name="words" select="xalan:nodeset($words)"/>
								</xsl:call-template>
							</xsl:variable>
							<width>
								<xsl:value-of select="$max_length"/>
							</width>
						</xsl:for-each>
						<xsl:for-each select="*[local-name()='tbody']//*[local-name()='tr']">
							<xsl:variable name="words">
								<xsl:call-template name="tokenize">
									<xsl:with-param name="text" select="translate(*[local-name()='td'][$curr-col],'-ââ:', '    ')"/>
								</xsl:call-template>
							</xsl:variable>
							<xsl:variable name="max_length">
								<xsl:call-template name="max_length">
									<xsl:with-param name="words" select="xalan:nodeset($words)"/>
								</xsl:call-template>
							</xsl:variable>
							<width>
								<xsl:value-of select="$max_length"/>
							</width>
							
						</xsl:for-each>
					</xsl:when>
					<xsl:otherwise>
						<!-- <curr_col><xsl:value-of select="$curr-col"/></curr_col> -->
						
						<!-- <table><xsl:copy-of select="$table"/></table>
						 -->
						<xsl:for-each select="xalan:nodeset($table)/*/*[local-name()='tr']">
							<xsl:variable name="td_text">
								<xsl:apply-templates select="td[$curr-col]" mode="td_text"/>
							</xsl:variable>
							<!-- <td_text><xsl:value-of select="$td_text"/></td_text> -->
							<xsl:variable name="words">
								<xsl:variable name="string_with_added_zerospaces">
									<xsl:call-template name="add-zero-spaces-java">
										<xsl:with-param name="text" select="$td_text"/>
									</xsl:call-template>
								</xsl:variable>
								<!-- <xsl:message>string_with_added_zerospaces=<xsl:value-of select="$string_with_added_zerospaces"/></xsl:message> -->
								<xsl:call-template name="tokenize">
									<!-- <xsl:with-param name="text" select="translate(td[$curr-col],'-ââ:', '    ')"/> -->
									<!-- 2009 thinspace -->
									<!-- <xsl:with-param name="text" select="translate(normalize-space($td_text),'-ââ:', '    ')"/> -->
									<xsl:with-param name="text" select="normalize-space(translate($string_with_added_zerospaces, 'âÂ­', '  '))"/> <!-- replace zero-width-space and soft-hyphen to space -->
								</xsl:call-template>
							</xsl:variable>
							<!-- words=<xsl:copy-of select="$words"/> -->
							<xsl:variable name="max_length">
								<xsl:call-template name="max_length">
									<xsl:with-param name="words" select="xalan:nodeset($words)"/>
								</xsl:call-template>
							</xsl:variable>
							<!-- <xsl:message>max_length=<xsl:value-of select="$max_length"/></xsl:message> -->
							<width>
								<xsl:variable name="divider">
									<xsl:choose>
										<xsl:when test="td[$curr-col]/@divide">
											<xsl:value-of select="td[$curr-col]/@divide"/>
										</xsl:when>
										<xsl:otherwise>1</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:value-of select="$max_length div $divider"/>
							</width>
							
						</xsl:for-each>
					
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			
			<!-- widths=<xsl:copy-of select="$widths"/> -->
			
			<column>
				<xsl:for-each select="xalan:nodeset($widths)//width">
					<xsl:sort select="." data-type="number" order="descending"/>
					<xsl:if test="position()=1">
							<xsl:value-of select="."/>
					</xsl:if>
				</xsl:for-each>
			</column>
			<xsl:call-template name="calculate-column-widths-proportional">
				<xsl:with-param name="cols-count" select="$cols-count"/>
				<xsl:with-param name="curr-col" select="$curr-col +1"/>
				<xsl:with-param name="table" select="$table"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template><xsl:template match="*[@keep-together.within-line or local-name() = 'keep-together_within-line']/text()" priority="2" mode="td_text">
		<!-- <xsl:message>DEBUG t1=<xsl:value-of select="."/></xsl:message>
		<xsl:message>DEBUG t2=<xsl:value-of select="java:replaceAll(java:java.lang.String.new(.),'.','X')"/></xsl:message> -->
		<xsl:value-of select="java:replaceAll(java:java.lang.String.new(.),'.','X')"/>
		
		<!-- if all capitals english letters or digits -->
		<xsl:if test="normalize-space(translate(., concat($upper,'0123456789'), '')) = ''">
			<xsl:call-template name="repeat">
				<xsl:with-param name="char" select="'X'"/>
				<xsl:with-param name="count" select="string-length(normalize-space(.)) * 0.5"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template><xsl:template match="text()" mode="td_text">
		<xsl:value-of select="translate(., $zero_width_space, ' ')"/><xsl:text> </xsl:text>
	</xsl:template><xsl:template match="*[local-name()='termsource']" mode="td_text">
		<xsl:value-of select="*[local-name()='origin']/@citeas"/>
	</xsl:template><xsl:template match="*[local-name()='link']" mode="td_text">
		<xsl:value-of select="@target"/>
	</xsl:template><xsl:template match="*[local-name()='math']" mode="td_text" name="math_length">
		<xsl:if test="$isGenerateTableIF = 'false'">
			<xsl:variable name="mathml_">
				<xsl:for-each select="*">
					<xsl:if test="local-name() != 'unit' and local-name() != 'prefix' and local-name() != 'dimension' and local-name() != 'quantity'">
						<xsl:copy-of select="."/>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="mathml" select="xalan:nodeset($mathml_)"/>

			<xsl:variable name="math_text">
				<xsl:value-of select="normalize-space($mathml)"/>
				<xsl:for-each select="$mathml//@open"><xsl:value-of select="."/></xsl:for-each>
				<xsl:for-each select="$mathml//@close"><xsl:value-of select="."/></xsl:for-each>
			</xsl:variable>
			<xsl:value-of select="translate($math_text, ' ', '#')"/><!-- mathml images as one 'word' without spaces -->
		</xsl:if>
	</xsl:template><xsl:template name="calculate-column-widths-autolayout-algorithm">
		<xsl:param name="parent_table_page-width"/> <!-- for nested tables, in re-calculate step -->
		
		<!-- via intermediate format -->

		<!-- The algorithm uses two passes through the table data and scales linearly with the size of the table -->
	 
		<!-- In the first pass, line wrapping is disabled, and the user agent keeps track of the minimum and maximum width of each cell. -->
	 
		<!-- Since line wrap has been disabled, paragraphs are treated as long lines unless broken by BR elements. -->
		 
		<!-- get current table id -->
		<xsl:variable name="table_id" select="@id"/>
		<!-- find table by id in the file 'table_widths' -->
	<!-- 	<xsl:variable name="table-if_" select="$table_widths_from_if//table[@id = $table_id]"/>
		<xsl:variable name="table-if" select="xalan:nodeset($table-if_)"/> -->
		
		<!-- table='<xsl:copy-of select="$table"/>' -->
		<!-- table_id='<xsl:value-of select="$table_id"/>\ -->
		<!-- table-if='<xsl:copy-of select="$table-if"/>' -->
		<!-- table_widths_from_if='<xsl:copy-of select="$table_widths_from_if"/>' -->
		
		<xsl:variable name="table_with_cell_widths_">
			<xsl:apply-templates select="." mode="determine_cell_widths-if"/> <!-- read column's width from IF -->
		</xsl:variable>
		<xsl:variable name="table_with_cell_widths" select="xalan:nodeset($table_with_cell_widths_)"/>
		
		<!-- <xsl:if test="$table_if_debug = 'true'">
			<xsl:copy-of select="$table_with_cell_widths"/>
		</xsl:if> -->
		
		
		<!-- The minimum and maximum cell widths are then used to determine the corresponding minimum and maximum widths for the columns. -->
		
		<xsl:variable name="column_widths_">
			<!-- iteration of columns -->
			<xsl:for-each select="$table_with_cell_widths//tr[1]/td">
				<xsl:variable name="pos" select="position()"/>
				<column>
					<xsl:attribute name="width_max">
						<xsl:for-each select="ancestor::tbody//tr/td[$pos]/@width_max">
							<xsl:sort select="." data-type="number" order="descending"/>
							<xsl:if test="position() = 1"><xsl:value-of select="."/></xsl:if>
						</xsl:for-each>
					</xsl:attribute>
					<xsl:attribute name="width_min">
						<xsl:for-each select="ancestor::tbody//tr/td[$pos]/@width_min">
							<xsl:sort select="." data-type="number" order="descending"/>
							<xsl:if test="position() = 1"><xsl:value-of select="."/></xsl:if>
						</xsl:for-each>
					</xsl:attribute>
				</column>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="column_widths" select="xalan:nodeset($column_widths_)"/>
		
		<!-- <column_widths>
			<xsl:copy-of select="$column_widths"/>
		</column_widths> -->
		
		<!-- These in turn, are used to find the minimum and maximum width for the table. -->
		<xsl:variable name="table_widths_">
			<table>
				<xsl:attribute name="width_max">
					<xsl:value-of select="sum($column_widths/column/@width_max)"/>
				</xsl:attribute>
				<xsl:attribute name="width_min">
					<xsl:value-of select="sum($column_widths/column/@width_min)"/>
				</xsl:attribute>
			</table>
		</xsl:variable>
		<xsl:variable name="table_widths" select="xalan:nodeset($table_widths_)"/>
		
		<xsl:variable name="page_width">
			<xsl:choose>
				<xsl:when test="$parent_table_page-width != ''">
					<xsl:value-of select="$parent_table_page-width"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="@page-width"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:if test="$table_if_debug = 'true'">
			<table_width>
				<xsl:copy-of select="$table_widths"/>
			</table_width>
			<debug>$page_width=<xsl:value-of select="$page_width"/></debug>
		</xsl:if>
		
		
		<!-- There are three cases: -->
		<xsl:choose>
			<!-- 1. The minimum table width is equal to or wider than the available space -->
			<xsl:when test="$table_widths/table/@width_min &gt;= $page_width and 1 = 2"> <!-- this condition isn't working see case 3 below -->
				<!-- call old algorithm -->
				<case1/>
				<!-- <xsl:variable name="cols-count" select="count(xalan:nodeset($table)/*/tr[1]/td)"/>
				<xsl:call-template name="calculate-column-widths-proportional">
					<xsl:with-param name="cols-count" select="$cols-count"/>
					<xsl:with-param name="table" select="$table"/>
				</xsl:call-template> -->
			</xsl:when>
			<!-- 2. The maximum table width fits within the available space. In this case, set the columns to their maximum widths. -->
			<xsl:when test="$table_widths/table/@width_max &lt;= $page_width">
				<case2/>
				<autolayout/>
				<xsl:for-each select="$column_widths/column/@width_max">
					<column divider="100"><xsl:value-of select="."/></column>
				</xsl:for-each>
			</xsl:when>
			<!-- 3. The maximum width of the table is greater than the available space, but the minimum table width is smaller. 
			In this case, find the difference between the available space and the minimum table width, lets call it W. 
			Lets also call D the difference between maximum and minimum width of the table. 
			For each column, let d be the difference between maximum and minimum width of that column. 
			Now set the column's width to the minimum width plus d times W over D. 
			This makes columns with large differences between minimum and maximum widths wider than columns with smaller differences. -->
			<xsl:when test="($table_widths/table/@width_max &gt; $page_width and $table_widths/table/@width_min &lt; $page_width) or ($table_widths/table/@width_min &gt;= $page_width)">
				<!-- difference between the available space and the minimum table width -->
				<xsl:variable name="W" select="$page_width - $table_widths/table/@width_min"/>
				<W><xsl:value-of select="$W"/></W>
				<!-- difference between maximum and minimum width of the table -->
				<xsl:variable name="D" select="$table_widths/table/@width_max - $table_widths/table/@width_min"/>
				<D><xsl:value-of select="$D"/></D>
				<case3/>
				<autolayout/>
				<xsl:if test="$table_widths/table/@width_min &gt;= $page_width">
					<split_keep-within-line>true</split_keep-within-line>
				</xsl:if>
				<xsl:for-each select="$column_widths/column">
					<!-- difference between maximum and minimum width of that column.  -->
					<xsl:variable name="d" select="@width_max - @width_min"/>
					<d><xsl:value-of select="$d"/></d>
					<width_min><xsl:value-of select="@width_min"/></width_min>
					<e><xsl:value-of select="$d * $W div $D"/></e>
					<!-- set the column's width to the minimum width plus d times W over D.  -->
					<column divider="100">
						<xsl:value-of select="round(@width_min + $d * $W div $D)"/> <!--  * 10 -->
					</column>
				</xsl:for-each>
				
			</xsl:when>
			<xsl:otherwise><unknown_case/></xsl:otherwise>
		</xsl:choose>
		
	</xsl:template><xsl:template name="get-calculated-column-widths-autolayout-algorithm">
		
		<!-- if nested 'dl' or 'table' -->
		<xsl:variable name="parent_table_id" select="normalize-space(ancestor::*[local-name() = 'table' or local-name() = 'dl'][1]/@id)"/>
		<parent_table_id><xsl:value-of select="$parent_table_id"/></parent_table_id>
			
		<parent_element><xsl:value-of select="local-name(..)"/></parent_element>
			
		<xsl:variable name="parent_table_page-width_">
			<xsl:if test="$parent_table_id != ''">
				<!-- determine column number in the parent table -->
				<xsl:variable name="parent_table_column_number">
					<xsl:choose>
						<xsl:when test="parent::*[local-name() = 'dd']">2</xsl:when>
						<xsl:otherwise> <!-- parent is table -->
							<xsl:value-of select="count(ancestor::*[local-name() = 'td'][1]/preceding-sibling::*[local-name() = 'td']) + 1"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<!-- find table by id in the file 'table_widths' and get all Nth `<column>...</column> -->
				<xsl:value-of select="$table_widths_from_if_calculated//table[@id = $parent_table_id]/column[number($parent_table_column_number)]"/>
			</xsl:if>
		</xsl:variable>
		<xsl:variable name="parent_table_page-width" select="normalize-space($parent_table_page-width_)"/>
		
		<!-- get current table id -->
		<xsl:variable name="table_id" select="@id"/>
		
		<xsl:choose>
			<xsl:when test="$parent_table_id = '' or $parent_table_page-width = ''">
				<!-- find table by id in the file 'table_widths' and get all `<column>...</column> -->
				<xsl:copy-of select="$table_widths_from_if_calculated//table[@id = $table_id]/node()"/>
			</xsl:when>
			<xsl:otherwise>
				<!-- recalculate columns width based on parent table width -->
				<xsl:for-each select="$table_widths_from_if//table[@id = $table_id]">
					<xsl:call-template name="calculate-column-widths-autolayout-algorithm">
						<xsl:with-param name="parent_table_page-width" select="$parent_table_page-width"/> <!-- padding-left = 2mm  = 50000-->
					</xsl:call-template>
				</xsl:for-each>
			</xsl:otherwise>
		</xsl:choose>
		
	</xsl:template><xsl:template match="@*|node()" mode="determine_cell_widths-if">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="determine_cell_widths-if"/>
		</xsl:copy>
	</xsl:template><xsl:template match="td | th" mode="determine_cell_widths-if">
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			
			 <!-- The maximum width is given by the widest line.  -->
			<xsl:attribute name="width_max">
				<xsl:for-each select="p_len">
					<xsl:sort select="." data-type="number" order="descending"/>
					<xsl:if test="position() = 1"><xsl:value-of select="."/></xsl:if>
				</xsl:for-each>
			</xsl:attribute>
			
			<!-- The minimum width is given by the widest text element (word, image, etc.) -->
			<xsl:variable name="width_min">
				<xsl:for-each select="word_len">
					<xsl:sort select="." data-type="number" order="descending"/>
					<xsl:if test="position() = 1"><xsl:value-of select="."/></xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:attribute name="width_min">
				<xsl:value-of select="$width_min"/>
			</xsl:attribute>
			
			<xsl:if test="$width_min = 0">
				<xsl:attribute name="width_min">1</xsl:attribute>
			</xsl:if>
			
			<xsl:apply-templates select="node()" mode="determine_cell_widths-if"/>
			
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name()='thead']">
		<xsl:param name="cols-count"/>
		<fo:table-header>
			
			
			<xsl:apply-templates/>
		</fo:table-header>
	</xsl:template><xsl:template name="table-header-title">
		<xsl:param name="cols-count"/>
		<!-- row for title -->
		<fo:table-row>
			<fo:table-cell number-columns-spanned="{$cols-count}" border-left="1.5pt solid white" border-right="1.5pt solid white" border-top="1.5pt solid white" border-bottom="1.5pt solid black">
				
				
				
				
						<xsl:apply-templates select="ancestor::*[local-name()='table']/*[local-name()='name']">
							<xsl:with-param name="continued">true</xsl:with-param>
						</xsl:apply-templates>
						
						
				
					
				
				
			</fo:table-cell>
		</fo:table-row>
	</xsl:template><xsl:template match="*[local-name()='thead']" mode="process_tbody">		
		<fo:table-body>
			<xsl:apply-templates/>
		</fo:table-body>
	</xsl:template><xsl:template match="*[local-name()='tfoot']">
		<xsl:apply-templates/>
	</xsl:template><xsl:template name="insertTableFooter">
		<xsl:param name="cols-count"/>
		<xsl:if test="../*[local-name()='tfoot']">
			<fo:table-footer>			
				<xsl:apply-templates select="../*[local-name()='tfoot']"/>
			</fo:table-footer>
		</xsl:if>
	</xsl:template><xsl:template name="insertTableFooterInSeparateTable">
		<xsl:param name="table_attributes"/>
		<xsl:param name="colwidths"/>
		<xsl:param name="colgroup"/>
		
		<xsl:variable name="isNoteOrFnExist" select="../*[local-name()='note'] or ..//*[local-name()='fn'][local-name(..) != 'name']"/>
		
		<xsl:variable name="isNoteOrFnExistShowAfterTable">
			
		</xsl:variable>
		
		<xsl:if test="$isNoteOrFnExist = 'true' or normalize-space($isNoteOrFnExistShowAfterTable) = 'true'">
		
			<xsl:variable name="cols-count">
				<xsl:choose>
					<xsl:when test="xalan:nodeset($colgroup)//*[local-name()='col']">
						<xsl:value-of select="count(xalan:nodeset($colgroup)//*[local-name()='col'])"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="count(xalan:nodeset($colwidths)//column)"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			
			
			<xsl:variable name="tableWithNotesAndFootnotes">
			
				<fo:table keep-with-previous="always">
					<xsl:for-each select="xalan:nodeset($table_attributes)/table_attributes/@*">
						<xsl:variable name="name" select="local-name()"/>
						<xsl:choose>
							<xsl:when test="$name = 'border-top'">
								<xsl:attribute name="{$name}">0pt solid black</xsl:attribute>
							</xsl:when>
							<xsl:when test="$name = 'border'">
								<xsl:attribute name="{$name}"><xsl:value-of select="."/></xsl:attribute>
								<xsl:attribute name="border-top">0pt solid black</xsl:attribute>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="{$name}"><xsl:value-of select="."/></xsl:attribute>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:for-each>
					
					
					
					<xsl:choose>
						<xsl:when test="xalan:nodeset($colgroup)//*[local-name()='col']">
							<xsl:for-each select="xalan:nodeset($colgroup)//*[local-name()='col']">
								<fo:table-column column-width="{@width}"/>
							</xsl:for-each>
						</xsl:when>
						<xsl:otherwise>
							<!-- $colwidths=<xsl:copy-of select="$colwidths"/> -->
							<xsl:call-template name="insertTableColumnWidth">
								<xsl:with-param name="colwidths" select="$colwidths"/>
							</xsl:call-template>
						</xsl:otherwise>
					</xsl:choose>
					
					<fo:table-body>
						<fo:table-row>
							<fo:table-cell xsl:use-attribute-sets="table-footer-cell-style" number-columns-spanned="{$cols-count}">
								
								

								
								
								<!-- fn will be processed inside 'note' processing -->
								
								
								
								
								
								
								<!-- for BSI (not PAS) display Notes before footnotes -->
								
								
								<!-- except gb and bsi  -->
								
										<xsl:apply-templates select="../*[local-name()='note']"/>
									
								
								
								<!-- horizontal row separator -->
								
								
								<!-- fn processing -->
								
										<xsl:call-template name="table_fn_display"/>
									
								
								
								<!-- for PAS display Notes after footnotes -->
								
								
							</fo:table-cell>
						</fo:table-row>
					</fo:table-body>
					
				</fo:table>
			</xsl:variable>
			
			<xsl:if test="normalize-space($tableWithNotesAndFootnotes) != ''">
				<xsl:copy-of select="$tableWithNotesAndFootnotes"/>
			</xsl:if>
			
			
			
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name()='tbody']">
		
		<xsl:variable name="cols-count">
			<xsl:choose>
				<xsl:when test="../*[local-name()='thead']">					
					<xsl:call-template name="calculate-columns-numbers">
						<xsl:with-param name="table-row" select="../*[local-name()='thead']/*[local-name()='tr'][1]"/>
					</xsl:call-template>
				</xsl:when>
				<xsl:otherwise>					
					<xsl:call-template name="calculate-columns-numbers">
						<xsl:with-param name="table-row" select="./*[local-name()='tr'][1]"/>
					</xsl:call-template>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		
		
		<xsl:apply-templates select="../*[local-name()='thead']">
			<xsl:with-param name="cols-count" select="$cols-count"/>
		</xsl:apply-templates>
		
		<xsl:call-template name="insertTableFooter">
			<xsl:with-param name="cols-count" select="$cols-count"/>
		</xsl:call-template>
		
		<fo:table-body>
			

			<xsl:apply-templates/>
			
		</fo:table-body>
		
	</xsl:template><xsl:template match="/" mode="process_table-if">
		<xsl:param name="table_or_dl">table</xsl:param>
		<xsl:apply-templates mode="process_table-if">
			<xsl:with-param name="table_or_dl" select="$table_or_dl"/>
		</xsl:apply-templates>
	</xsl:template><xsl:template match="*[local-name()='tbody']" mode="process_table-if">
		<xsl:param name="table_or_dl">table</xsl:param>
		
		<fo:table-body>
			<xsl:for-each select="*[local-name() = 'tr']">
				<xsl:variable name="col_count" select="count(*)"/>

				<!-- iteration for each tr/td -->
				
				<xsl:choose>
					<xsl:when test="$table_or_dl = 'table'">
						<xsl:for-each select="*[local-name() = 'td' or local-name() = 'th']/*">
							<fo:table-row number-columns-spanned="{$col_count}">
								<!-- <test_table><xsl:copy-of select="."/></test_table> -->
								<xsl:call-template name="td"/>
							</fo:table-row>
						</xsl:for-each>
					</xsl:when>
					<xsl:otherwise> <!-- $table_or_dl = 'dl' -->
						<xsl:for-each select="*[local-name() = 'td' or local-name() = 'th']">
							<xsl:variable name="is_dt" select="position() = 1"/>
							
							<xsl:for-each select="*">
								<!-- <test><xsl:copy-of select="."/></test> -->
								<fo:table-row number-columns-spanned="{$col_count}">
									<xsl:choose>
										<xsl:when test="$is_dt">
											<xsl:call-template name="insert_dt_cell"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:call-template name="insert_dd_cell"/>
										</xsl:otherwise>
									</xsl:choose>
								</fo:table-row>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:otherwise>
				</xsl:choose>
				
			</xsl:for-each>
		</fo:table-body>
	</xsl:template><xsl:template match="*[local-name()='thead']/*[local-name()='tr']" priority="2">
		<fo:table-row xsl:use-attribute-sets="table-header-row-style">
		
			
			
			


			

			
			
			<xsl:call-template name="setTableRowAttributes"/>
			
			<xsl:apply-templates/>
		</fo:table-row>
	</xsl:template><xsl:template match="*[local-name()='tfoot']/*[local-name()='tr']" priority="2">
		<fo:table-row xsl:use-attribute-sets="table-footer-row-style">
			
			<xsl:call-template name="setTableRowAttributes"/>
			<xsl:apply-templates/>
		</fo:table-row>
	</xsl:template><xsl:template match="*[local-name()='tr']">
		<fo:table-row xsl:use-attribute-sets="table-body-row-style">
		
			
		
			
		
			
				<xsl:variable name="number"><xsl:number/></xsl:variable>
				<xsl:if test="$number mod 2 = 0">
					<xsl:attribute name="background-color">rgb(254, 247, 228)</xsl:attribute>
				</xsl:if>
			
		
			<xsl:call-template name="setTableRowAttributes"/>
			<xsl:apply-templates/>
		</fo:table-row>
	</xsl:template><xsl:template name="setTableRowAttributes">
	
		
	
		

		
		
		
	</xsl:template><xsl:template match="*[local-name()='th']">
		<fo:table-cell xsl:use-attribute-sets="table-header-cell-style"> <!-- text-align="{@align}" -->
			<xsl:call-template name="setTextAlignment">
				<xsl:with-param name="default">center</xsl:with-param>
			</xsl:call-template>
			
			
			
			

			
			
			
			
			
			<xsl:if test="$lang = 'ar'">
				<xsl:attribute name="padding-right">1mm</xsl:attribute>
			</xsl:if>
			
			<xsl:call-template name="setTableCellAttributes"/>

			<fo:block>
				<xsl:apply-templates/>
			</fo:block>
		</fo:table-cell>
	</xsl:template><xsl:template name="setTableCellAttributes">
		<xsl:if test="@colspan">
			<xsl:attribute name="number-columns-spanned">
				<xsl:value-of select="@colspan"/>
			</xsl:attribute>
		</xsl:if>
		<xsl:if test="@rowspan">
			<xsl:attribute name="number-rows-spanned">
				<xsl:value-of select="@rowspan"/>
			</xsl:attribute>
		</xsl:if>
		<xsl:call-template name="display-align"/>
	</xsl:template><xsl:template name="display-align">
		<xsl:if test="@valign">
			<xsl:attribute name="display-align">
				<xsl:choose>
					<xsl:when test="@valign = 'top'">before</xsl:when>
					<xsl:when test="@valign = 'middle'">center</xsl:when>
					<xsl:when test="@valign = 'bottom'">after</xsl:when>
					<xsl:otherwise>before</xsl:otherwise>
				</xsl:choose>					
			</xsl:attribute>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name()='td']" name="td">
		<fo:table-cell xsl:use-attribute-sets="table-cell-style"> <!-- text-align="{@align}" -->
			<xsl:call-template name="setTextAlignment">
				<xsl:with-param name="default">left</xsl:with-param>
			</xsl:call-template>
			
			<xsl:if test="$lang = 'ar'">
				<xsl:attribute name="padding-right">1mm</xsl:attribute>
			</xsl:if>
			
			
			
			 <!-- bsi -->
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			<xsl:if test=".//*[local-name() = 'table']"> <!-- if there is nested table -->
				<xsl:attribute name="padding-right">1mm</xsl:attribute>
			</xsl:if>
			
			<xsl:call-template name="setTableCellAttributes"/>
			
			<xsl:if test="$isGenerateTableIF = 'true'">
				<xsl:attribute name="border">1pt solid black</xsl:attribute> <!-- border is mandatory, to determine page width -->
				<xsl:attribute name="text-align">left</xsl:attribute>
			</xsl:if>
			
			<fo:block>
			
				<xsl:if test="$isGenerateTableIF = 'true'">
					<xsl:attribute name="id"><xsl:value-of select="@id"/></xsl:attribute>
				</xsl:if>
			
			
				
				
				<xsl:apply-templates/>
				
				<xsl:if test="$isGenerateTableIF = 'true'"><fo:inline id="{@id}_end">end</fo:inline></xsl:if> <!-- to determine width of text --> <!-- <xsl:value-of select="$hair_space"/> -->

			</fo:block>			
		</fo:table-cell>
	</xsl:template><xsl:template match="*[local-name()='table']/*[local-name()='note']" priority="2">

		<fo:block xsl:use-attribute-sets="table-note-style">

			
			
			
		
			<!-- Table's note name (NOTE, for example) -->
			<fo:inline xsl:use-attribute-sets="table-note-name-style">
				
				
				
				
				
				
				
				<xsl:apply-templates select="*[local-name() = 'name']"/>
					
			</fo:inline>
			
			
			
			<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
		</fo:block>
		
	</xsl:template><xsl:template match="*[local-name()='table']/*[local-name()='note']/*[local-name()='p']" priority="2">
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name() = 'fn'][not(ancestor::*[(local-name() = 'table' or local-name() = 'figure') and not(ancestor::*[local-name() = 'name'])])]" priority="2" name="fn">
	
		<!-- list of footnotes to calculate actual footnotes number -->
		<xsl:variable name="p_fn_">
			<xsl:call-template name="get_fn_list"/>
		</xsl:variable>
		<xsl:variable name="p_fn" select="xalan:nodeset($p_fn_)"/>
		
		<xsl:variable name="gen_id" select="generate-id(.)"/>
		<xsl:variable name="lang" select="ancestor::*[contains(local-name(), '-standard')]/*[local-name()='bibdata']//*[local-name()='language'][@current = 'true']"/>
		<xsl:variable name="reference_">
			<xsl:value-of select="@reference"/>
			<xsl:if test="normalize-space(@reference) = ''"><xsl:value-of select="$gen_id"/></xsl:if>
		</xsl:variable>
		<xsl:variable name="reference" select="normalize-space($reference_)"/>
		<!-- fn sequence number in document -->
		<xsl:variable name="current_fn_number">
			<xsl:choose>
				<xsl:when test="@current_fn_number"><xsl:value-of select="@current_fn_number"/></xsl:when> <!-- for BSI -->
				<xsl:otherwise>
					<xsl:value-of select="count($p_fn//fn[@reference = $reference]/preceding-sibling::fn) + 1"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="current_fn_number_text">
			<xsl:value-of select="$current_fn_number"/>
			
			
		</xsl:variable>
		
		<xsl:variable name="ref_id" select="concat('footnote_', $lang, '_', $reference, '_', $current_fn_number)"/>
		<xsl:variable name="footnote_inline">
			<fo:inline xsl:use-attribute-sets="fn-num-style">
				
				
				<fo:basic-link internal-destination="{$ref_id}" fox:alt-text="footnote {$current_fn_number}">
					<xsl:value-of select="$current_fn_number_text"/>
				</fo:basic-link>
			</fo:inline>
		</xsl:variable>
		<!-- DEBUG: p_fn=<xsl:copy-of select="$p_fn"/>
		gen_id=<xsl:value-of select="$gen_id"/> -->
		<xsl:choose>
			<xsl:when test="normalize-space(@skip_footnote_body) = 'true'">
				<xsl:copy-of select="$footnote_inline"/>
			</xsl:when>
			<xsl:when test="$p_fn//fn[@gen_id = $gen_id] or normalize-space(@skip_footnote_body) = 'false'">
				<fo:footnote xsl:use-attribute-sets="fn-style">
					<xsl:copy-of select="$footnote_inline"/>
					<fo:footnote-body>
						
						<fo:block-container xsl:use-attribute-sets="fn-container-body-style">
							
							<fo:block xsl:use-attribute-sets="fn-body-style">
								
								
								
								<fo:inline id="{$ref_id}" xsl:use-attribute-sets="fn-body-num-style">
									
									
									
									
									<xsl:value-of select="$current_fn_number_text"/>
								</fo:inline>
								<xsl:apply-templates/>
							</fo:block>
						</fo:block-container>
					</fo:footnote-body>
				</fo:footnote>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy-of select="$footnote_inline"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="get_fn_list">
		<xsl:choose>
			<xsl:when test="@current_fn_number"> <!-- for BSI, footnote reference number calculated already -->
				<fn gen_id="{generate-id(.)}">
					<xsl:copy-of select="@*"/>
					<xsl:copy-of select="node()"/>
				</fn>
			</xsl:when>
			<xsl:otherwise>
				<!-- itetation for:
				footnotes in bibdata/title
				footnotes in bibliography
				footnotes in document's body (except table's head/body/foot and figure text) 
				-->
				<xsl:for-each select="ancestor::*[contains(local-name(), '-standard')]/*[local-name() = 'bibdata']/*[local-name() = 'note'][@type='title-footnote']">
					<fn gen_id="{generate-id(.)}">
						<xsl:copy-of select="@*"/>
						<xsl:copy-of select="node()"/>
					</fn>
				</xsl:for-each>
				<xsl:for-each select="ancestor::*[contains(local-name(), '-standard')]/*[local-name()='boilerplate']/* |       ancestor::*[contains(local-name(), '-standard')]/*[local-name()='preface']/* |      ancestor::*[contains(local-name(), '-standard')]/*[local-name()='sections']/* |       ancestor::*[contains(local-name(), '-standard')]/*[local-name()='annex'] |      ancestor::*[contains(local-name(), '-standard')]/*[local-name()='bibliography']/*">
					<xsl:sort select="@displayorder" data-type="number"/>
					<xsl:for-each select=".//*[local-name() = 'bibitem'][ancestor::*[local-name() = 'references']]/*[local-name() = 'note'] |      .//*[local-name() = 'fn'][not(ancestor::*[(local-name() = 'table' or local-name() = 'figure') and not(ancestor::*[local-name() = 'name'])])][generate-id(.)=generate-id(key('kfn',@reference)[1])]">
						<!-- copy unique fn -->
						<fn gen_id="{generate-id(.)}">
							<xsl:copy-of select="@*"/>
							<xsl:copy-of select="node()"/>
						</fn>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="table_fn_display">
		<xsl:variable name="references">
			
			<xsl:for-each select="..//*[local-name()='fn'][local-name(..) != 'name']">
				<xsl:call-template name="create_fn"/>
			</xsl:for-each>
		</xsl:variable>
		
		<xsl:for-each select="xalan:nodeset($references)//fn">
			<xsl:variable name="reference" select="@reference"/>
			<xsl:if test="not(preceding-sibling::*[@reference = $reference])"> <!-- only unique reference puts in note-->
				<fo:block xsl:use-attribute-sets="table-fn-style">
				
					
					
					<fo:inline id="{@id}" xsl:use-attribute-sets="table-fn-number-style">
						
						
						
						
						
						<xsl:value-of select="@reference"/>
						
						
						
						
						
						
						
					</fo:inline>
					<fo:inline xsl:use-attribute-sets="table-fn-body-style">
						<xsl:copy-of select="./node()"/>
					</fo:inline>
				</fo:block>
			</xsl:if>
		</xsl:for-each>
	</xsl:template><xsl:template name="create_fn">
		<fn reference="{@reference}" id="{@reference}_{ancestor::*[@id][1]/@id}">
			
			
			<xsl:apply-templates/>
		</fn>
	</xsl:template><xsl:template name="table_name_fn_display">
		<xsl:for-each select="*[local-name()='name']//*[local-name()='fn']">
			<xsl:variable name="reference" select="@reference"/>
			<fo:block id="{@reference}_{ancestor::*[@id][1]/@id}"><xsl:value-of select="@reference"/></fo:block>
			<fo:block margin-bottom="12pt">
				<xsl:apply-templates/>
			</fo:block>
		</xsl:for-each>
	</xsl:template><xsl:template name="fn_display_figure">
	
		<xsl:variable name="references">
			<xsl:for-each select=".//*[local-name()='fn'][not(parent::*[local-name()='name'])]">
				<fn reference="{@reference}" id="{@reference}_{ancestor::*[@id][1]/@id}">
					<xsl:apply-templates/>
				</fn>
			</xsl:for-each>
		</xsl:variable>
	
		<xsl:if test="xalan:nodeset($references)//fn">
		
			<xsl:variable name="key_iso">
				
			</xsl:variable>
			
			<!-- current hierarchy is 'figure' element -->
			<xsl:variable name="following_dl_colwidths">
				<xsl:if test="*[local-name() = 'dl']"><!-- if there is a 'dl', then set the same columns width as for 'dl' -->
					<xsl:variable name="simple-table">
						<!-- <xsl:variable name="doc_ns">
							<xsl:if test="$namespace = 'bipm'">bipm</xsl:if>
						</xsl:variable>
						<xsl:variable name="ns">
							<xsl:choose>
								<xsl:when test="normalize-space($doc_ns)  != ''">
									<xsl:value-of select="normalize-space($doc_ns)"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="substring-before(name(/*), '-')"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable> -->
						
						<xsl:for-each select="*[local-name() = 'dl'][1]">
							<tbody>
								<xsl:apply-templates mode="dl"/>
							</tbody>
						</xsl:for-each>
					</xsl:variable>
					
					<xsl:call-template name="calculate-column-widths">
						<xsl:with-param name="cols-count" select="2"/>
						<xsl:with-param name="table" select="$simple-table"/>
					</xsl:call-template>
					
				</xsl:if>
			</xsl:variable>
			
			<xsl:variable name="maxlength_dt">
				<xsl:for-each select="*[local-name() = 'dl'][1]">
					<xsl:call-template name="getMaxLength_dt"/>			
				</xsl:for-each>
			</xsl:variable>

			<fo:block>
				<fo:table width="95%" table-layout="fixed">
					<xsl:if test="normalize-space($key_iso) = 'true'">
						<xsl:attribute name="font-size">10pt</xsl:attribute>
						
					</xsl:if>
					<xsl:choose>
						<!-- if there 'dl', then set same columns width -->
						<xsl:when test="xalan:nodeset($following_dl_colwidths)//column">
							<xsl:call-template name="setColumnWidth_dl">
								<xsl:with-param name="colwidths" select="$following_dl_colwidths"/>								
								<xsl:with-param name="maxlength_dt" select="$maxlength_dt"/>								
							</xsl:call-template>
						</xsl:when>
						<xsl:otherwise>
							<fo:table-column column-width="15%"/>
							<fo:table-column column-width="85%"/>
						</xsl:otherwise>
					</xsl:choose>
					<fo:table-body>
						<xsl:for-each select="xalan:nodeset($references)//fn">
							<xsl:variable name="reference" select="@reference"/>
							<xsl:if test="not(preceding-sibling::*[@reference = $reference])"> <!-- only unique reference puts in note-->
								<fo:table-row>
									<fo:table-cell>
										<fo:block>
											<fo:inline id="{@id}" xsl:use-attribute-sets="figure-fn-number-style">
												<xsl:value-of select="@reference"/>
											</fo:inline>
										</fo:block>
									</fo:table-cell>
									<fo:table-cell>
										<fo:block xsl:use-attribute-sets="figure-fn-body-style">
											<xsl:if test="normalize-space($key_iso) = 'true'">
												
														<xsl:attribute name="margin-bottom">0</xsl:attribute>
													
											</xsl:if>
											<xsl:copy-of select="./node()"/>
										</fo:block>
									</fo:table-cell>
								</fo:table-row>
							</xsl:if>
						</xsl:for-each>
					</fo:table-body>
				</fo:table>
			</fo:block>
		</xsl:if>
		
	</xsl:template><xsl:template match="*[local-name()='fn']">
		<fo:inline xsl:use-attribute-sets="fn-reference-style">
		
			
			
			
			
			<fo:basic-link internal-destination="{@reference}_{ancestor::*[@id][1]/@id}" fox:alt-text="{@reference}"> <!-- @reference   | ancestor::*[local-name()='clause'][1]/@id-->
				
				
				<xsl:value-of select="@reference"/>
				
				
			</fo:basic-link>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='fn']/text()[normalize-space() != '']">
		<fo:inline><xsl:value-of select="."/></fo:inline>
	</xsl:template><xsl:template match="*[local-name()='fn']//*[local-name()='p']">
		<fo:inline>
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='dl']">
		<xsl:variable name="isAdded" select="@added"/>
		<xsl:variable name="isDeleted" select="@deleted"/>
		<fo:block-container>
			
					<xsl:if test="not(ancestor::*[local-name() = 'quote'])">
						<xsl:attribute name="margin-left">0mm</xsl:attribute>
					</xsl:if>
				
			
			<xsl:if test="parent::*[local-name() = 'note']">
				<xsl:attribute name="margin-left">
					<xsl:choose>
						<xsl:when test="not(ancestor::*[local-name() = 'table'])"><xsl:value-of select="$note-body-indent"/></xsl:when>
						<xsl:otherwise><xsl:value-of select="$note-body-indent-table"/></xsl:otherwise>
					</xsl:choose>
				</xsl:attribute>
				
			</xsl:if>
			
			<xsl:call-template name="setTrackChangesStyles">
				<xsl:with-param name="isAdded" select="$isAdded"/>
				<xsl:with-param name="isDeleted" select="$isDeleted"/>
			</xsl:call-template>
			
			<fo:block-container margin-left="0mm">
			
				
						<xsl:attribute name="margin-right">0mm</xsl:attribute>
					
				
				<xsl:variable name="parent" select="local-name(..)"/>
				
				<xsl:variable name="key_iso">
					 <!-- and  (not(../@class) or ../@class !='pseudocode') -->
				</xsl:variable>
				
				<xsl:variable name="onlyOneComponent" select="normalize-space($parent = 'formula' and count(*[local-name()='dt']) = 1)"/>
				
				<xsl:choose>
					<xsl:when test="$onlyOneComponent = 'true'"> <!-- only one component -->
						
								<fo:block margin-bottom="12pt" text-align="left">
									
									<xsl:variable name="title-where">
										<xsl:call-template name="getLocalizedString">
											<xsl:with-param name="key">where</xsl:with-param>
										</xsl:call-template>
									</xsl:variable>
									<xsl:value-of select="$title-where"/><xsl:text>Â </xsl:text>
									<xsl:apply-templates select="*[local-name()='dt']/*"/>
									<xsl:text/>
									<xsl:apply-templates select="*[local-name()='dd']/*" mode="inline"/>
								</fo:block>
							
					</xsl:when> <!-- END: only one component -->
					<xsl:when test="$parent = 'formula'"> <!-- a few components -->
						<fo:block margin-bottom="12pt" text-align="left">
							
							
							
							
							<xsl:variable name="title-where">
								<xsl:call-template name="getLocalizedString">
									<xsl:with-param name="key">where</xsl:with-param>
								</xsl:call-template>
							</xsl:variable>
							<xsl:value-of select="$title-where"/>
						</fo:block>
					</xsl:when>  <!-- END: a few components -->
					<xsl:when test="$parent = 'figure' and  (not(../@class) or ../@class !='pseudocode')"> <!-- definition list in a figure -->
						<fo:block font-weight="bold" text-align="left" margin-bottom="12pt" keep-with-next="always">
							
							
							
							
								<xsl:attribute name="font-weight">normal</xsl:attribute>
								<xsl:attribute name="color">black</xsl:attribute>
							
							<xsl:variable name="title-key">
								<xsl:call-template name="getLocalizedString">
									<xsl:with-param name="key">key</xsl:with-param>
								</xsl:call-template>
							</xsl:variable>
							<xsl:value-of select="$title-key"/>
						</fo:block>
					</xsl:when>  <!-- END: definition list in a figure -->
				</xsl:choose>
				
				<!-- a few components -->
				<xsl:if test="$onlyOneComponent = 'false'">
					<fo:block>
						
						
						
						
						
						<xsl:if test="ancestor::*[local-name() = 'dd' or local-name() = 'td']">
							<xsl:attribute name="margin-top">0</xsl:attribute>
						</xsl:if>
						
						<fo:block>
							
							
							
							
							<xsl:apply-templates select="*[local-name() = 'name']">
								<xsl:with-param name="process">true</xsl:with-param>
							</xsl:apply-templates>
							
							<xsl:if test="$isGenerateTableIF = 'true'">
								<!-- to determine start of table -->
								<fo:block id="{concat('table_if_start_',@id)}" keep-with-next="always" font-size="1pt">Start table '<xsl:value-of select="@id"/>'.</fo:block>
							</xsl:if>
							
							<fo:table width="95%" table-layout="fixed">
							
								<xsl:if test="$isGenerateTableIF = 'true'">
									<xsl:attribute name="wrap-option">no-wrap</xsl:attribute>
								</xsl:if>
							
								
								<xsl:choose>
									<xsl:when test="normalize-space($key_iso) = 'true' and $parent = 'formula'"/>
									<xsl:when test="normalize-space($key_iso) = 'true'">
										<xsl:attribute name="font-size">10pt</xsl:attribute>
										
									</xsl:when>
								</xsl:choose>
								
								
								
								<xsl:choose>
									<xsl:when test="$isGenerateTableIF = 'true'">
										<!-- generate IF for table widths -->
										<!-- example:
											<tr>
												<td valign="top" align="left" id="tab-symdu_1_1">
													<p>Symbol</p>
													<word id="tab-symdu_1_1_word_1">Symbol</word>
												</td>
												<td valign="top" align="left" id="tab-symdu_1_2">
													<p>Description</p>
													<word id="tab-symdu_1_2_word_1">Description</word>
												</td>
											</tr>
										-->
										
										<!-- create virtual html table for dl/[dt and dd] -->
										<xsl:variable name="simple-table">
											
											<xsl:variable name="dl_table">
												<tbody>
													<xsl:apply-templates mode="dl_if">
														<xsl:with-param name="id" select="@id"/>
													</xsl:apply-templates>
												</tbody>
											</xsl:variable>
											
											<!-- dl_table='<xsl:copy-of select="$dl_table"/>' -->
											
											<!-- Step: replace <br/> to <p>...</p> -->
											<xsl:variable name="table_without_br">
												<xsl:apply-templates select="xalan:nodeset($dl_table)" mode="table-without-br"/>
											</xsl:variable>
											
											<!-- table_without_br='<xsl:copy-of select="$table_without_br"/>' -->
											
											<!-- Step: add id to each cell -->
											<!-- add <word>...</word> for each word, image, math -->
											<xsl:variable name="simple-table-id">
												<xsl:apply-templates select="xalan:nodeset($table_without_br)" mode="simple-table-id">
													<xsl:with-param name="id" select="@id"/>
												</xsl:apply-templates>
											</xsl:variable>
											
											<!-- simple-table-id='<xsl:copy-of select="$simple-table-id"/>' -->
											
											<xsl:copy-of select="xalan:nodeset($simple-table-id)"/>
											
										</xsl:variable>
										
										<!-- DEBUG: simple-table<xsl:copy-of select="$simple-table"/> -->
										
										<xsl:apply-templates select="xalan:nodeset($simple-table)" mode="process_table-if">
											<xsl:with-param name="table_or_dl">dl</xsl:with-param>
										</xsl:apply-templates>
										
									</xsl:when>
									<xsl:otherwise>
								
										<xsl:variable name="simple-table">
										
											<xsl:variable name="dl_table">
												<tbody>
													<xsl:apply-templates mode="dl">
														<xsl:with-param name="id" select="@id"/>
													</xsl:apply-templates>
												</tbody>
											</xsl:variable>
											
											<xsl:copy-of select="$dl_table"/>
										</xsl:variable>
								
										<xsl:variable name="colwidths">
											<xsl:call-template name="calculate-column-widths">
												<xsl:with-param name="cols-count" select="2"/>
												<xsl:with-param name="table" select="$simple-table"/>
											</xsl:call-template>
										</xsl:variable>
										
										<!-- <xsl:text disable-output-escaping="yes">&lt;!- -</xsl:text>
											DEBUG
											colwidths=<xsl:copy-of select="$colwidths"/>
										<xsl:text disable-output-escaping="yes">- -&gt;</xsl:text> -->
										
										<!-- colwidths=<xsl:copy-of select="$colwidths"/> -->
										
										<xsl:variable name="maxlength_dt">
											<xsl:call-template name="getMaxLength_dt"/>							
										</xsl:variable>
										
										<xsl:variable name="isContainsKeepTogetherTag_">
											false
										</xsl:variable>
										<xsl:variable name="isContainsKeepTogetherTag" select="normalize-space($isContainsKeepTogetherTag_)"/>
										<!-- isContainsExpressReference=<xsl:value-of select="$isContainsExpressReference"/> -->
										
										
										<xsl:call-template name="setColumnWidth_dl">
											<xsl:with-param name="colwidths" select="$colwidths"/>							
											<xsl:with-param name="maxlength_dt" select="$maxlength_dt"/>
											<xsl:with-param name="isContainsKeepTogetherTag" select="$isContainsKeepTogetherTag"/>
										</xsl:call-template>
										
										<fo:table-body>
											
											<!-- DEBUG -->
											<xsl:if test="$table_if_debug = 'true'">
												<fo:table-row>
													<fo:table-cell number-columns-spanned="2" font-size="60%">
														<xsl:apply-templates select="xalan:nodeset($colwidths)" mode="print_as_xml"/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:if>

											<xsl:apply-templates>
												<xsl:with-param name="key_iso" select="normalize-space($key_iso)"/>
												<xsl:with-param name="split_keep-within-line" select="xalan:nodeset($colwidths)/split_keep-within-line"/>
											</xsl:apply-templates>
											
										</fo:table-body>
									</xsl:otherwise>
								</xsl:choose>
							</fo:table>
						</fo:block>
					</fo:block>
				</xsl:if> <!-- END: a few components -->
			</fo:block-container>
		</fo:block-container>
		
		<xsl:if test="$isGenerateTableIF = 'true'"> <!-- process nested 'dl' -->
			<xsl:apply-templates select="*[local-name() = 'dd']/*[local-name() = 'dl']"/>
		</xsl:if>
		
	</xsl:template><xsl:template match="*[local-name() = 'dl']/*[local-name() = 'name']">
		<xsl:param name="process">false</xsl:param>
		<xsl:if test="$process = 'true'">
			<fo:block xsl:use-attribute-sets="dl-name-style">
				<xsl:apply-templates/>
			</fo:block>
		</xsl:if>
	</xsl:template><xsl:template name="setColumnWidth_dl">
		<xsl:param name="colwidths"/>		
		<xsl:param name="maxlength_dt"/>
		<xsl:param name="isContainsKeepTogetherTag"/>
		
		<!-- <colwidths><xsl:copy-of select="$colwidths"/></colwidths> -->
		
		<xsl:choose>
			<xsl:when test="xalan:nodeset($colwidths)/autolayout">
				<xsl:call-template name="insertTableColumnWidth">
					<xsl:with-param name="colwidths" select="$colwidths"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="ancestor::*[local-name()='dl']"><!-- second level, i.e. inlined table -->
				<fo:table-column column-width="50%"/>
				<fo:table-column column-width="50%"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:choose>
					<xsl:when test="xalan:nodeset($colwidths)/autolayout">
						<xsl:call-template name="insertTableColumnWidth">
							<xsl:with-param name="colwidths" select="$colwidths"/>
						</xsl:call-template>
					</xsl:when>
					<xsl:when test="$isContainsKeepTogetherTag">
						<xsl:call-template name="insertTableColumnWidth">
							<xsl:with-param name="colwidths" select="$colwidths"/>
						</xsl:call-template>
					</xsl:when>
					<!-- to set width check most wide chars like `W` -->
					<xsl:when test="normalize-space($maxlength_dt) != '' and number($maxlength_dt) &lt;= 2"> <!-- if dt contains short text like t90, a, etc -->
						<fo:table-column column-width="7%"/>
						<fo:table-column column-width="93%"/>
					</xsl:when>
					<xsl:when test="normalize-space($maxlength_dt) != '' and number($maxlength_dt) &lt;= 5"> <!-- if dt contains short text like ABC, etc -->
						<fo:table-column column-width="15%"/>
						<fo:table-column column-width="85%"/>
					</xsl:when>
					<xsl:when test="normalize-space($maxlength_dt) != '' and number($maxlength_dt) &lt;= 7"> <!-- if dt contains short text like ABCDEF, etc -->
						<fo:table-column column-width="20%"/>
						<fo:table-column column-width="80%"/>
					</xsl:when>
					<xsl:when test="normalize-space($maxlength_dt) != '' and number($maxlength_dt) &lt;= 10"> <!-- if dt contains short text like ABCDEFEF, etc -->
						<fo:table-column column-width="25%"/>
						<fo:table-column column-width="75%"/>
					</xsl:when>
					<!-- <xsl:when test="xalan:nodeset($colwidths)/column[1] div xalan:nodeset($colwidths)/column[2] &gt; 1.7">
						<fo:table-column column-width="60%"/>
						<fo:table-column column-width="40%"/>
					</xsl:when> -->
					<xsl:when test="xalan:nodeset($colwidths)/column[1] div xalan:nodeset($colwidths)/column[2] &gt; 1.3">
						<fo:table-column column-width="50%"/>
						<fo:table-column column-width="50%"/>
					</xsl:when>
					<xsl:when test="xalan:nodeset($colwidths)/column[1] div xalan:nodeset($colwidths)/column[2] &gt; 0.5">
						<fo:table-column column-width="40%"/>
						<fo:table-column column-width="60%"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:call-template name="insertTableColumnWidth">
							<xsl:with-param name="colwidths" select="$colwidths"/>
						</xsl:call-template>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="insertTableColumnWidth">
		<xsl:param name="colwidths"/>
		
		<xsl:for-each select="xalan:nodeset($colwidths)//column">
			<xsl:choose>
				<xsl:when test=". = 1 or . = 0">
					<fo:table-column column-width="proportional-column-width(2)"/>
				</xsl:when>
				<xsl:otherwise>
					<!-- <fo:table-column column-width="proportional-column-width({.})"/> -->
					<xsl:variable name="divider">
						<xsl:value-of select="@divider"/>
						<xsl:if test="not(@divider)">1</xsl:if>
					</xsl:variable>
					<fo:table-column column-width="proportional-column-width({round(. div $divider)})"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template><xsl:template name="getMaxLength_dt">
		<xsl:variable name="lengths">
			<xsl:for-each select="*[local-name()='dt']">
				<xsl:variable name="maintext_length" select="string-length(normalize-space(.))"/>
				<xsl:variable name="attributes">
					<xsl:for-each select=".//@open"><xsl:value-of select="."/></xsl:for-each>
					<xsl:for-each select=".//@close"><xsl:value-of select="."/></xsl:for-each>
				</xsl:variable>
				<length><xsl:value-of select="string-length(normalize-space(.)) + string-length($attributes)"/></length>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="maxLength">
			<xsl:for-each select="xalan:nodeset($lengths)/length">
				<xsl:sort select="." data-type="number" order="descending"/>
				<xsl:if test="position() = 1">
					<xsl:value-of select="."/>
				</xsl:if>
			</xsl:for-each>
		</xsl:variable>
		<!-- <xsl:message>DEBUG:<xsl:value-of select="$maxLength"/></xsl:message> -->
		<xsl:value-of select="$maxLength"/>
	</xsl:template><xsl:template match="*[local-name()='dl']/*[local-name()='note']" priority="2">
		<xsl:param name="key_iso"/>
		<!-- <tr>
			<td>NOTE</td>
			<td>
				<xsl:apply-templates />
			</td>
		</tr>
		 -->
		<!-- OLD Variant -->
		<!-- <fo:table-row>
			<fo:table-cell>
				<fo:block margin-top="6pt">
					<xsl:if test="normalize-space($key_iso) = 'true'">
						<xsl:attribute name="margin-top">0</xsl:attribute>
					</xsl:if>
					<xsl:apply-templates select="*[local-name() = 'name']" />
				</fo:block>
			</fo:table-cell>
			<fo:table-cell>
				<fo:block>
					<xsl:apply-templates select="node()[not(local-name() = 'name')]" />
				</fo:block>
			</fo:table-cell>
		</fo:table-row> -->
		<!-- <tr>
			<td number-columns-spanned="2">NOTE <xsl:apply-templates /> </td>
		</tr> 
		-->
		<fo:table-row>
			<fo:table-cell number-columns-spanned="2">
				<fo:block>
					<xsl:call-template name="note"/>
				</fo:block>
			</fo:table-cell>
		</fo:table-row>
	</xsl:template><xsl:template match="*[local-name()='dt']" mode="dl">
		<xsl:param name="id"/>
		<xsl:variable name="row_number" select="count(preceding-sibling::*[local-name()='dt']) + 1"/>
		<tr>
			<td>
				<xsl:attribute name="id">
					<xsl:value-of select="concat($id,'_',$row_number,'_1')"/>
				</xsl:attribute>
				<xsl:apply-templates/>
			</td>
			<td>
				<xsl:attribute name="id">
					<xsl:value-of select="concat($id,'_',$row_number,'_2')"/>
				</xsl:attribute>
				
						<xsl:apply-templates select="following-sibling::*[local-name()='dd'][1]">
							<xsl:with-param name="process">true</xsl:with-param>
						</xsl:apply-templates>
					
			</td>
		</tr>
		
	</xsl:template><xsl:template match="*[local-name()='dt']">
		<xsl:param name="key_iso"/>
		<xsl:param name="split_keep-within-line"/>
		
		<fo:table-row xsl:use-attribute-sets="dt-row-style">
			<xsl:call-template name="insert_dt_cell">
				<xsl:with-param name="key_iso" select="$key_iso"/>
				<xsl:with-param name="split_keep-within-line" select="$split_keep-within-line"/>
			</xsl:call-template>
			<xsl:for-each select="following-sibling::*[local-name()='dd'][1]">
				<xsl:call-template name="insert_dd_cell">
					<xsl:with-param name="split_keep-within-line" select="$split_keep-within-line"/>
				</xsl:call-template>
			</xsl:for-each>
		</fo:table-row>
	</xsl:template><xsl:template name="insert_dt_cell">
		<xsl:param name="key_iso"/>
		<xsl:param name="split_keep-within-line"/>
		<fo:table-cell xsl:use-attribute-sets="dt-cell-style">
		
			<xsl:if test="$isGenerateTableIF = 'true'">
				<!-- border is mandatory, to calculate real width -->
				<xsl:attribute name="border">0.1pt solid black</xsl:attribute>
				<xsl:attribute name="text-align">left</xsl:attribute>
			</xsl:if>
			
			
			<fo:block xsl:use-attribute-sets="dt-block-style">
				<xsl:copy-of select="@id"/>
				
				<xsl:if test="normalize-space($key_iso) = 'true'">
					<xsl:attribute name="margin-top">0</xsl:attribute>
				</xsl:if>
				
				
				
				<xsl:apply-templates>
					<xsl:with-param name="split_keep-within-line" select="$split_keep-within-line"/>
				</xsl:apply-templates>
				
				<xsl:if test="$isGenerateTableIF = 'true'"><fo:inline id="{@id}_end">end</fo:inline></xsl:if> <!-- to determine width of text --> <!-- <xsl:value-of select="$hair_space"/> -->
				
			</fo:block>
		</fo:table-cell>
	</xsl:template><xsl:template name="insert_dd_cell">
		<xsl:param name="split_keep-within-line"/>
		<fo:table-cell xsl:use-attribute-sets="dd-cell-style">
		
			<xsl:if test="$isGenerateTableIF = 'true'">
				<!-- border is mandatory, to calculate real width -->
				<xsl:attribute name="border">0.1pt solid black</xsl:attribute>
			</xsl:if>
		
			<fo:block>
			
				<xsl:if test="$isGenerateTableIF = 'true'">
					<xsl:attribute name="id"><xsl:value-of select="@id"/></xsl:attribute>
				</xsl:if>
			
				

				<xsl:choose>
					<xsl:when test="$isGenerateTableIF = 'true'">
						<xsl:apply-templates> <!-- following-sibling::*[local-name()='dd'][1] -->
							<xsl:with-param name="process">true</xsl:with-param>
						</xsl:apply-templates>
					</xsl:when>
					<xsl:otherwise>
						<xsl:apply-templates select="."> <!-- following-sibling::*[local-name()='dd'][1] -->
							<xsl:with-param name="process">true</xsl:with-param>
							<xsl:with-param name="split_keep-within-line" select="$split_keep-within-line"/>
						</xsl:apply-templates>
					</xsl:otherwise>
				
				</xsl:choose>
				
				<xsl:if test="$isGenerateTableIF = 'true'"><fo:inline id="{@id}_end">end</fo:inline></xsl:if> <!-- to determine width of text --> <!-- <xsl:value-of select="$hair_space"/> -->
				
			</fo:block>
		</fo:table-cell>
	</xsl:template><xsl:template match="*[local-name()='dd']" mode="dl"/><xsl:template match="*[local-name()='dd']" mode="dl_process">
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name()='dd']">
		<xsl:param name="process">false</xsl:param>
		<xsl:param name="split_keep-within-line"/>
		<xsl:if test="$process = 'true'">
			<xsl:apply-templates select="@language"/>
			<xsl:apply-templates>
				<xsl:with-param name="split_keep-within-line" select="$split_keep-within-line"/>
			</xsl:apply-templates>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name()='dd']/*[local-name()='p']" mode="inline">
		<fo:inline><xsl:text> </xsl:text><xsl:apply-templates/></fo:inline>
	</xsl:template><xsl:template match="*[local-name()='dt']" mode="dl_if">
		<xsl:param name="id"/>
		<xsl:variable name="row_number" select="count(preceding-sibling::*[local-name()='dt']) + 1"/>
		<tr>
			<td>
				<xsl:copy-of select="node()"/>
			</td>
			<td>
				
						<xsl:copy-of select="following-sibling::*[local-name()='dd'][1]/node()[not(local-name() = 'dl')]"/>
						
						<!-- get paragraphs from nested 'dl' -->
						<xsl:apply-templates select="following-sibling::*[local-name()='dd'][1]/*[local-name() = 'dl']" mode="dl_if_nested"/>
						
					
			</td>
		</tr>
		
	</xsl:template><xsl:template match="*[local-name()='dd']" mode="dl_if"/><xsl:template match="*[local-name()='dl']" mode="dl_if_nested">
		<xsl:for-each select="*[local-name() = 'dt']">
			<p>
				<xsl:copy-of select="node()"/>
				<xsl:text> </xsl:text>
				<xsl:copy-of select="following-sibling::*[local-name()='dd'][1]/*[local-name() = 'p']/node()"/>
			</p>
		</xsl:for-each>
	</xsl:template><xsl:template match="*[local-name()='dd']" mode="dl_if_nested"/><xsl:template match="*[local-name()='em']">
		<fo:inline font-style="italic">
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='strong'] | *[local-name()='b']">
		<xsl:param name="split_keep-within-line"/>
		<fo:inline font-weight="bold">
			
				<xsl:if test="not(parent::*[local-name() = 'termsource'])">
					<xsl:attribute name="font-weight">normal</xsl:attribute>
					<xsl:attribute name="color">black</xsl:attribute>
				</xsl:if>
			
			<xsl:apply-templates>
				<xsl:with-param name="split_keep-within-line" select="$split_keep-within-line"/>
			</xsl:apply-templates>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='padding']">
		<fo:inline padding-right="{@value}">Â </fo:inline>
	</xsl:template><xsl:template match="*[local-name()='sup']">
		<fo:inline font-size="80%" vertical-align="super">
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='sub']">
		<fo:inline font-size="80%" vertical-align="sub">
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='tt']">
		<fo:inline xsl:use-attribute-sets="tt-style">
		
			<xsl:variable name="_font-size">
				
				
				
				
				
				 <!-- 10 -->
				
				
				
				
				
				
				
				
				
					<xsl:choose>
						<xsl:when test="ancestor::*[local-name() = 'table']">inherit</xsl:when>
						<xsl:otherwise>95%</xsl:otherwise> <!-- 110% -->
					</xsl:choose>
				
						
			</xsl:variable>
			<xsl:variable name="font-size" select="normalize-space($_font-size)"/>		
			<xsl:if test="$font-size != ''">
				<xsl:attribute name="font-size">
					<xsl:choose>
						<xsl:when test="$font-size = 'inherit'"><xsl:value-of select="$font-size"/></xsl:when>
						<xsl:when test="contains($font-size, '%')"><xsl:value-of select="$font-size"/></xsl:when>
						<xsl:when test="ancestor::*[local-name()='note'] or ancestor::*[local-name()='example']"><xsl:value-of select="$font-size * 0.91"/>pt</xsl:when>
						<xsl:otherwise><xsl:value-of select="$font-size"/>pt</xsl:otherwise>
					</xsl:choose>
				</xsl:attribute>
			</xsl:if>
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='tt']/text()" priority="2">
		<xsl:call-template name="add_spaces_to_sourcecode"/>
	</xsl:template><xsl:template match="*[local-name()='underline']">
		<fo:inline text-decoration="underline">
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='add']" name="tag_add">
		<xsl:param name="skip">true</xsl:param>
		<xsl:param name="block">false</xsl:param>
		<xsl:param name="type"/>
		<xsl:param name="text-align"/>
		<xsl:choose>
			<xsl:when test="starts-with(., $ace_tag)"> <!-- examples: ace-tag_A1_start, ace-tag_A2_end, C1_start, AC_start -->
				<xsl:choose>
					<xsl:when test="$skip = 'true' and       ((local-name(../..) = 'note' and not(preceding-sibling::node())) or       (local-name(..) = 'title' and preceding-sibling::node()[1][local-name() = 'tab']) or      local-name(..) = 'formattedref' and not(preceding-sibling::node()))      and       ../node()[last()][local-name() = 'add'][starts-with(text(), $ace_tag)]"><!-- start tag displayed in template name="note" and title --></xsl:when>
					<xsl:otherwise>
						<xsl:variable name="tag">
							<xsl:call-template name="insertTag">
								<xsl:with-param name="type">
									<xsl:choose>
										<xsl:when test="$type = ''"><xsl:value-of select="substring-after(substring-after(., $ace_tag), '_')"/> <!-- start or end --></xsl:when>
										<xsl:otherwise><xsl:value-of select="$type"/></xsl:otherwise>
									</xsl:choose>
								</xsl:with-param>
								<xsl:with-param name="kind" select="substring(substring-before(substring-after(., $ace_tag), '_'), 1, 1)"/> <!-- A or C -->
								<xsl:with-param name="value" select="substring(substring-before(substring-after(., $ace_tag), '_'), 2)"/> <!-- 1, 2, C -->
							</xsl:call-template>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$block = 'false'">
								<fo:inline>
									<xsl:copy-of select="$tag"/>									
								</fo:inline>
							</xsl:when>
							<xsl:otherwise>
								<fo:block> <!-- for around figures -->
									<xsl:if test="$text-align != ''">
										<xsl:attribute name="text-align"><xsl:value-of select="$text-align"/></xsl:attribute>
									</xsl:if>
									<xsl:copy-of select="$tag"/>
								</fo:block>
							</xsl:otherwise>
						</xsl:choose>
						
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="@amendment">
				<fo:inline>
					<xsl:call-template name="insertTag">
						<xsl:with-param name="kind">A</xsl:with-param>
						<xsl:with-param name="value"><xsl:value-of select="@amendment"/></xsl:with-param>
					</xsl:call-template>
					<xsl:apply-templates/>
					<xsl:call-template name="insertTag">
						<xsl:with-param name="type">closing</xsl:with-param>
						<xsl:with-param name="kind">A</xsl:with-param>
						<xsl:with-param name="value"><xsl:value-of select="@amendment"/></xsl:with-param>
					</xsl:call-template>
				</fo:inline>
			</xsl:when>
			<xsl:when test="@corrigenda">
				<fo:inline>
					<xsl:call-template name="insertTag">
						<xsl:with-param name="kind">C</xsl:with-param>
						<xsl:with-param name="value"><xsl:value-of select="@corrigenda"/></xsl:with-param>
					</xsl:call-template>
					<xsl:apply-templates/>
					<xsl:call-template name="insertTag">
						<xsl:with-param name="type">closing</xsl:with-param>
						<xsl:with-param name="kind">C</xsl:with-param>
						<xsl:with-param name="value"><xsl:value-of select="@corrigenda"/></xsl:with-param>
					</xsl:call-template>
				</fo:inline>
			</xsl:when>
			<xsl:otherwise>
				<fo:inline xsl:use-attribute-sets="add-style">
					<xsl:apply-templates/>
				</fo:inline>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="insertTag">
		<xsl:param name="type"/>
		<xsl:param name="kind"/>
		<xsl:param name="value"/>
		<xsl:variable name="add_width" select="string-length($value) * 20"/>
		<xsl:variable name="maxwidth" select="60 + $add_width"/>
			<fo:instream-foreign-object fox:alt-text="OpeningTag" baseline-shift="-20%"><!-- alignment-baseline="middle" -->
				<xsl:attribute name="height">5mm</xsl:attribute>
				<xsl:attribute name="content-width">100%</xsl:attribute>
				<xsl:attribute name="content-width">scale-down-to-fit</xsl:attribute>
				<xsl:attribute name="scaling">uniform</xsl:attribute>
				<svg xmlns="http://www.w3.org/2000/svg" width="{$maxwidth + 32}" height="80">
					<g>
						<xsl:if test="$type = 'closing' or $type = 'end'">
							<xsl:attribute name="transform">scale(-1 1) translate(-<xsl:value-of select="$maxwidth + 32"/>,0)</xsl:attribute>
						</xsl:if>
						<polyline points="0,0 {$maxwidth},0 {$maxwidth + 30},40 {$maxwidth},80 0,80 " stroke="black" stroke-width="5" fill="white"/>
						<line x1="0" y1="0" x2="0" y2="80" stroke="black" stroke-width="20"/>
					</g>
					<text font-family="Arial" x="15" y="57" font-size="40pt">
						<xsl:if test="$type = 'closing' or $type = 'end'">
							<xsl:attribute name="x">25</xsl:attribute>
						</xsl:if>
						<xsl:value-of select="$kind"/><tspan dy="10" font-size="30pt"><xsl:value-of select="$value"/></tspan>
					</text>
				</svg>
			</fo:instream-foreign-object>
	</xsl:template><xsl:template match="*[local-name()='del']">
		<fo:inline xsl:use-attribute-sets="del-style">
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='hi']">
		<fo:inline background-color="yellow">
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="text()[ancestor::*[local-name()='smallcap']]">
		<xsl:variable name="text" select="normalize-space(.)"/>
		<fo:inline font-size="75%">
				<xsl:if test="string-length($text) &gt; 0">
					<xsl:call-template name="recursiveSmallCaps">
						<xsl:with-param name="text" select="$text"/>
					</xsl:call-template>
				</xsl:if>
			</fo:inline> 
	</xsl:template><xsl:template name="recursiveSmallCaps">
    <xsl:param name="text"/>
    <xsl:variable name="char" select="substring($text,1,1)"/>
    <!-- <xsl:variable name="upperCase" select="translate($char, $lower, $upper)"/> -->
		<xsl:variable name="upperCase" select="java:toUpperCase(java:java.lang.String.new($char))"/>
    <xsl:choose>
      <xsl:when test="$char=$upperCase">
        <fo:inline font-size="{100 div 0.75}%">
          <xsl:value-of select="$upperCase"/>
        </fo:inline>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$upperCase"/>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:if test="string-length($text) &gt; 1">
      <xsl:call-template name="recursiveSmallCaps">
        <xsl:with-param name="text" select="substring($text,2)"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:template><xsl:template match="*[local-name() = 'pagebreak']">
		<fo:block break-after="page"/>
		<fo:block>Â </fo:block>
		<fo:block break-after="page"/>
	</xsl:template><xsl:template match="*[local-name() = 'span']">
		<xsl:apply-templates/>
	</xsl:template><xsl:template name="tokenize">
		<xsl:param name="text"/>
		<xsl:param name="separator" select="' '"/>
		<xsl:choose>
		
			<xsl:when test="$isGenerateTableIF = 'true' and not(contains($text, $separator))">
				<word><xsl:value-of select="normalize-space($text)"/></word>
			</xsl:when>
			<xsl:when test="not(contains($text, $separator))">
				<word>
					<xsl:variable name="len_str_tmp" select="string-length(normalize-space($text))"/>
					<xsl:choose>
						<xsl:when test="normalize-space(translate($text, 'X', '')) = ''"> <!-- special case for keep-together.within-line -->
							<xsl:value-of select="$len_str_tmp"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="str_no_en_chars" select="normalize-space(translate($text, $en_chars, ''))"/>
							<xsl:variable name="len_str_no_en_chars" select="string-length($str_no_en_chars)"/>
							<xsl:variable name="len_str">
								<xsl:choose>
									<xsl:when test="normalize-space(translate($text, $upper, '')) = ''"> <!-- english word in CAPITAL letters -->
										<xsl:value-of select="$len_str_tmp * 1.5"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="$len_str_tmp"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable> 
							
							<!-- <xsl:if test="$len_str_no_en_chars div $len_str &gt; 0.8">
								<xsl:message>
									div=<xsl:value-of select="$len_str_no_en_chars div $len_str"/>
									len_str=<xsl:value-of select="$len_str"/>
									len_str_no_en_chars=<xsl:value-of select="$len_str_no_en_chars"/>
								</xsl:message>
							</xsl:if> -->
							<!-- <len_str_no_en_chars><xsl:value-of select="$len_str_no_en_chars"/></len_str_no_en_chars>
							<len_str><xsl:value-of select="$len_str"/></len_str> -->
							<xsl:choose>
								<xsl:when test="$len_str_no_en_chars div $len_str &gt; 0.8"> <!-- means non-english string -->
									<xsl:value-of select="$len_str - $len_str_no_en_chars"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="$len_str"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:otherwise>
					</xsl:choose>
				</word>
			</xsl:when>
			<xsl:otherwise>
				<word>
					<xsl:variable name="word" select="normalize-space(substring-before($text, $separator))"/>
					<xsl:choose>
						<xsl:when test="$isGenerateTableIF = 'true'">
							<xsl:value-of select="$word"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="string-length($word)"/>
						</xsl:otherwise>
					</xsl:choose>
				</word>
				<xsl:call-template name="tokenize">
					<xsl:with-param name="text" select="substring-after($text, $separator)"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="tokenize_with_tags">
		<xsl:param name="tags"/>
		<xsl:param name="text"/>
		<xsl:param name="separator" select="' '"/>
		<xsl:choose>
		
			<xsl:when test="not(contains($text, $separator))">
				<word>
					<xsl:call-template name="enclose_text_in_tags">
						<xsl:with-param name="text" select="normalize-space($text)"/>
						<xsl:with-param name="tags" select="$tags"/>
					</xsl:call-template>
				</word>
			</xsl:when>
			<xsl:otherwise>
				<word>
					<xsl:call-template name="enclose_text_in_tags">
						<xsl:with-param name="text" select="normalize-space(substring-before($text, $separator))"/>
						<xsl:with-param name="tags" select="$tags"/>
					</xsl:call-template>
				</word>
				<xsl:call-template name="tokenize_with_tags">
					<xsl:with-param name="text" select="substring-after($text, $separator)"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="enclose_text_in_tags">
		<xsl:param name="text"/>
		<xsl:param name="tags"/>
		<xsl:param name="num">1</xsl:param> <!-- default (start) value -->
		
		<xsl:variable name="tag_name" select="normalize-space(xalan:nodeset($tags)//tag[$num])"/>
		
		<xsl:choose>
			<xsl:when test="$tag_name = ''"><xsl:value-of select="$text"/></xsl:when>
			<xsl:otherwise>
				<xsl:element name="{$tag_name}">
					<xsl:call-template name="enclose_text_in_tags">
						<xsl:with-param name="text" select="$text"/>
						<xsl:with-param name="tags" select="$tags"/>
						<xsl:with-param name="num" select="$num + 1"/>
					</xsl:call-template>
				</xsl:element>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="max_length">
		<xsl:param name="words"/>
		<xsl:for-each select="$words//word">
				<xsl:sort select="." data-type="number" order="descending"/>
				<xsl:if test="position()=1">
						<xsl:value-of select="."/>
				</xsl:if>
		</xsl:for-each>
	</xsl:template><xsl:template name="add-zero-spaces-java">
		<xsl:param name="text" select="."/>
		<!-- add zero-width space (#x200B) after characters: dash, dot, colon, equal, underscore, em dash, thin space  -->
		<xsl:value-of select="java:replaceAll(java:java.lang.String.new($text),'(-|\.|:|=|_|â|â)','$1â')"/>
	</xsl:template><xsl:template name="add-zero-spaces-link-java">
		<xsl:param name="text" select="."/>
		<!-- add zero-width space (#x200B) after characters: dash, dot, colon, equal, underscore, em dash, thin space  -->
		<xsl:value-of select="java:replaceAll(java:java.lang.String.new($text),'(-|\.|:|=|_|â|â|,)','$1â')"/>
	</xsl:template><xsl:template name="add-zero-spaces">
		<xsl:param name="text" select="."/>
		<xsl:variable name="zero-space-after-chars">-</xsl:variable>
		<xsl:variable name="zero-space-after-dot">.</xsl:variable>
		<xsl:variable name="zero-space-after-colon">:</xsl:variable>
		<xsl:variable name="zero-space-after-equal">=</xsl:variable>
		<xsl:variable name="zero-space-after-underscore">_</xsl:variable>
		<xsl:variable name="zero-space">â</xsl:variable>
		<xsl:choose>
			<xsl:when test="contains($text, $zero-space-after-chars)">
				<xsl:value-of select="substring-before($text, $zero-space-after-chars)"/>
				<xsl:value-of select="$zero-space-after-chars"/>
				<xsl:value-of select="$zero-space"/>
				<xsl:call-template name="add-zero-spaces">
					<xsl:with-param name="text" select="substring-after($text, $zero-space-after-chars)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="contains($text, $zero-space-after-dot)">
				<xsl:value-of select="substring-before($text, $zero-space-after-dot)"/>
				<xsl:value-of select="$zero-space-after-dot"/>
				<xsl:value-of select="$zero-space"/>
				<xsl:call-template name="add-zero-spaces">
					<xsl:with-param name="text" select="substring-after($text, $zero-space-after-dot)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="contains($text, $zero-space-after-colon)">
				<xsl:value-of select="substring-before($text, $zero-space-after-colon)"/>
				<xsl:value-of select="$zero-space-after-colon"/>
				<xsl:value-of select="$zero-space"/>
				<xsl:call-template name="add-zero-spaces">
					<xsl:with-param name="text" select="substring-after($text, $zero-space-after-colon)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="contains($text, $zero-space-after-equal)">
				<xsl:value-of select="substring-before($text, $zero-space-after-equal)"/>
				<xsl:value-of select="$zero-space-after-equal"/>
				<xsl:value-of select="$zero-space"/>
				<xsl:call-template name="add-zero-spaces">
					<xsl:with-param name="text" select="substring-after($text, $zero-space-after-equal)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="contains($text, $zero-space-after-underscore)">
				<xsl:value-of select="substring-before($text, $zero-space-after-underscore)"/>
				<xsl:value-of select="$zero-space-after-underscore"/>
				<xsl:value-of select="$zero-space"/>
				<xsl:call-template name="add-zero-spaces">
					<xsl:with-param name="text" select="substring-after($text, $zero-space-after-underscore)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$text"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="add-zero-spaces-equal">
		<xsl:param name="text" select="."/>
		<xsl:variable name="zero-space-after-equals">==========</xsl:variable>
		<xsl:variable name="regex_zero-space-after-equals">(==========)</xsl:variable>
		<xsl:variable name="zero-space-after-equal">=</xsl:variable>
		<xsl:variable name="regex_zero-space-after-equal">(=)</xsl:variable>
		<xsl:variable name="zero-space">â</xsl:variable>
		<xsl:choose>
			<xsl:when test="contains($text, $zero-space-after-equals)">
				<!-- <xsl:value-of select="substring-before($text, $zero-space-after-equals)"/>
				<xsl:value-of select="$zero-space-after-equals"/>
				<xsl:value-of select="$zero-space"/>
				<xsl:call-template name="add-zero-spaces-equal">
					<xsl:with-param name="text" select="substring-after($text, $zero-space-after-equals)"/>
				</xsl:call-template> -->
				<xsl:value-of select="java:replaceAll(java:java.lang.String.new(.),$regex_zero-space-after-equals,concat('$1',$zero_width_space))"/>
			</xsl:when>
			<xsl:when test="contains($text, $zero-space-after-equal)">
				<!-- <xsl:value-of select="substring-before($text, $zero-space-after-equal)"/>
				<xsl:value-of select="$zero-space-after-equal"/>
				<xsl:value-of select="$zero-space"/>
				<xsl:call-template name="add-zero-spaces-equal">
					<xsl:with-param name="text" select="substring-after($text, $zero-space-after-equal)"/>
				</xsl:call-template> -->
				<xsl:value-of select="java:replaceAll(java:java.lang.String.new(.),$regex_zero-space-after-equal,concat('$1',$zero_width_space))"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$text"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="getSimpleTable">
		<xsl:param name="id"/>
		
		<xsl:variable name="simple-table">
		
			<!-- Step 0. replace <br/> to <p>...</p> -->
			<xsl:variable name="table_without_br">
				<xsl:apply-templates mode="table-without-br"/>
			</xsl:variable>
		
			<!-- Step 1. colspan processing -->
			<xsl:variable name="simple-table-colspan">
				<tbody>
					<xsl:apply-templates select="xalan:nodeset($table_without_br)" mode="simple-table-colspan"/>
				</tbody>
			</xsl:variable>
			
			<!-- Step 2. rowspan processing -->
			<xsl:variable name="simple-table-rowspan">
				<xsl:apply-templates select="xalan:nodeset($simple-table-colspan)" mode="simple-table-rowspan"/>
			</xsl:variable>
			
			<!-- Step 3: add id to each cell -->
			<!-- add <word>...</word> for each word, image, math -->
			<xsl:variable name="simple-table-id">
				<xsl:apply-templates select="xalan:nodeset($simple-table-rowspan)" mode="simple-table-id">
					<xsl:with-param name="id" select="$id"/>
				</xsl:apply-templates>
			</xsl:variable>
			
			<xsl:copy-of select="xalan:nodeset($simple-table-id)"/>

		</xsl:variable>
		<xsl:copy-of select="$simple-table"/>
	</xsl:template><xsl:template match="@*|node()" mode="table-without-br">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="table-without-br"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name()='th' or local-name() = 'td'][not(*[local-name()='br']) and not(*[local-name()='p'])]" mode="table-without-br">
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<p>
				<xsl:copy-of select="node()"/>
			</p>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name()='th' or local-name()='td'][*[local-name()='br']]" mode="table-without-br">
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<xsl:for-each select="*[local-name()='br']">
				<xsl:variable name="current_id" select="generate-id()"/>
				<p>
					<xsl:for-each select="preceding-sibling::node()[following-sibling::*[local-name() = 'br'][1][generate-id() = $current_id]][not(local-name() = 'br')]">
						<xsl:copy-of select="."/>
					</xsl:for-each>
				</p>
				<xsl:if test="not(following-sibling::*[local-name() = 'br'])">
					<p>
						<xsl:for-each select="following-sibling::node()">
							<xsl:copy-of select="."/>
						</xsl:for-each>
					</p>
				</xsl:if>
			</xsl:for-each>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name()='th' or local-name()='td']/*[local-name() = 'p'][*[local-name()='br']]" mode="table-without-br">
		<xsl:for-each select="*[local-name()='br']">
			<xsl:variable name="current_id" select="generate-id()"/>
			<p>
				<xsl:for-each select="preceding-sibling::node()[following-sibling::*[local-name() = 'br'][1][generate-id() = $current_id]][not(local-name() = 'br')]">
					<xsl:copy-of select="."/>
				</xsl:for-each>
			</p>
			<xsl:if test="not(following-sibling::*[local-name() = 'br'])">
				<p>
					<xsl:for-each select="following-sibling::node()">
						<xsl:copy-of select="."/>
					</xsl:for-each>
				</p>
			</xsl:if>
		</xsl:for-each>
	</xsl:template><xsl:template match="text()[not(ancestor::*[local-name() = 'sourcecode'])]" mode="table-without-br">
		<xsl:variable name="text" select="translate(.,'&#9;&#10;&#13;','')"/>
		<xsl:value-of select="java:replaceAll(java:java.lang.String.new($text),' {2,}',' ')"/>
	</xsl:template><xsl:template match="*[local-name()='thead'] | *[local-name()='tbody']" mode="simple-table-colspan">
		<xsl:apply-templates mode="simple-table-colspan"/>
	</xsl:template><xsl:template match="*[local-name()='fn']" mode="simple-table-colspan"/><xsl:template match="*[local-name()='th'] | *[local-name()='td']" mode="simple-table-colspan">
		<xsl:choose>
			<xsl:when test="@colspan">
				<xsl:variable name="td">
					<xsl:element name="td">
						<xsl:attribute name="divide"><xsl:value-of select="@colspan"/></xsl:attribute>
						<xsl:apply-templates select="@*" mode="simple-table-colspan"/>
						<xsl:apply-templates mode="simple-table-colspan"/>
					</xsl:element>
				</xsl:variable>
				<xsl:call-template name="repeatNode">
					<xsl:with-param name="count" select="@colspan"/>
					<xsl:with-param name="node" select="$td"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:element name="td">
					<xsl:apply-templates select="@*" mode="simple-table-colspan"/>
					<xsl:apply-templates mode="simple-table-colspan"/>
				</xsl:element>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="@colspan" mode="simple-table-colspan"/><xsl:template match="*[local-name()='tr']" mode="simple-table-colspan">
		<xsl:element name="tr">
			<xsl:apply-templates select="@*" mode="simple-table-colspan"/>
			<xsl:apply-templates mode="simple-table-colspan"/>
		</xsl:element>
	</xsl:template><xsl:template match="@*|node()" mode="simple-table-colspan">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="simple-table-colspan"/>
		</xsl:copy>
	</xsl:template><xsl:template name="repeatNode">
		<xsl:param name="count"/>
		<xsl:param name="node"/>
		
		<xsl:if test="$count &gt; 0">
			<xsl:call-template name="repeatNode">
				<xsl:with-param name="count" select="$count - 1"/>
				<xsl:with-param name="node" select="$node"/>
			</xsl:call-template>
			<xsl:copy-of select="$node"/>
		</xsl:if>
	</xsl:template><xsl:template match="@*|node()" mode="simple-table-rowspan">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="simple-table-rowspan"/>
		</xsl:copy>
	</xsl:template><xsl:template match="tbody" mode="simple-table-rowspan">
		<xsl:copy>
				<xsl:copy-of select="tr[1]"/>
				<xsl:apply-templates select="tr[2]" mode="simple-table-rowspan">
						<xsl:with-param name="previousRow" select="tr[1]"/>
				</xsl:apply-templates>
		</xsl:copy>
	</xsl:template><xsl:template match="tr" mode="simple-table-rowspan">
		<xsl:param name="previousRow"/>
		<xsl:variable name="currentRow" select="."/>
	
		<xsl:variable name="normalizedTDs">
				<xsl:for-each select="xalan:nodeset($previousRow)//td">
						<xsl:choose>
								<xsl:when test="@rowspan &gt; 1">
										<xsl:copy>
												<xsl:attribute name="rowspan">
														<xsl:value-of select="@rowspan - 1"/>
												</xsl:attribute>
												<xsl:copy-of select="@*[not(name() = 'rowspan')]"/>
												<xsl:copy-of select="node()"/>
										</xsl:copy>
								</xsl:when>
								<xsl:otherwise>
										<xsl:copy-of select="$currentRow/td[1 + count(current()/preceding-sibling::td[not(@rowspan) or (@rowspan = 1)])]"/>
								</xsl:otherwise>
						</xsl:choose>
				</xsl:for-each>
		</xsl:variable>

		<xsl:variable name="newRow">
				<xsl:copy>
						<xsl:copy-of select="$currentRow/@*"/>
						<xsl:copy-of select="xalan:nodeset($normalizedTDs)"/>
				</xsl:copy>
		</xsl:variable>
		<xsl:copy-of select="$newRow"/>

		<xsl:apply-templates select="following-sibling::tr[1]" mode="simple-table-rowspan">
				<xsl:with-param name="previousRow" select="$newRow"/>
		</xsl:apply-templates>
	</xsl:template><xsl:template match="/" mode="simple-table-id">
		<xsl:param name="id"/>
		<xsl:variable name="id_prefixed" select="concat('table_if_',$id)"/> <!-- table id prefixed by 'table_if_' to simple search in IF  -->
		<xsl:apply-templates select="@*|node()" mode="simple-table-id">
			<xsl:with-param name="id" select="$id_prefixed"/>
		</xsl:apply-templates>
	</xsl:template><xsl:template match="@*|node()" mode="simple-table-id">
		<xsl:param name="id"/>
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="simple-table-id">
					<xsl:with-param name="id" select="$id"/>
				</xsl:apply-templates>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name()='tbody']" mode="simple-table-id">
		<xsl:param name="id"/>
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<xsl:attribute name="id"><xsl:value-of select="$id"/></xsl:attribute>
			<xsl:apply-templates select="node()" mode="simple-table-id">
				<xsl:with-param name="id" select="$id"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name()='th' or local-name()='td']" mode="simple-table-id">
		<xsl:param name="id"/>
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<xsl:variable name="row_number" select="count(../preceding-sibling::*) + 1"/>
			<xsl:variable name="col_number" select="count(preceding-sibling::*) + 1"/>
			<xsl:attribute name="id">
				<xsl:value-of select="concat($id,'_',$row_number,'_',$col_number)"/>
			</xsl:attribute>
			
			<xsl:for-each select="*[local-name() = 'p']">
				<xsl:copy>
					<xsl:copy-of select="@*"/>
					<xsl:variable name="p_num" select="count(preceding-sibling::*[local-name() = 'p']) + 1"/>
					<xsl:attribute name="id">
						<xsl:value-of select="concat($id,'_',$row_number,'_',$col_number,'_p_',$p_num)"/>
					</xsl:attribute>
					
					<xsl:copy-of select="node()"/>
				</xsl:copy>
			</xsl:for-each>
			
			
			<xsl:if test="$isGenerateTableIF = 'true'"> <!-- split each paragraph to words, image, math -->
			
				<xsl:variable name="td_text">
					<xsl:apply-templates select="." mode="td_text_with_formatting"/>
				</xsl:variable>
				
				<!-- td_text='<xsl:copy-of select="$td_text"/>' -->
			
				<xsl:variable name="words">
					<xsl:for-each select=".//*[local-name() = 'image' or local-name() = 'stem']">
						<word>
							<xsl:copy-of select="."/>
						</word>
					</xsl:for-each>
					
					<xsl:for-each select="xalan:nodeset($td_text)//*[local-name() = 'word'][normalize-space() != '']">
						<xsl:copy-of select="."/>
					</xsl:for-each>
					
				</xsl:variable>
				
				<xsl:for-each select="xalan:nodeset($words)/word">
					<xsl:variable name="num" select="count(preceding-sibling::word) + 1"/>
					<xsl:copy>
						<xsl:attribute name="id">
							<xsl:value-of select="concat($id,'_',$row_number,'_',$col_number,'_word_',$num)"/>
						</xsl:attribute>
						<xsl:copy-of select="node()"/>
					</xsl:copy>
				</xsl:for-each>
			</xsl:if>
		</xsl:copy>
		
	</xsl:template><xsl:template match="@*|node()" mode="td_text_with_formatting">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="td_text_with_formatting"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'stem' or local-name() = 'image']" mode="td_text_with_formatting"/><xsl:template match="*[local-name() = 'keep-together_within-line']/text()" mode="td_text_with_formatting">
		<xsl:variable name="formatting_tags">
			<xsl:call-template name="getFormattingTags"/>
		</xsl:variable>
		<word>
			<xsl:call-template name="enclose_text_in_tags">
				<xsl:with-param name="text" select="normalize-space(.)"/>
				<xsl:with-param name="tags" select="$formatting_tags"/>
			</xsl:call-template>
		</word>
	</xsl:template><xsl:template match="*[local-name() != 'keep-together_within-line']/text()" mode="td_text_with_formatting">
		
		<xsl:variable name="td_text" select="."/>
		
		<xsl:variable name="string_with_added_zerospaces">
			<xsl:call-template name="add-zero-spaces-java">
				<xsl:with-param name="text" select="$td_text"/>
			</xsl:call-template>
		</xsl:variable>
		
		<xsl:variable name="formatting_tags">
			<xsl:call-template name="getFormattingTags"/>
		</xsl:variable>
		
		<!-- <word>text</word> -->
		<xsl:call-template name="tokenize_with_tags">
			<xsl:with-param name="tags" select="$formatting_tags"/>
			<xsl:with-param name="text" select="normalize-space(translate($string_with_added_zerospaces, 'âÂ­', '  '))"/> <!-- replace zero-width-space and soft-hyphen to space -->
		</xsl:call-template>
	</xsl:template><xsl:template name="getFormattingTags">
		<tags>
			<xsl:if test="ancestor::*[local-name() = 'strong']"><tag>strong</tag></xsl:if>
			<xsl:if test="ancestor::*[local-name() = 'em']"><tag>em</tag></xsl:if>
			<xsl:if test="ancestor::*[local-name() = 'sub']"><tag>sub</tag></xsl:if>
			<xsl:if test="ancestor::*[local-name() = 'sup']"><tag>sup</tag></xsl:if>
			<xsl:if test="ancestor::*[local-name() = 'tt']"><tag>tt</tag></xsl:if>
			<xsl:if test="ancestor::*[local-name() = 'keep-together_within-line']"><tag>keep-together_within-line</tag></xsl:if>
		</tags>
	</xsl:template><xsl:template name="getLang">
		<xsl:variable name="language_current" select="normalize-space(//*[local-name()='bibdata']//*[local-name()='language'][@current = 'true'])"/>
		<xsl:variable name="language">
			<xsl:choose>
				<xsl:when test="$language_current != ''">
					<xsl:value-of select="$language_current"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="language_current_2" select="normalize-space(xalan:nodeset($bibdata)//*[local-name()='bibdata']//*[local-name()='language'][@current = 'true'])"/>
					<xsl:choose>
						<xsl:when test="$language_current_2 != ''">
							<xsl:value-of select="$language_current_2"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="//*[local-name()='bibdata']//*[local-name()='language']"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:choose>
			<xsl:when test="$language = 'English'">en</xsl:when>
			<xsl:otherwise><xsl:value-of select="$language"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="capitalizeWords">
		<xsl:param name="str"/>
		<xsl:variable name="str2" select="translate($str, '-', ' ')"/>
		<xsl:choose>
			<xsl:when test="contains($str2, ' ')">
				<xsl:variable name="substr" select="substring-before($str2, ' ')"/>
				<xsl:call-template name="capitalize">
					<xsl:with-param name="str" select="$substr"/>
				</xsl:call-template>
				<xsl:text> </xsl:text>
				<xsl:call-template name="capitalizeWords">
					<xsl:with-param name="str" select="substring-after($str2, ' ')"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="capitalize">
					<xsl:with-param name="str" select="$str2"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="capitalize">
		<xsl:param name="str"/>
		<xsl:value-of select="java:toUpperCase(java:java.lang.String.new(substring($str, 1, 1)))"/>
		<xsl:value-of select="substring($str, 2)"/>		
	</xsl:template><xsl:template match="mathml:math">
		<xsl:variable name="isAdded" select="@added"/>
		<xsl:variable name="isDeleted" select="@deleted"/>
		
		<fo:inline xsl:use-attribute-sets="mathml-style">
		
			
			
			
			
			<xsl:call-template name="setTrackChangesStyles">
				<xsl:with-param name="isAdded" select="$isAdded"/>
				<xsl:with-param name="isDeleted" select="$isDeleted"/>
			</xsl:call-template>
			
			<xsl:if test="$add_math_as_text = 'true'">
				<!-- insert helper tag -->
				<!-- set unique font-size (fiction) -->
				<xsl:variable name="font-size_sfx"><xsl:number level="any"/></xsl:variable>
				<fo:inline color="white" font-size="1.{$font-size_sfx}pt" font-style="normal" font-weight="normal"><xsl:value-of select="$zero_width_space"/></fo:inline> <!-- zero width space -->
			</xsl:if>
			
			<xsl:variable name="mathml_content">
				<xsl:apply-templates select="." mode="mathml_actual_text"/>
			</xsl:variable>
			
			
					<xsl:call-template name="mathml_instream_object">
						<xsl:with-param name="mathml_content" select="$mathml_content"/>
					</xsl:call-template>
				
			
		</fo:inline>
	</xsl:template><xsl:template name="getMathml_comment_text">
		<xsl:variable name="comment_text_following" select="following-sibling::node()[1][self::comment()]"/>
		<xsl:variable name="comment_text_">
			<xsl:choose>
				<xsl:when test="normalize-space($comment_text_following) != ''">
					<xsl:value-of select="$comment_text_following"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="normalize-space(translate(.,'Â â¢','  '))"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable> 
		<xsl:variable name="comment_text_2" select="java:org.metanorma.fop.Util.unescape($comment_text_)"/>
		<xsl:variable name="comment_text" select="java:trim(java:java.lang.String.new($comment_text_2))"/>
		<xsl:value-of select="$comment_text"/>
	</xsl:template><xsl:template name="mathml_instream_object">
		<xsl:param name="comment_text"/>
		<xsl:param name="mathml_content"/>
	
		<xsl:variable name="comment_text_">
			<xsl:choose>
				<xsl:when test="normalize-space($comment_text) != ''"><xsl:value-of select="$comment_text"/></xsl:when>
				<xsl:otherwise><xsl:call-template name="getMathml_comment_text"/></xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
	
		<xsl:variable name="mathml">
			<xsl:apply-templates select="." mode="mathml"/>
		</xsl:variable>
			
		<fo:instream-foreign-object fox:alt-text="Math">
					
			
			
			
			
			
			
			<!-- put MathML in Actual Text -->
			<!-- DEBUG: mathml_content=<xsl:value-of select="$mathml_content"/> -->
			<xsl:attribute name="fox:actual-text">
				<xsl:value-of select="$mathml_content"/>
			</xsl:attribute>
			
			<!-- <xsl:if test="$add_math_as_text = 'true'"> -->
			<xsl:if test="normalize-space($comment_text_) != ''">
			<!-- put Mathin Alternate Text -->
				<xsl:attribute name="fox:alt-text">
					<xsl:value-of select="$comment_text_"/>
				</xsl:attribute>
			</xsl:if>
			<!-- </xsl:if> -->
		
			<xsl:copy-of select="xalan:nodeset($mathml)"/>
			
		</fo:instream-foreign-object>
	</xsl:template><xsl:template match="mathml:*" mode="mathml_actual_text">
		<!-- <xsl:text>a+b</xsl:text> -->
		<xsl:text>&lt;</xsl:text>
		<xsl:value-of select="local-name()"/>
		<xsl:if test="local-name() = 'math'">
			<xsl:text> xmlns="http://www.w3.org/1998/Math/MathML"</xsl:text>
		</xsl:if>
		<xsl:for-each select="@*">
			<xsl:text> </xsl:text>
			<xsl:value-of select="local-name()"/>
			<xsl:text>="</xsl:text>
			<xsl:value-of select="."/>
			<xsl:text>"</xsl:text>
		</xsl:for-each>
		<xsl:text>&gt;</xsl:text>		
		<xsl:apply-templates mode="mathml_actual_text"/>		
		<xsl:text>&lt;/</xsl:text>
		<xsl:value-of select="local-name()"/>
		<xsl:text>&gt;</xsl:text>
	</xsl:template><xsl:template match="text()" mode="mathml_actual_text">
		<xsl:value-of select="normalize-space()"/>
	</xsl:template><xsl:template match="@*|node()" mode="mathml">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="mathml"/>
		</xsl:copy>
	</xsl:template><xsl:template match="mathml:mtext" mode="mathml">
		<xsl:copy>
			<!-- replace start and end spaces to non-break space -->
			<xsl:value-of select="java:replaceAll(java:java.lang.String.new(.),'(^ )|( $)','Â ')"/>
		</xsl:copy>
	</xsl:template><xsl:template match="mathml:math/*[local-name()='unit']" mode="mathml"/><xsl:template match="mathml:math/*[local-name()='prefix']" mode="mathml"/><xsl:template match="mathml:math/*[local-name()='dimension']" mode="mathml"/><xsl:template match="mathml:math/*[local-name()='quantity']" mode="mathml"/><xsl:template match="mathml:mtd/mathml:mo/text()[. = '/']" mode="mathml">
		<xsl:value-of select="."/><xsl:value-of select="$zero_width_space"/>
	</xsl:template><xsl:template match="*[local-name()='localityStack']"/><xsl:template match="*[local-name()='link']" name="link">
		<xsl:variable name="target">
			<xsl:choose>
				<xsl:when test="@updatetype = 'true'">
					<xsl:value-of select="concat(normalize-space(@target), '.pdf')"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="normalize-space(@target)"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="target_text">
			<xsl:choose>
				<xsl:when test="starts-with(normalize-space(@target), 'mailto:')">
					<xsl:value-of select="normalize-space(substring-after(@target, 'mailto:'))"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="normalize-space(@target)"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<fo:inline xsl:use-attribute-sets="link-style">
			
			<xsl:if test="starts-with(normalize-space(@target), 'mailto:')">
				<xsl:attribute name="keep-together.within-line">always</xsl:attribute>
			</xsl:if>
			
			
			
			
			
			
			
			
				<xsl:if test="ancestor::*[local-name() = 'bibitem']">
					<xsl:attribute name="color">black</xsl:attribute>
					<xsl:attribute name="text-decoration">none</xsl:attribute>
					<xsl:attribute name="font-weight">300</xsl:attribute>
				</xsl:if>
			
			
			
			<xsl:choose>
				<xsl:when test="$target_text = ''">
					<xsl:apply-templates/>
				</xsl:when>
				<xsl:otherwise>
					<fo:basic-link external-destination="{$target}" fox:alt-text="{$target}">
						<xsl:choose>
							<xsl:when test="normalize-space(.) = ''">
								<xsl:call-template name="add-zero-spaces-link-java">
									<xsl:with-param name="text" select="$target_text"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:otherwise>
								<!-- output text from <link>text</link> -->
								<xsl:apply-templates/>
							</xsl:otherwise>
						</xsl:choose>
					</fo:basic-link>
				</xsl:otherwise>
			</xsl:choose>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name()='appendix']">
		<fo:block id="{@id}" xsl:use-attribute-sets="appendix-style">
			<xsl:apply-templates select="*[local-name()='title']"/>
		</fo:block>
		<xsl:apply-templates select="node()[not(local-name()='title')]"/>
	</xsl:template><xsl:template match="*[local-name()='appendix']/*[local-name()='title']" priority="2">
		<xsl:variable name="level">
			<xsl:call-template name="getLevel"/>
		</xsl:variable>
		<fo:inline role="H{$level}"><xsl:apply-templates/></fo:inline>
	</xsl:template><xsl:template match="*[local-name()='appendix']//*[local-name()='example']" priority="2">
		<fo:block id="{@id}" xsl:use-attribute-sets="appendix-example-style">			
			<xsl:apply-templates select="*[local-name()='name']"/>
		</fo:block>
		<xsl:apply-templates select="node()[not(local-name()='name')]"/>
	</xsl:template><xsl:template match="*[local-name() = 'callout']">		
		<fo:basic-link internal-destination="{@target}" fox:alt-text="{@target}">&lt;<xsl:apply-templates/>&gt;</fo:basic-link>
	</xsl:template><xsl:template match="*[local-name() = 'annotation']">
		<xsl:variable name="annotation-id" select="@id"/>
		<xsl:variable name="callout" select="//*[@target = $annotation-id]/text()"/>		
		<fo:block id="{$annotation-id}" white-space="nowrap">			
			<fo:inline>				
				<xsl:apply-templates>
					<xsl:with-param name="callout" select="concat('&lt;', $callout, '&gt; ')"/>
				</xsl:apply-templates>
			</fo:inline>
		</fo:block>		
	</xsl:template><xsl:template match="*[local-name() = 'annotation']/*[local-name() = 'p']">
		<xsl:param name="callout"/>
		<fo:inline id="{@id}">
			<!-- for first p in annotation, put <x> -->
			<xsl:if test="not(preceding-sibling::*[local-name() = 'p'])"><xsl:value-of select="$callout"/></xsl:if>
			<xsl:apply-templates/>
		</fo:inline>		
	</xsl:template><xsl:template match="*[local-name() = 'xref']">
		<fo:basic-link internal-destination="{@target}" fox:alt-text="{@target}" xsl:use-attribute-sets="xref-style">
			<xsl:if test="parent::*[local-name() = 'add']">
				<xsl:call-template name="append_add-style"/>
			</xsl:if>
			<xsl:apply-templates/>
		</fo:basic-link>
	</xsl:template><xsl:template match="*[local-name() = 'formula']" name="formula">
		<fo:block-container margin-left="0mm">
			<xsl:if test="parent::*[local-name() = 'note']">
				<xsl:attribute name="margin-left">
					<xsl:choose>
						<xsl:when test="not(ancestor::*[local-name() = 'table'])"><xsl:value-of select="$note-body-indent"/></xsl:when>
						<xsl:otherwise><xsl:value-of select="$note-body-indent-table"/></xsl:otherwise>
					</xsl:choose>
				</xsl:attribute>
				
			</xsl:if>
			<fo:block-container margin-left="0mm">	
				<fo:block id="{@id}">
					<xsl:apply-templates select="node()[not(local-name() = 'name')]"/> <!-- formula's number will be process in 'stem' template -->
				</fo:block>
			</fo:block-container>
		</fo:block-container>
	</xsl:template><xsl:template match="*[local-name() = 'formula']/*[local-name() = 'dt']/*[local-name() = 'stem']">
		<fo:inline>
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'admitted']/*[local-name() = 'stem']">
		<fo:inline>
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'formula']/*[local-name() = 'name']"> <!-- show in 'stem' template -->
		<xsl:if test="normalize-space() != ''">
			<xsl:text>(</xsl:text><xsl:apply-templates/><xsl:text>)</xsl:text>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'formula'][*[local-name() = 'name']]/*[local-name() = 'stem']">
		<fo:block xsl:use-attribute-sets="formula-style">
		
			
		
			<fo:table table-layout="fixed" width="100%">
				<fo:table-column column-width="95%"/>
				<fo:table-column column-width="5%"/>
				<fo:table-body>
					<fo:table-row>
						<fo:table-cell display-align="center">
							<fo:block xsl:use-attribute-sets="formula-stem-block-style">
							
								
							
								<xsl:apply-templates/>
							</fo:block>
						</fo:table-cell>
						<fo:table-cell display-align="center">
							<fo:block xsl:use-attribute-sets="formula-stem-number-style">
								<xsl:apply-templates select="../*[local-name() = 'name']"/>
							</fo:block>
						</fo:table-cell>
					</fo:table-row>
				</fo:table-body>
			</fo:table>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'formula'][not(*[local-name() = 'name'])]/*[local-name() = 'stem']">
		<fo:block xsl:use-attribute-sets="formula-style">
			<fo:block xsl:use-attribute-sets="formula-stem-block-style">
				<xsl:apply-templates/>
			</fo:block>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'note']" name="note">
	
		<fo:block-container id="{@id}" xsl:use-attribute-sets="note-style">
		
			
			
			
			
			
			
			
				<xsl:if test="ancestor::rsd:ul or ancestor::rsd:ol and not(ancestor::rsd:note[1]/following-sibling::*)">
					<xsl:attribute name="margin-top">6pt</xsl:attribute>
					<xsl:attribute name="margin-bottom">6pt</xsl:attribute>
				</xsl:if>
			
		
			
			
			<fo:block-container margin-left="0mm">
			
				
				
				
			
				
						<fo:block>
							
							
						
							
							
							
							
							<fo:inline xsl:use-attribute-sets="note-name-style">
							
								
								
								<!-- if 'p' contains all text in 'add' first and last elements in first p are 'add' -->
								<!-- <xsl:if test="*[not(local-name()='name')][1][node()[normalize-space() != ''][1][local-name() = 'add'] and node()[normalize-space() != ''][last()][local-name() = 'add']]"> -->
								<xsl:if test="*[not(local-name()='name')][1][count(node()[normalize-space() != '']) = 1 and *[local-name() = 'add']]">
									<xsl:call-template name="append_add-style"/>
								</xsl:if>
								
								
								<!-- if note contains only one element and first and last childs are `add` ace-tag, then move start ace-tag before NOTE's name-->
								<xsl:if test="count(*[not(local-name() = 'name')]) = 1 and *[not(local-name() = 'name')]/node()[last()][local-name() = 'add'][starts-with(text(), $ace_tag)]">
									<xsl:apply-templates select="*[not(local-name() = 'name')]/node()[1][local-name() = 'add'][starts-with(text(), $ace_tag)]">
										<xsl:with-param name="skip">false</xsl:with-param>
									</xsl:apply-templates> 
								</xsl:if>
								
								<xsl:apply-templates select="*[local-name() = 'name']"/>
								
							</fo:inline>
							
							<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
						</fo:block>
					
			</fo:block-container>
		</fo:block-container>
		
	</xsl:template><xsl:template match="*[local-name() = 'note']/*[local-name() = 'p']">
		<xsl:variable name="num"><xsl:number/></xsl:variable>
		<xsl:choose>
			<xsl:when test="$num = 1"> <!-- display first NOTE's paragraph in the same line with label NOTE -->
				<fo:inline xsl:use-attribute-sets="note-p-style">
					<xsl:apply-templates/>
				</fo:inline>
			</xsl:when>
			<xsl:otherwise>
				<fo:block xsl:use-attribute-sets="note-p-style">						
					<xsl:apply-templates/>
				</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name() = 'termnote']">
		<fo:block id="{@id}" xsl:use-attribute-sets="termnote-style">			
			
			<fo:inline xsl:use-attribute-sets="termnote-name-style">
			
				<xsl:if test="not(*[local-name() = 'name']/following-sibling::node()[1][self::text()][normalize-space()=''])">
					<xsl:attribute name="padding-right">1mm</xsl:attribute>
				</xsl:if>
			
				

				
				
				<!-- if 'p' contains all text in 'add' first and last elements in first p are 'add' -->
				<!-- <xsl:if test="*[not(local-name()='name')][1][node()[normalize-space() != ''][1][local-name() = 'add'] and node()[normalize-space() != ''][last()][local-name() = 'add']]"> -->
				<xsl:if test="*[not(local-name()='name')][1][count(node()[normalize-space() != '']) = 1 and *[local-name() = 'add']]">
					<xsl:call-template name="append_add-style"/>
				</xsl:if>
				
				<xsl:apply-templates select="*[local-name() = 'name']"/>
				
			</fo:inline>
			
			<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'note']/*[local-name() = 'name']">
		<xsl:param name="sfx"/>
		<xsl:variable name="suffix">
			<xsl:choose>
				<xsl:when test="$sfx != ''">
					<xsl:value-of select="$sfx"/>					
				</xsl:when>
				<xsl:otherwise>
					
					
						<xsl:text>:</xsl:text>
					
					
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:if test="normalize-space() != ''">
			<xsl:apply-templates/>
			<xsl:value-of select="$suffix"/>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'termnote']/*[local-name() = 'name']">
		<xsl:param name="sfx"/>
		<xsl:variable name="suffix">
			<xsl:choose>
				<xsl:when test="$sfx != ''">
					<xsl:value-of select="$sfx"/>					
				</xsl:when>
				<xsl:otherwise>
					
					
						<xsl:text>:</xsl:text>
					
					
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:if test="normalize-space() != ''">
			<xsl:apply-templates/>
			<xsl:value-of select="$suffix"/>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'termnote']/*[local-name() = 'p']">
		<xsl:variable name="num"><xsl:number/></xsl:variable>
		<xsl:choose>
			<xsl:when test="$num = 1"> <!-- first paragraph renders in the same line as titlenote name -->
				<fo:inline xsl:use-attribute-sets="termnote-p-style">
					<xsl:apply-templates/>
				</fo:inline>
			</xsl:when>
			<xsl:otherwise>
				<fo:block xsl:use-attribute-sets="termnote-p-style">						
					<xsl:apply-templates/>
				</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name() = 'terms']">
		<!-- <xsl:message>'terms' <xsl:number/> processing...</xsl:message> -->
		<fo:block id="{@id}">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'term']">
		<fo:block id="{@id}" xsl:use-attribute-sets="term-style">

			
			
			
			
			<xsl:if test="parent::*[local-name() = 'term'] and not(preceding-sibling::*[local-name() = 'term'])">
				
			</xsl:if>
			<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'term']/*[local-name() = 'name']">
		<xsl:if test="normalize-space() != ''">
			<xsl:variable name="level">
				<xsl:call-template name="getLevelTermName"/>
			</xsl:variable>
			<fo:inline role="H{$level}">
				<xsl:apply-templates/>
			</fo:inline>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'figure']" name="figure">
		<xsl:variable name="isAdded" select="@added"/>
		<xsl:variable name="isDeleted" select="@deleted"/>
		<fo:block-container id="{@id}">			
			
			<xsl:call-template name="setTrackChangesStyles">
				<xsl:with-param name="isAdded" select="$isAdded"/>
				<xsl:with-param name="isDeleted" select="$isDeleted"/>
			</xsl:call-template>
			
			 <!-- show figure's name BEFORE image -->
				<xsl:apply-templates select="*[local-name() = 'name']"/>
			
			
			<fo:block xsl:use-attribute-sets="figure-style">
				<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
			</fo:block>
			<xsl:call-template name="fn_display_figure"/>
			<xsl:for-each select="*[local-name() = 'note']">
				<xsl:call-template name="note"/>
			</xsl:for-each>
			
			
			
		</fo:block-container>
	</xsl:template><xsl:template match="*[local-name() = 'figure'][@class = 'pseudocode']">
		<fo:block id="{@id}">
			<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
		</fo:block>
		<xsl:apply-templates select="*[local-name() = 'name']"/>
	</xsl:template><xsl:template match="*[local-name() = 'figure'][@class = 'pseudocode']//*[local-name() = 'p']">
		<fo:block xsl:use-attribute-sets="figure-pseudocode-p-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'image']">
		<xsl:variable name="isAdded" select="../@added"/>
		<xsl:variable name="isDeleted" select="../@deleted"/>
		<xsl:choose>
			<xsl:when test="ancestor::*[local-name() = 'title']">
				<fo:inline padding-left="1mm" padding-right="1mm">
					<xsl:variable name="src">
						<xsl:call-template name="image_src"/>
					</xsl:variable>
					<fo:external-graphic src="{$src}" fox:alt-text="Image {@alt}" vertical-align="middle"/>
				</fo:inline>
			</xsl:when>
			<xsl:otherwise>
				<fo:block xsl:use-attribute-sets="image-style">
					
					
					<xsl:variable name="src">
						<xsl:call-template name="image_src"/>
					</xsl:variable>
					
					<xsl:choose>
						<xsl:when test="$isDeleted = 'true'">
							<!-- enclose in svg -->
							<fo:instream-foreign-object fox:alt-text="Image {@alt}">
								<xsl:attribute name="width">100%</xsl:attribute>
								<xsl:attribute name="content-height">100%</xsl:attribute>
								<xsl:attribute name="content-width">scale-down-to-fit</xsl:attribute>
								<xsl:attribute name="scaling">uniform</xsl:attribute>
								
								
									<xsl:apply-templates select="." mode="cross_image"/>
									
							</fo:instream-foreign-object>
						</xsl:when>
						<xsl:otherwise>
							<fo:external-graphic src="{$src}" fox:alt-text="Image {@alt}" xsl:use-attribute-sets="image-graphic-style">
								<xsl:if test="not(@mimetype = 'image/svg+xml') and ../*[local-name() = 'name'] and not(ancestor::*[local-name() = 'table'])">
										
									<xsl:variable name="img_src">
										<xsl:choose>
											<xsl:when test="not(starts-with(@src, 'data:'))"><xsl:value-of select="concat($basepath, @src)"/></xsl:when>
											<xsl:otherwise><xsl:value-of select="@src"/></xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									
									<xsl:variable name="scale" select="java:org.metanorma.fop.Util.getImageScale($img_src, $width_effective, $height_effective)"/>
									<xsl:if test="number($scale) &lt; 100">
										<xsl:attribute name="content-width"><xsl:value-of select="$scale"/>%</xsl:attribute>
									</xsl:if>
								
								</xsl:if>
							
							</fo:external-graphic>
						</xsl:otherwise>
					</xsl:choose>
					
				</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="image_src">
		<xsl:choose>
			<xsl:when test="@mimetype = 'image/svg+xml' and $images/images/image[@id = current()/@id]">
				<xsl:value-of select="$images/images/image[@id = current()/@id]/@src"/>
			</xsl:when>
			<xsl:when test="not(starts-with(@src, 'data:'))">
				<xsl:value-of select="concat('url(file:',$basepath, @src, ')')"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="@src"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name() = 'image']" mode="cross_image">
		<xsl:choose>
			<xsl:when test="@mimetype = 'image/svg+xml' and $images/images/image[@id = current()/@id]">
				<xsl:variable name="src">
					<xsl:value-of select="$images/images/image[@id = current()/@id]/@src"/>
				</xsl:variable>
				<xsl:variable name="width" select="document($src)/@width"/>
				<xsl:variable name="height" select="document($src)/@height"/>
				<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" style="enable-background:new 0 0 595.28 841.89;" height="{$height}" width="{$width}" viewBox="0 0 {$width} {$height}" y="0px" x="0px" id="Layer_1" version="1.1">
					<image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{$src}" style="overflow:visible;"/>
				</svg>
			</xsl:when>
			<xsl:when test="not(starts-with(@src, 'data:'))">
				<xsl:variable name="src">
					<xsl:value-of select="concat('url(file:',$basepath, @src, ')')"/>
				</xsl:variable>
				<xsl:variable name="file" select="java:java.io.File.new(@src)"/>
				<xsl:variable name="bufferedImage" select="java:javax.imageio.ImageIO.read($file)"/>
				<xsl:variable name="width" select="java:getWidth($bufferedImage)"/>
				<xsl:variable name="height" select="java:getHeight($bufferedImage)"/>
				<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" style="enable-background:new 0 0 595.28 841.89;" height="{$height}" width="{$width}" viewBox="0 0 {$width} {$height}" y="0px" x="0px" id="Layer_1" version="1.1">
					<image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{$src}" style="overflow:visible;"/>
				</svg>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="base64String" select="substring-after(@src, 'base64,')"/>
				<xsl:variable name="decoder" select="java:java.util.Base64.getDecoder()"/>
				<xsl:variable name="fileContent" select="java:decode($decoder, $base64String)"/>
				<xsl:variable name="bis" select="java:java.io.ByteArrayInputStream.new($fileContent)"/>
				<xsl:variable name="bufferedImage" select="java:javax.imageio.ImageIO.read($bis)"/>
				<xsl:variable name="width" select="java:getWidth($bufferedImage)"/>
				<xsl:variable name="height" select="java:getHeight($bufferedImage)"/>
				<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" style="enable-background:new 0 0 595.28 841.89;" height="{$height}" width="{$width}" viewBox="0 0 {$width} {$height}" y="0px" x="0px" id="Layer_1" version="1.1">
					<image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{@src}" height="{$height}" width="{$width}" style="overflow:visible;"/>
					<xsl:call-template name="svg_cross">
						<xsl:with-param name="width" select="$width"/>
						<xsl:with-param name="height" select="$height"/>
					</xsl:call-template>
				</svg>
			</xsl:otherwise>
		</xsl:choose>
		
	</xsl:template><xsl:template name="svg_cross">
		<xsl:param name="width"/>
		<xsl:param name="height"/>
		<line xmlns="http://www.w3.org/2000/svg" x1="0" y1="0" x2="{$width}" y2="{$height}" style="stroke: rgb(255, 0, 0); stroke-width:4px; "/>
		<line xmlns="http://www.w3.org/2000/svg" x1="0" y1="{$height}" x2="{$width}" y2="0" style="stroke: rgb(255, 0, 0); stroke-width:4px; "/>
	</xsl:template><xsl:variable name="figure_name_height">14</xsl:variable><xsl:variable name="width_effective" select="$pageWidth - $marginLeftRight1 - $marginLeftRight2"/><xsl:variable name="height_effective" select="$pageHeight - $marginTop - $marginBottom - $figure_name_height"/><xsl:variable name="image_dpi" select="96"/><xsl:variable name="width_effective_px" select="$width_effective div 25.4 * $image_dpi"/><xsl:variable name="height_effective_px" select="$height_effective div 25.4 * $image_dpi"/><xsl:template match="*[local-name() = 'figure'][not(*[local-name() = 'image']) and *[local-name() = 'svg']]/*[local-name() = 'name']/*[local-name() = 'bookmark']" priority="2"/><xsl:template match="*[local-name() = 'figure'][not(*[local-name() = 'image'])]/*[local-name() = 'svg']" priority="2" name="image_svg">
		<xsl:param name="name"/>
		
		<xsl:variable name="svg_content">
			<xsl:apply-templates select="." mode="svg_update"/>
		</xsl:variable>
		
		<xsl:variable name="alt-text">
			<xsl:choose>
				<xsl:when test="normalize-space(../*[local-name() = 'name']) != ''">
					<xsl:value-of select="../*[local-name() = 'name']"/>
				</xsl:when>
				<xsl:when test="normalize-space($name) != ''">
					<xsl:value-of select="$name"/>
				</xsl:when>
				<xsl:otherwise>Figure</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:choose>
			<xsl:when test=".//*[local-name() = 'a'][*[local-name() = 'rect'] or *[local-name() = 'polygon'] or *[local-name() = 'circle'] or *[local-name() = 'ellipse']]">
				<fo:block>
					<xsl:variable name="width" select="@width"/>
					<xsl:variable name="height" select="@height"/>
					
					<xsl:variable name="scale_x">
						<xsl:choose>
							<xsl:when test="$width &gt; $width_effective_px">
								<xsl:value-of select="$width_effective_px div $width"/>
							</xsl:when>
							<xsl:otherwise>1</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					
					<xsl:variable name="scale_y">
						<xsl:choose>
							<xsl:when test="$height * $scale_x &gt; $height_effective_px">
								<xsl:value-of select="$height_effective_px div ($height * $scale_x)"/>
							</xsl:when>
							<xsl:otherwise>1</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					
					<xsl:variable name="scale">
						<xsl:choose>
							<xsl:when test="$scale_y != 1">
								<xsl:value-of select="$scale_x * $scale_y"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="$scale_x"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					 
					<xsl:variable name="width_scale" select="round($width * $scale)"/>
					<xsl:variable name="height_scale" select="round($height * $scale)"/>
					
					<fo:table table-layout="fixed" width="100%">
						<fo:table-column column-width="proportional-column-width(1)"/>
						<fo:table-column column-width="{$width_scale}px"/>
						<fo:table-column column-width="proportional-column-width(1)"/>
						<fo:table-body>
							<fo:table-row>
								<fo:table-cell column-number="2">
									<fo:block>
										<fo:block-container width="{$width_scale}px" height="{$height_scale}px">
											<xsl:if test="../*[local-name() = 'name']/*[local-name() = 'bookmark']">
												<fo:block line-height="0" font-size="0">
													<xsl:for-each select="../*[local-name() = 'name']/*[local-name() = 'bookmark']">
														<xsl:call-template name="bookmark"/>
													</xsl:for-each>
												</fo:block>
											</xsl:if>
											<fo:block text-depth="0" line-height="0" font-size="0">

												<fo:instream-foreign-object fox:alt-text="{$alt-text}">
													<xsl:attribute name="width">100%</xsl:attribute>
													<xsl:attribute name="content-height">100%</xsl:attribute>
													<xsl:attribute name="content-width">scale-down-to-fit</xsl:attribute>
													<xsl:attribute name="scaling">uniform</xsl:attribute>

													<xsl:apply-templates select="xalan:nodeset($svg_content)" mode="svg_remove_a"/>
												</fo:instream-foreign-object>
											</fo:block>
											
											<xsl:apply-templates select=".//*[local-name() = 'a'][*[local-name() = 'rect'] or *[local-name() = 'polygon'] or *[local-name() = 'circle'] or *[local-name() = 'ellipse']]" mode="svg_imagemap_links">
												<xsl:with-param name="scale" select="$scale"/>
											</xsl:apply-templates>
										</fo:block-container>
									</fo:block>
								</fo:table-cell>
							</fo:table-row>
						</fo:table-body>
					</fo:table>
				</fo:block>
				
			</xsl:when>
			<xsl:otherwise>
				<fo:block xsl:use-attribute-sets="image-style">
					<fo:instream-foreign-object fox:alt-text="{$alt-text}">
						<xsl:attribute name="width">100%</xsl:attribute>
						<xsl:attribute name="content-height">100%</xsl:attribute>
						<xsl:attribute name="content-width">scale-down-to-fit</xsl:attribute>
						<xsl:variable name="svg_width" select="xalan:nodeset($svg_content)/*/@width"/>
						<xsl:variable name="svg_height" select="xalan:nodeset($svg_content)/*/@height"/>
						<!-- effective height 297 - 27.4 - 13 =  256.6 -->
						<!-- effective width 210 - 12.5 - 25 = 172.5 -->
						<!-- effective height / width = 1.48, 1.4 - with title -->
						<xsl:if test="$svg_height &gt; ($svg_width * 1.4)"> <!-- for images with big height -->
							<xsl:variable name="width" select="(($svg_width * 1.4) div $svg_height) * 100"/>
							<xsl:attribute name="width"><xsl:value-of select="$width"/>%</xsl:attribute>
						</xsl:if>
						<xsl:attribute name="scaling">uniform</xsl:attribute>
						<xsl:copy-of select="$svg_content"/>
					</fo:instream-foreign-object>
				</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="@*|node()" mode="svg_update">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="svg_update"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'image']/@href" mode="svg_update">
		<xsl:attribute name="href" namespace="http://www.w3.org/1999/xlink">
			<xsl:value-of select="."/>
		</xsl:attribute>
	</xsl:template><xsl:template match="*[local-name() = 'svg'][not(@width and @height)]" mode="svg_update">
		<xsl:copy>
			<xsl:apply-templates select="@*" mode="svg_update"/>
			<xsl:variable name="viewbox_">
				<xsl:call-template name="split">
					<xsl:with-param name="pText" select="@viewBox"/>
					<xsl:with-param name="sep" select="' '"/>
				</xsl:call-template>
			</xsl:variable>
			<xsl:variable name="viewbox" select="xalan:nodeset($viewbox_)"/>
			<xsl:variable name="width" select="normalize-space($viewbox//item[3])"/>
			<xsl:variable name="height" select="normalize-space($viewbox//item[4])"/>
			
			<xsl:attribute name="width">
				<xsl:choose>
					<xsl:when test="$width != ''">
						<xsl:value-of select="round($width)"/>
					</xsl:when>
					<xsl:otherwise>400</xsl:otherwise> <!-- default width -->
				</xsl:choose>
			</xsl:attribute>
			<xsl:attribute name="height">
				<xsl:choose>
					<xsl:when test="$height != ''">
						<xsl:value-of select="round($height)"/>
					</xsl:when>
					<xsl:otherwise>400</xsl:otherwise> <!-- default height -->
				</xsl:choose>
			</xsl:attribute>
			
			<xsl:apply-templates mode="svg_update"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'figure']/*[local-name() = 'image'][*[local-name() = 'svg']]" priority="3">
		<xsl:variable name="name" select="ancestor::*[local-name() = 'figure']/*[local-name() = 'name']"/>
		<xsl:for-each select="*[local-name() = 'svg']">
			<xsl:call-template name="image_svg">
				<xsl:with-param name="name" select="$name"/>
			</xsl:call-template>
		</xsl:for-each>
	</xsl:template><xsl:template match="*[local-name() = 'figure']/*[local-name() = 'image'][@mimetype = 'image/svg+xml' and @src[not(starts-with(., 'data:image/'))]]" priority="2">
		<xsl:variable name="svg_content" select="document(@src)"/>
		<xsl:variable name="name" select="ancestor::*[local-name() = 'figure']/*[local-name() = 'name']"/>
		<xsl:for-each select="xalan:nodeset($svg_content)/node()">
			<xsl:call-template name="image_svg">
				<xsl:with-param name="name" select="$name"/>
			</xsl:call-template>
		</xsl:for-each>
	</xsl:template><xsl:template match="@*|node()" mode="svg_remove_a">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="svg_remove_a"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'a']" mode="svg_remove_a">
		<xsl:apply-templates mode="svg_remove_a"/>
	</xsl:template><xsl:template match="*[local-name() = 'a']" mode="svg_imagemap_links">
		<xsl:param name="scale"/>
		<xsl:variable name="dest">
			<xsl:choose>
				<xsl:when test="starts-with(@href, '#')">
					<xsl:value-of select="substring-after(@href, '#')"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="@href"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="./*[local-name() = 'rect']">
			<xsl:call-template name="insertSVGMapLink">
				<xsl:with-param name="left" select="floor(@x * $scale)"/>
				<xsl:with-param name="top" select="floor(@y * $scale)"/>
				<xsl:with-param name="width" select="floor(@width * $scale)"/>
				<xsl:with-param name="height" select="floor(@height * $scale)"/>
				<xsl:with-param name="dest" select="$dest"/>
			</xsl:call-template>
		</xsl:for-each>
		
		<xsl:for-each select="./*[local-name() = 'polygon']">
			<xsl:variable name="points">
				<xsl:call-template name="split">
					<xsl:with-param name="pText" select="@points"/>
				</xsl:call-template>
			</xsl:variable>
			<xsl:variable name="x_coords">
				<xsl:for-each select="xalan:nodeset($points)//item[position() mod 2 = 1]">
					<xsl:sort select="." data-type="number"/>
					<x><xsl:value-of select="."/></x>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="y_coords">
				<xsl:for-each select="xalan:nodeset($points)//item[position() mod 2 = 0]">
					<xsl:sort select="." data-type="number"/>
					<y><xsl:value-of select="."/></y>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="x" select="xalan:nodeset($x_coords)//x[1]"/>
			<xsl:variable name="y" select="xalan:nodeset($y_coords)//y[1]"/>
			<xsl:variable name="width" select="xalan:nodeset($x_coords)//x[last()] - $x"/>
			<xsl:variable name="height" select="xalan:nodeset($y_coords)//y[last()] - $y"/>
			<xsl:call-template name="insertSVGMapLink">
				<xsl:with-param name="left" select="floor($x * $scale)"/>
				<xsl:with-param name="top" select="floor($y * $scale)"/>
				<xsl:with-param name="width" select="floor($width * $scale)"/>
				<xsl:with-param name="height" select="floor($height * $scale)"/>
				<xsl:with-param name="dest" select="$dest"/>
			</xsl:call-template>
		</xsl:for-each>
		
		<xsl:for-each select="./*[local-name() = 'circle']">
			<xsl:call-template name="insertSVGMapLink">
				<xsl:with-param name="left" select="floor((@cx - @r) * $scale)"/>
				<xsl:with-param name="top" select="floor((@cy - @r) * $scale)"/>
				<xsl:with-param name="width" select="floor(@r * 2 * $scale)"/>
				<xsl:with-param name="height" select="floor(@r * 2 * $scale)"/>
				<xsl:with-param name="dest" select="$dest"/>
			</xsl:call-template>
		</xsl:for-each>
		<xsl:for-each select="./*[local-name() = 'ellipse']">
			<xsl:call-template name="insertSVGMapLink">
				<xsl:with-param name="left" select="floor((@cx - @rx) * $scale)"/>
				<xsl:with-param name="top" select="floor((@cy - @ry) * $scale)"/>
				<xsl:with-param name="width" select="floor(@rx * 2 * $scale)"/>
				<xsl:with-param name="height" select="floor(@ry * 2 * $scale)"/>
				<xsl:with-param name="dest" select="$dest"/>
			</xsl:call-template>
		</xsl:for-each>
	</xsl:template><xsl:template name="insertSVGMapLink">
		<xsl:param name="left"/>
		<xsl:param name="top"/>
		<xsl:param name="width"/>
		<xsl:param name="height"/>
		<xsl:param name="dest"/>
		<fo:block-container position="absolute" left="{$left}px" top="{$top}px" width="{$width}px" height="{$height}px">
		 <fo:block font-size="1pt">
			<fo:basic-link internal-destination="{$dest}" fox:alt-text="svg link">
				<fo:inline-container inline-progression-dimension="100%">
					<fo:block-container height="{$height - 1}px" width="100%">
						<!-- DEBUG <xsl:if test="local-name()='polygon'">
							<xsl:attribute name="background-color">magenta</xsl:attribute>
						</xsl:if> -->
					<fo:block>Â </fo:block></fo:block-container>
				</fo:inline-container>
			</fo:basic-link>
		 </fo:block>
	  </fo:block-container>
	</xsl:template><xsl:template match="*[local-name() = 'emf']"/><xsl:template match="*[local-name() = 'figure']/*[local-name() = 'name'] |                *[local-name() = 'table']/*[local-name() = 'name'] |               *[local-name() = 'permission']/*[local-name() = 'name'] |               *[local-name() = 'recommendation']/*[local-name() = 'name'] |               *[local-name() = 'requirement']/*[local-name() = 'name']" mode="contents">		
		<xsl:apply-templates mode="contents"/>
		<xsl:text> </xsl:text>
	</xsl:template><xsl:template match="*[local-name() = 'figure']/*[local-name() = 'name'] |                *[local-name() = 'table']/*[local-name() = 'name'] |               *[local-name() = 'permission']/*[local-name() = 'name'] |               *[local-name() = 'recommendation']/*[local-name() = 'name'] |               *[local-name() = 'requirement']/*[local-name() = 'name'] |               *[local-name() = 'sourcecode']/*[local-name() = 'name']" mode="bookmarks">		
		<xsl:apply-templates mode="bookmarks"/>
		<xsl:text> </xsl:text>
	</xsl:template><xsl:template match="*[local-name() = 'figure' or local-name() = 'table' or local-name() = 'permission' or local-name() = 'recommendation' or local-name() = 'requirement']/*[local-name() = 'name']/text()" mode="contents" priority="2">
		<xsl:value-of select="."/>
	</xsl:template><xsl:template match="*[local-name() = 'figure' or local-name() = 'table' or local-name() = 'permission' or local-name() = 'recommendation' or local-name() = 'requirement' or local-name() = 'sourcecode']/*[local-name() = 'name']//text()" mode="bookmarks" priority="2">
		<xsl:value-of select="."/>
	</xsl:template><xsl:template match="node()" mode="contents">
		<xsl:apply-templates mode="contents"/>
	</xsl:template><xsl:template match="*[local-name() = 'preface' or local-name() = 'sections']/*[local-name() = 'p'][@type = 'section-title' and not(@displayorder)]" priority="3" mode="contents"/><xsl:template match="*[local-name() = 'p'][@type = 'section-title' and not(@displayorder)]" mode="contents_no_displayorder">
		<xsl:call-template name="contents_section-title"/>
	</xsl:template><xsl:template match="*[local-name() = 'p'][@type = 'section-title']" mode="contents_in_clause">
		<xsl:call-template name="contents_section-title"/>
	</xsl:template><xsl:template match="*[local-name() = 'clause']/*[local-name() = 'p'][@type = 'section-title' and (@depth != ../*[local-name() = 'title']/@depth or ../*[local-name() = 'title']/@depth = 1)]" priority="3" mode="contents"/><xsl:template match="*[local-name() = 'p'][@type = 'floating-title' or @type = 'section-title']" priority="2" name="contents_section-title" mode="contents">
		<xsl:variable name="level">
			<xsl:call-template name="getLevel">
				<xsl:with-param name="depth" select="@depth"/>
			</xsl:call-template>
		</xsl:variable>
		
		<xsl:variable name="section">
			<xsl:choose>
				<xsl:when test="@type = 'section-title'"/>
				<xsl:otherwise>
					<xsl:value-of select="*[local-name() = 'tab'][1]/preceding-sibling::node()"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:variable name="type"><xsl:value-of select="@type"/></xsl:variable>
			
		<xsl:variable name="display">
			<xsl:choose>
				<xsl:when test="normalize-space(@id) = ''">false</xsl:when>
				<xsl:when test="$level &lt;= $toc_level">true</xsl:when>
				<xsl:otherwise>false</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:variable name="skip">false</xsl:variable>

		<xsl:if test="$skip = 'false'">		
		
			<xsl:variable name="title">
				<xsl:choose>
					<xsl:when test="*[local-name() = 'tab']">
						<xsl:choose>
							<xsl:when test="@type = 'section-title'">
								<xsl:value-of select="*[local-name() = 'tab'][1]/preceding-sibling::node()"/>
								<xsl:text>: </xsl:text>
								<xsl:copy-of select="*[local-name() = 'tab'][1]/following-sibling::node()"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:copy-of select="*[local-name() = 'tab'][1]/following-sibling::node()"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<xsl:copy-of select="node()"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			
			<xsl:variable name="root">
				<xsl:if test="ancestor-or-self::*[local-name() = 'preface']">preface</xsl:if>
				<xsl:if test="ancestor-or-self::*[local-name() = 'annex']">annex</xsl:if>
			</xsl:variable>
			
			<item id="{@id}" level="{$level}" section="{$section}" type="{$type}" root="{$root}" display="{$display}">
				<title>
					<xsl:apply-templates select="xalan:nodeset($title)" mode="contents_item"/>
				</title>
			</item>
		</xsl:if>
	</xsl:template><xsl:template match="node()" mode="bookmarks">
		<xsl:apply-templates mode="bookmarks"/>
	</xsl:template><xsl:template match="*[local-name() = 'title' or local-name() = 'name']//*[local-name() = 'stem']" mode="contents">
		<xsl:apply-templates select="."/>
	</xsl:template><xsl:template match="*[local-name() = 'references'][@hidden='true']" mode="contents" priority="3"/><xsl:template match="*[local-name() = 'references']/*[local-name() = 'bibitem']" mode="contents"/><xsl:template match="*[local-name() = 'span']" mode="contents">
		<xsl:apply-templates mode="contents"/>
	</xsl:template><xsl:template match="*[local-name() = 'stem']" mode="bookmarks">
		<xsl:apply-templates mode="bookmarks"/>
	</xsl:template><xsl:template match="*[local-name() = 'span']" mode="bookmarks">
		<xsl:apply-templates mode="bookmarks"/>
	</xsl:template><xsl:template name="addBookmarks">
		<xsl:param name="contents"/>
		<xsl:variable name="contents_nodes" select="xalan:nodeset($contents)"/>
		<xsl:if test="$contents_nodes//item">
			<fo:bookmark-tree>
				<xsl:choose>
					<xsl:when test="$contents_nodes/doc">
						<xsl:choose>
							<xsl:when test="count($contents_nodes/doc) &gt; 1">
								<xsl:for-each select="$contents_nodes/doc">
									<fo:bookmark internal-destination="{contents/item[1]/@id}" starting-state="hide">
										<xsl:if test="@bundle = 'true'">
											<xsl:attribute name="internal-destination"><xsl:value-of select="@firstpage_id"/></xsl:attribute>
										</xsl:if>
										<fo:bookmark-title>
											<xsl:choose>
												<xsl:when test="not(normalize-space(@bundle) = 'true')"> <!-- 'bundle' means several different documents (not language versions) in one xml -->
													<xsl:variable name="bookmark-title_">
														<xsl:call-template name="getLangVersion">
															<xsl:with-param name="lang" select="@lang"/>
															<xsl:with-param name="doctype" select="@doctype"/>
															<xsl:with-param name="title" select="@title-part"/>
														</xsl:call-template>
													</xsl:variable>
													<xsl:choose>
														<xsl:when test="normalize-space($bookmark-title_) != ''">
															<xsl:value-of select="normalize-space($bookmark-title_)"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:choose>
																<xsl:when test="@lang = 'en'">English</xsl:when>
																<xsl:when test="@lang = 'fr'">FranÃ§ais</xsl:when>
																<xsl:when test="@lang = 'de'">Deutsche</xsl:when>
																<xsl:otherwise><xsl:value-of select="@lang"/> version</xsl:otherwise>
															</xsl:choose>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="@title-part"/>
												</xsl:otherwise>
											</xsl:choose>
										</fo:bookmark-title>
										
										<xsl:apply-templates select="contents/item" mode="bookmark"/>
										
										<xsl:call-template name="insertFigureBookmarks">
											<xsl:with-param name="contents" select="contents"/>
										</xsl:call-template>
										
										<xsl:call-template name="insertTableBookmarks">
											<xsl:with-param name="contents" select="contents"/>
											<xsl:with-param name="lang" select="@lang"/>
										</xsl:call-template>
										
									</fo:bookmark>
									
								</xsl:for-each>
							</xsl:when>
							<xsl:otherwise>
								<xsl:for-each select="$contents_nodes/doc">
								
									<xsl:apply-templates select="contents/item" mode="bookmark"/>
									
									<xsl:call-template name="insertFigureBookmarks">
										<xsl:with-param name="contents" select="contents"/>
									</xsl:call-template>
										
									<xsl:call-template name="insertTableBookmarks">
										<xsl:with-param name="contents" select="contents"/>
										<xsl:with-param name="lang" select="@lang"/>
									</xsl:call-template>
									
								</xsl:for-each>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<xsl:apply-templates select="$contents_nodes/contents/item" mode="bookmark"/>				
						
						<xsl:call-template name="insertFigureBookmarks">
							<xsl:with-param name="contents" select="$contents_nodes/contents"/>
						</xsl:call-template>
							
						<xsl:call-template name="insertTableBookmarks">
							<xsl:with-param name="contents" select="$contents_nodes/contents"/>
							<xsl:with-param name="lang" select="@lang"/>
						</xsl:call-template>
						
					</xsl:otherwise>
				</xsl:choose>
				
				 
				
				
				
				
				 
				
			</fo:bookmark-tree>
		</xsl:if>
	</xsl:template><xsl:template name="insertFigureBookmarks">
		<xsl:param name="contents"/>
		<xsl:variable name="contents_nodes" select="xalan:nodeset($contents)"/>
		<xsl:if test="$contents_nodes/figure">
			<fo:bookmark internal-destination="{$contents_nodes/figure[1]/@id}" starting-state="hide">
				<fo:bookmark-title>Figures</fo:bookmark-title>
				<xsl:for-each select="$contents_nodes/figure">
					<fo:bookmark internal-destination="{@id}">
						<fo:bookmark-title>
							<xsl:value-of select="normalize-space(title)"/>
						</fo:bookmark-title>
					</fo:bookmark>
				</xsl:for-each>
			</fo:bookmark>	
		</xsl:if>
		
		
				<xsl:if test="$contents_nodes//figures/figure">
					<fo:bookmark internal-destination="empty_bookmark" starting-state="hide">
					
						
						
						<xsl:variable name="bookmark-title">
							
									<xsl:value-of select="$title-list-figures"/>
								
						</xsl:variable>
						<fo:bookmark-title><xsl:value-of select="normalize-space($bookmark-title)"/></fo:bookmark-title>
						<xsl:for-each select="$contents_nodes//figures/figure">
							<fo:bookmark internal-destination="{@id}">
								<fo:bookmark-title><xsl:value-of select="normalize-space(.)"/></fo:bookmark-title>
							</fo:bookmark>
						</xsl:for-each>
					</fo:bookmark>
				</xsl:if>
			
	</xsl:template><xsl:template name="insertTableBookmarks">
		<xsl:param name="contents"/>
		<xsl:param name="lang"/>
		<xsl:variable name="contents_nodes" select="xalan:nodeset($contents)"/>
		<xsl:if test="$contents_nodes/table">
			<fo:bookmark internal-destination="{$contents_nodes/table[1]/@id}" starting-state="hide">
				<fo:bookmark-title>
					<xsl:choose>
						<xsl:when test="$lang = 'fr'">Tableaux</xsl:when>
						<xsl:otherwise>Tables</xsl:otherwise>
					</xsl:choose>
				</fo:bookmark-title>
				<xsl:for-each select="$contents_nodes/table">
					<fo:bookmark internal-destination="{@id}">
						<fo:bookmark-title>
							<xsl:value-of select="normalize-space(title)"/>
						</fo:bookmark-title>
					</fo:bookmark>
				</xsl:for-each>
			</fo:bookmark>	
		</xsl:if>
		
		
				<xsl:if test="$contents_nodes//tables/table">
					<fo:bookmark internal-destination="empty_bookmark" starting-state="hide">
						
						
						
						<xsl:variable name="bookmark-title">
							
									<xsl:value-of select="$title-list-tables"/>
								
						</xsl:variable>
						
						<fo:bookmark-title><xsl:value-of select="$bookmark-title"/></fo:bookmark-title>
						
						<xsl:for-each select="$contents_nodes//tables/table">
							<fo:bookmark internal-destination="{@id}">
								<fo:bookmark-title><xsl:value-of select="normalize-space(.)"/></fo:bookmark-title>
							</fo:bookmark>
						</xsl:for-each>
					</fo:bookmark>
				</xsl:if>
			
	</xsl:template><xsl:template name="getLangVersion">
		<xsl:param name="lang"/>
		<xsl:param name="doctype" select="''"/>
		<xsl:param name="title" select="''"/>
		<xsl:choose>
			<xsl:when test="$lang = 'en'">
				
				
				</xsl:when>
			<xsl:when test="$lang = 'fr'">
				
				
			</xsl:when>
			<xsl:when test="$lang = 'de'">Deutsche</xsl:when>
			<xsl:otherwise><xsl:value-of select="$lang"/> version</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="item" mode="bookmark">
		<xsl:choose>
			<xsl:when test="@id != ''">
				<fo:bookmark internal-destination="{@id}" starting-state="hide">
					<fo:bookmark-title>
						<xsl:if test="@section != ''">
							<xsl:value-of select="@section"/> 
							<xsl:text> </xsl:text>
						</xsl:if>
						<xsl:value-of select="normalize-space(title)"/>
					</fo:bookmark-title>
					<xsl:apply-templates mode="bookmark"/>
				</fo:bookmark>
			</xsl:when>
			<xsl:otherwise>
				<xsl:apply-templates mode="bookmark"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="title" mode="bookmark"/><xsl:template match="text()" mode="bookmark"/><xsl:template match="*[local-name() = 'figure']/*[local-name() = 'name'] |         *[local-name() = 'image']/*[local-name() = 'name']">
		<xsl:if test="normalize-space() != ''">			
			<fo:block xsl:use-attribute-sets="figure-name-style">
				
				
				
				
				
				<xsl:apply-templates/>
			</fo:block>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'figure']/*[local-name() = 'fn']" priority="2"/><xsl:template match="*[local-name() = 'figure']/*[local-name() = 'note']"/><xsl:template match="*[local-name() = 'title']" mode="contents_item">
		<xsl:param name="mode">bookmarks</xsl:param>
		<xsl:apply-templates mode="contents_item">
			<xsl:with-param name="mode" select="$mode"/>
		</xsl:apply-templates>
		<!-- <xsl:text> </xsl:text> -->
	</xsl:template><xsl:template name="getSection">
		<xsl:value-of select="*[local-name() = 'title']/*[local-name() = 'tab'][1]/preceding-sibling::node()"/>
	</xsl:template><xsl:template name="getName">
		<xsl:choose>
			<xsl:when test="*[local-name() = 'title']/*[local-name() = 'tab']">
				<xsl:copy-of select="*[local-name() = 'title']/*[local-name() = 'tab'][1]/following-sibling::node()"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy-of select="*[local-name() = 'title']/node()"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="insertTitleAsListItem">
		<xsl:param name="provisional-distance-between-starts" select="'9.5mm'"/>
		<xsl:variable name="section">						
			<xsl:for-each select="..">
				<xsl:call-template name="getSection"/>
			</xsl:for-each>
		</xsl:variable>							
		<fo:list-block provisional-distance-between-starts="{$provisional-distance-between-starts}">						
			<fo:list-item>
				<fo:list-item-label end-indent="label-end()">
					<fo:block>
						<xsl:value-of select="$section"/>
					</fo:block>
				</fo:list-item-label>
				<fo:list-item-body start-indent="body-start()">
					<fo:block>						
						<xsl:choose>
							<xsl:when test="*[local-name() = 'tab']">
								<xsl:apply-templates select="*[local-name() = 'tab'][1]/following-sibling::node()"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:apply-templates/>
								<xsl:apply-templates select="following-sibling::*[1][local-name() = 'variant-title'][@type = 'sub']" mode="subtitle"/>
							</xsl:otherwise>
						</xsl:choose>
					</fo:block>
				</fo:list-item-body>
			</fo:list-item>
		</fo:list-block>
	</xsl:template><xsl:template name="extractSection">
		<xsl:value-of select="*[local-name() = 'tab'][1]/preceding-sibling::node()"/>
	</xsl:template><xsl:template name="extractTitle">
		<xsl:choose>
				<xsl:when test="*[local-name() = 'tab']">
					<xsl:apply-templates select="*[local-name() = 'tab'][1]/following-sibling::node()"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:apply-templates/>
				</xsl:otherwise>
			</xsl:choose>
	</xsl:template><xsl:template match="*[local-name() = 'fn']" mode="contents"/><xsl:template match="*[local-name() = 'fn']" mode="bookmarks"/><xsl:template match="*[local-name() = 'fn']" mode="contents_item"/><xsl:template match="*[local-name() = 'xref'] | *[local-name() = 'eref']" mode="contents">
		<xsl:value-of select="."/>
	</xsl:template><xsl:template match="*[local-name() = 'review']" mode="contents_item"/><xsl:template match="*[local-name() = 'tab']" mode="contents_item">
		<xsl:text> </xsl:text>
	</xsl:template><xsl:template match="*[local-name() = 'strong']" mode="contents_item">
		<xsl:copy>
			<xsl:apply-templates mode="contents_item"/>
		</xsl:copy>		
	</xsl:template><xsl:template match="*[local-name() = 'em']" mode="contents_item">
		<xsl:copy>
			<xsl:apply-templates mode="contents_item"/>
		</xsl:copy>		
	</xsl:template><xsl:template match="*[local-name() = 'stem']" mode="contents_item">
		<xsl:copy-of select="."/>
	</xsl:template><xsl:template match="*[local-name() = 'br']" mode="contents_item">
		<xsl:text> </xsl:text>
	</xsl:template><xsl:template match="*[local-name() = 'name']" mode="contents_item">
		<xsl:param name="mode">bookmarks</xsl:param>
		<xsl:apply-templates mode="contents_item">
			<xsl:with-param name="mode" select="$mode"/>
		</xsl:apply-templates>
	</xsl:template><xsl:template match="*[local-name() = 'add']" mode="contents_item">
		<xsl:param name="mode">bookmarks</xsl:param>
		<xsl:choose>
			<xsl:when test="starts-with(text(), $ace_tag)">
				<xsl:if test="$mode = 'contents'">
					<xsl:copy>
						<xsl:apply-templates mode="contents_item"/>
					</xsl:copy>		
				</xsl:if>
			</xsl:when>
			<xsl:otherwise><xsl:apply-templates mode="contents_item"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="text()" mode="contents_item">
		<xsl:call-template name="keep_together_standard_number"/>
	</xsl:template><xsl:template match="*[local-name() = 'span']" mode="contents_item">
		<xsl:apply-templates mode="contents_item"/>
	</xsl:template><xsl:template match="*[local-name()='sourcecode']" name="sourcecode">
	
		<fo:block-container xsl:use-attribute-sets="sourcecode-container-style">
		
			<xsl:if test="not(ancestor::*[local-name() = 'li']) or ancestor::*[local-name() = 'example']">
				<xsl:attribute name="margin-left">0mm</xsl:attribute>
			</xsl:if>
			
			<xsl:if test="ancestor::*[local-name() = 'example']">
				<xsl:attribute name="margin-right">0mm</xsl:attribute>
			</xsl:if>
			
			<xsl:copy-of select="@id"/>
			
			<xsl:if test="parent::*[local-name() = 'note']">
				<xsl:attribute name="margin-left">
					<xsl:choose>
						<xsl:when test="not(ancestor::*[local-name() = 'table'])"><xsl:value-of select="$note-body-indent"/></xsl:when>
						<xsl:otherwise><xsl:value-of select="$note-body-indent-table"/></xsl:otherwise>
					</xsl:choose>
				</xsl:attribute>
				
			</xsl:if>
			<fo:block-container margin-left="0mm">
		
				
					<xsl:apply-templates select="*[local-name()='name']"/> <!-- show sourcecode's name BEFORE content -->
				
				
				
				
				<fo:block xsl:use-attribute-sets="sourcecode-style">
					<xsl:variable name="_font-size">
						
												
						
						
						
						<!-- 9 -->
						
						
						<!-- <xsl:if test="$namespace = 'ieee'">							
							<xsl:if test="$doctype = 'standard' and $stage = 'published'">8</xsl:if>
						</xsl:if> -->
						
								
						
						
						
												
						
							<xsl:choose>
								<xsl:when test="ancestor::*[local-name() = 'table']">inherit</xsl:when>
								<xsl:otherwise>95%</xsl:otherwise><!-- 110% -->
							</xsl:choose>
						
								
				</xsl:variable>
				
				<xsl:variable name="font-size" select="normalize-space($_font-size)"/>		
				<xsl:if test="$font-size != ''">
					<xsl:attribute name="font-size">
						<xsl:choose>
							<xsl:when test="$font-size = 'inherit'"><xsl:value-of select="$font-size"/></xsl:when>
							<xsl:when test="contains($font-size, '%')"><xsl:value-of select="$font-size"/></xsl:when>
							<xsl:when test="ancestor::*[local-name()='note']"><xsl:value-of select="$font-size * 0.91"/>pt</xsl:when>
							<xsl:otherwise><xsl:value-of select="$font-size"/>pt</xsl:otherwise>
						</xsl:choose>
					</xsl:attribute>
				</xsl:if>
				
				 <!-- background for image -->
					<xsl:if test="starts-with(*[local-name() = 'name']/text()[1], 'Figure ')">
						<xsl:attribute name="background-color">rgb(236,242,246)</xsl:attribute>
						<xsl:attribute name="padding-left">11mm</xsl:attribute>
						<xsl:attribute name="margin-left">0mm</xsl:attribute>
						<xsl:attribute name="padding-right">11mm</xsl:attribute>
						<xsl:attribute name="margin-right">0mm</xsl:attribute>
						<xsl:attribute name="padding-top">7.5mm</xsl:attribute>
						<xsl:attribute name="padding-bottom">7.5mm</xsl:attribute>
						<xsl:if test="following-sibling::*[1][local-name() = 'sourcecode'] and starts-with(*[local-name() = 'name']/text()[1], 'Figure ')">
							<xsl:attribute name="margin-bottom">16pt</xsl:attribute>
						</xsl:if>
					</xsl:if>
				
				
				
				
				<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
			</fo:block>
			
			
				
			
				
			</fo:block-container>
		</fo:block-container>
	</xsl:template><xsl:template match="*[local-name()='sourcecode']/text()" priority="2">
		<xsl:choose>
			<xsl:when test="normalize-space($syntax-highlight) = 'true' and normalize-space(../@lang) != ''"> <!-- condition for turn on of highlighting -->
				<xsl:variable name="syntax" select="java:org.metanorma.fop.Util.syntaxHighlight(., ../@lang)"/>
				<xsl:choose>
					<xsl:when test="normalize-space($syntax) != ''"><!-- if there is highlighted result -->
						<xsl:apply-templates select="xalan:nodeset($syntax)" mode="syntax_highlight"/> <!-- process span tags -->
					</xsl:when>
					<xsl:otherwise> <!-- if case of non-succesfull syntax highlight (for instance, unknown lang), process without highlighting -->
						<xsl:call-template name="add_spaces_to_sourcecode"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="add_spaces_to_sourcecode"/>
			</xsl:otherwise>
		</xsl:choose>
		
	</xsl:template><xsl:template name="add_spaces_to_sourcecode">
		<xsl:variable name="text_step1">
			<xsl:call-template name="add-zero-spaces-equal"/>
		</xsl:variable>
		<xsl:variable name="text_step2">
			<xsl:call-template name="add-zero-spaces-java">
				<xsl:with-param name="text" select="$text_step1"/>
			</xsl:call-template>
		</xsl:variable>
		
		<!-- <xsl:value-of select="$text_step2"/> -->
		
		<!-- add zero-width space after space -->
		<xsl:variable name="text_step3" select="java:replaceAll(java:java.lang.String.new($text_step2),' ',' â')"/>
		
		<!-- split text by zero-width space -->
		<xsl:variable name="text_step4">
			<xsl:call-template name="split_for_interspers">
				<xsl:with-param name="pText" select="$text_step3"/>
				<xsl:with-param name="sep" select="$zero_width_space"/>
			</xsl:call-template>
		</xsl:variable>
		
		<xsl:for-each select="xalan:nodeset($text_step4)/node()">
			<xsl:choose>
				<xsl:when test="local-name() = 'interspers'"> <!-- word with length more than 30 will be interspersed with zero-width space -->
					<xsl:call-template name="interspers-java">
						<xsl:with-param name="str" select="."/>
					</xsl:call-template>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
		
	</xsl:template><xsl:variable name="interspers_tag_open">###interspers123###</xsl:variable><xsl:variable name="interspers_tag_close">###/interspers123###</xsl:variable><xsl:template name="split_for_interspers">
		<xsl:param name="pText" select="."/>
		<xsl:param name="sep" select="','"/>
		<!-- word with length more than 30 will be interspersed with zero-width space -->
		<xsl:variable name="regex" select="concat('([^', $zero_width_space, ']{31,})')"/> <!-- sequence of characters (more 31), that doesn't contains zero-width space -->
		<xsl:variable name="text" select="java:replaceAll(java:java.lang.String.new($pText),$regex,concat($interspers_tag_open,'$1',$interspers_tag_close))"/>
		<xsl:call-template name="replace_tag_interspers">
			<xsl:with-param name="text" select="$text"/>
		</xsl:call-template>
	</xsl:template><xsl:template name="replace_tag_interspers">
		<xsl:param name="text"/>
		<xsl:choose>
			<xsl:when test="contains($text, $interspers_tag_open)">
				<xsl:value-of select="substring-before($text, $interspers_tag_open)"/>
				<xsl:variable name="text_after" select="substring-after($text, $interspers_tag_open)"/>
				<interspers>
					<xsl:value-of select="substring-before($text_after, $interspers_tag_close)"/>
				</interspers>
				<xsl:call-template name="replace_tag_interspers">
					<xsl:with-param name="text" select="substring-after($text_after, $interspers_tag_close)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise><xsl:value-of select="$text"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="interspers">
		<xsl:param name="str"/>
		<xsl:param name="char" select="$zero_width_space"/>
		<xsl:if test="$str != ''">
			<xsl:value-of select="substring($str, 1, 1)"/>
			
			<xsl:variable name="next_char" select="substring($str, 2, 1)"/>
			<xsl:if test="not(contains(concat(' -.:=_ââ', $char), $next_char))">
				<xsl:value-of select="$char"/>
			</xsl:if>
			
			<xsl:call-template name="interspers">
				<xsl:with-param name="str" select="substring($str, 2)"/>
				<xsl:with-param name="char" select="$char"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template><xsl:template name="interspers-java">
		<xsl:param name="str"/>
		<xsl:param name="char" select="$zero_width_space"/>
		<xsl:value-of select="java:replaceAll(java:java.lang.String.new($str),'([^ -.:=_â])',concat('$1', $char))"/> <!-- insert $char after each char excep space, - . : = _ etc. -->
	</xsl:template><xsl:template match="*" mode="syntax_highlight">
		<xsl:apply-templates mode="syntax_highlight"/>
	</xsl:template><xsl:variable name="syntax_highlight_styles_">
		<style class="hljs-addition" xsl:use-attribute-sets="hljs-addition"/>
		<style class="hljs-attr" xsl:use-attribute-sets="hljs-attr"/>
		<style class="hljs-attribute" xsl:use-attribute-sets="hljs-attribute"/>
		<style class="hljs-built_in" xsl:use-attribute-sets="hljs-built_in"/>
		<style class="hljs-bullet" xsl:use-attribute-sets="hljs-bullet"/>
		<style class="hljs-char_and_escape_" xsl:use-attribute-sets="hljs-char_and_escape_"/>
		<style class="hljs-code" xsl:use-attribute-sets="hljs-code"/>
		<style class="hljs-comment" xsl:use-attribute-sets="hljs-comment"/>
		<style class="hljs-deletion" xsl:use-attribute-sets="hljs-deletion"/>
		<style class="hljs-doctag" xsl:use-attribute-sets="hljs-doctag"/>
		<style class="hljs-emphasis" xsl:use-attribute-sets="hljs-emphasis"/>
		<style class="hljs-formula" xsl:use-attribute-sets="hljs-formula"/>
		<style class="hljs-keyword" xsl:use-attribute-sets="hljs-keyword"/>
		<style class="hljs-link" xsl:use-attribute-sets="hljs-link"/>
		<style class="hljs-literal" xsl:use-attribute-sets="hljs-literal"/>
		<style class="hljs-meta" xsl:use-attribute-sets="hljs-meta"/>
		<style class="hljs-meta_hljs-string" xsl:use-attribute-sets="hljs-meta_hljs-string"/>
		<style class="hljs-meta_hljs-keyword" xsl:use-attribute-sets="hljs-meta_hljs-keyword"/>
		<style class="hljs-name" xsl:use-attribute-sets="hljs-name"/>
		<style class="hljs-number" xsl:use-attribute-sets="hljs-number"/>
		<style class="hljs-operator" xsl:use-attribute-sets="hljs-operator"/>
		<style class="hljs-params" xsl:use-attribute-sets="hljs-params"/>
		<style class="hljs-property" xsl:use-attribute-sets="hljs-property"/>
		<style class="hljs-punctuation" xsl:use-attribute-sets="hljs-punctuation"/>
		<style class="hljs-quote" xsl:use-attribute-sets="hljs-quote"/>
		<style class="hljs-regexp" xsl:use-attribute-sets="hljs-regexp"/>
		<style class="hljs-section" xsl:use-attribute-sets="hljs-section"/>
		<style class="hljs-selector-attr" xsl:use-attribute-sets="hljs-selector-attr"/>
		<style class="hljs-selector-class" xsl:use-attribute-sets="hljs-selector-class"/>
		<style class="hljs-selector-id" xsl:use-attribute-sets="hljs-selector-id"/>
		<style class="hljs-selector-pseudo" xsl:use-attribute-sets="hljs-selector-pseudo"/>
		<style class="hljs-selector-tag" xsl:use-attribute-sets="hljs-selector-tag"/>
		<style class="hljs-string" xsl:use-attribute-sets="hljs-string"/>
		<style class="hljs-strong" xsl:use-attribute-sets="hljs-strong"/>
		<style class="hljs-subst" xsl:use-attribute-sets="hljs-subst"/>
		<style class="hljs-symbol" xsl:use-attribute-sets="hljs-symbol"/>		
		<style class="hljs-tag" xsl:use-attribute-sets="hljs-tag"/>
		<!-- <style class="hljs-tag_hljs-attr" xsl:use-attribute-sets="hljs-tag_hljs-attr"></style> -->
		<!-- <style class="hljs-tag_hljs-name" xsl:use-attribute-sets="hljs-tag_hljs-name"></style> -->
		<style class="hljs-template-tag" xsl:use-attribute-sets="hljs-template-tag"/>
		<style class="hljs-template-variable" xsl:use-attribute-sets="hljs-template-variable"/>
		<style class="hljs-title" xsl:use-attribute-sets="hljs-title"/>
		<style class="hljs-title_and_class_" xsl:use-attribute-sets="hljs-title_and_class_"/>
		<style class="hljs-title_and_class__and_inherited__" xsl:use-attribute-sets="hljs-title_and_class__and_inherited__"/>
		<style class="hljs-title_and_function_" xsl:use-attribute-sets="hljs-title_and_function_"/>
		<style class="hljs-type" xsl:use-attribute-sets="hljs-type"/>
		<style class="hljs-variable" xsl:use-attribute-sets="hljs-variable"/>
		<style class="hljs-variable_and_language_" xsl:use-attribute-sets="hljs-variable_and_language_"/>
	</xsl:variable><xsl:variable name="syntax_highlight_styles" select="xalan:nodeset($syntax_highlight_styles_)"/><xsl:template match="span" mode="syntax_highlight" priority="2">
		<!-- <fo:inline color="green" font-style="italic"><xsl:apply-templates mode="syntax_highlight"/></fo:inline> -->
		<fo:inline>
			<xsl:variable name="classes_">
				<xsl:call-template name="split">
					<xsl:with-param name="pText" select="@class"/>
					<xsl:with-param name="sep" select="' '"/>
				</xsl:call-template>
				<!-- a few classes together (_and_ suffix) -->
				<xsl:if test="contains(@class, 'hljs-char') and contains(@class, 'escape_')">
					<item>hljs-char_and_escape_</item>
				</xsl:if>
				<xsl:if test="contains(@class, 'hljs-title') and contains(@class, 'class_')">
					<item>hljs-title_and_class_</item>
				</xsl:if>
				<xsl:if test="contains(@class, 'hljs-title') and contains(@class, 'class_') and contains(@class, 'inherited__')">
					<item>hljs-title_and_class__and_inherited__</item>
				</xsl:if>
				<xsl:if test="contains(@class, 'hljs-title') and contains(@class, 'function_')">
					<item>hljs-title_and_function_</item>
				</xsl:if>
				<xsl:if test="contains(@class, 'hljs-variable') and contains(@class, 'language_')">
					<item>hljs-variable_and_language_</item>
				</xsl:if>
				<!-- with parent classes (_ suffix) -->
				<xsl:if test="contains(@class, 'hljs-keyword') and contains(ancestor::*/@class, 'hljs-meta')">
					<item>hljs-meta_hljs-keyword</item>
				</xsl:if>
				<xsl:if test="contains(@class, 'hljs-string') and contains(ancestor::*/@class, 'hljs-meta')">
					<item>hljs-meta_hljs-string</item>
				</xsl:if>
			</xsl:variable>
			<xsl:variable name="classes" select="xalan:nodeset($classes_)"/>
			
			<xsl:for-each select="$classes/item">
				<xsl:variable name="class_name" select="."/>
				<xsl:for-each select="$syntax_highlight_styles/style[@class = $class_name]/@*[not(local-name() = 'class')]">
					<xsl:attribute name="{local-name()}"><xsl:value-of select="."/></xsl:attribute>
				</xsl:for-each>
			</xsl:for-each>
			
			<!-- <xsl:variable name="class_name">
				<xsl:choose>
					<xsl:when test="@class = 'hljs-attr' and ancestor::*/@class = 'hljs-tag'">hljs-tag_hljs-attr</xsl:when>
					<xsl:when test="@class = 'hljs-name' and ancestor::*/@class = 'hljs-tag'">hljs-tag_hljs-name</xsl:when>
					<xsl:when test="@class = 'hljs-string' and ancestor::*/@class = 'hljs-meta'">hljs-meta_hljs-string</xsl:when>
					<xsl:otherwise><xsl:value-of select="@class"/></xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:for-each select="$syntax_highlight_styles/style[@class = $class_name]/@*[not(local-name() = 'class')]">
				<xsl:attribute name="{local-name()}"><xsl:value-of select="."/></xsl:attribute>
			</xsl:for-each> -->
			
		<xsl:apply-templates mode="syntax_highlight"/></fo:inline>
	</xsl:template><xsl:template match="text()" mode="syntax_highlight" priority="2">
		<xsl:call-template name="add_spaces_to_sourcecode"/>
	</xsl:template><xsl:template match="*[local-name() = 'sourcecode']/*[local-name() = 'name']">
		<xsl:if test="normalize-space() != ''">		
			<fo:block xsl:use-attribute-sets="sourcecode-name-style">				
				<xsl:apply-templates/>
			</fo:block>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'permission']">
		<fo:block id="{@id}" xsl:use-attribute-sets="permission-style">			
			<xsl:apply-templates select="*[local-name()='name']"/>
			<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'permission']/*[local-name() = 'name']">
		<xsl:if test="normalize-space() != ''">
			<fo:block xsl:use-attribute-sets="permission-name-style">
				<xsl:apply-templates/>
				
			</fo:block>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'permission']/*[local-name() = 'label']">
		<fo:block xsl:use-attribute-sets="permission-label-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'requirement']">
		<fo:block id="{@id}" xsl:use-attribute-sets="requirement-style">			
			<xsl:apply-templates select="*[local-name()='name']"/>
			<xsl:apply-templates select="*[local-name()='label']"/>
			<xsl:apply-templates select="@obligation"/>
			<xsl:apply-templates select="*[local-name()='subject']"/>
			<xsl:apply-templates select="node()[not(local-name() = 'name') and not(local-name() = 'label') and not(local-name() = 'subject')]"/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'requirement']/*[local-name() = 'name']">
		<xsl:if test="normalize-space() != ''">
			<fo:block xsl:use-attribute-sets="requirement-name-style">
				
				<xsl:apply-templates/>
				
			</fo:block>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'requirement']/*[local-name() = 'label']">
		<fo:block xsl:use-attribute-sets="requirement-label-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'requirement']/@obligation">
			<fo:block>
				<fo:inline padding-right="3mm">Obligation</fo:inline><xsl:value-of select="."/>
			</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'requirement']/*[local-name() = 'subject']" priority="2">
		<fo:block xsl:use-attribute-sets="subject-style">
			<xsl:text>Target Type </xsl:text><xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'recommendation']">
		<fo:block id="{@id}" xsl:use-attribute-sets="recommendation-style">			
			<xsl:apply-templates select="*[local-name()='name']"/>
			<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'recommendation']/*[local-name() = 'name']">
		<xsl:if test="normalize-space() != ''">
			<fo:block xsl:use-attribute-sets="recommendation-name-style">
				<xsl:apply-templates/>
				
			</fo:block>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'recommendation']/*[local-name() = 'label']">
		<fo:block xsl:use-attribute-sets="recommendation-label-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'subject']">
		<fo:block xsl:use-attribute-sets="subject-style">
			<xsl:text>Target Type </xsl:text><xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'inherit'] | *[local-name() = 'component'][@class = 'inherit']">
		<fo:block xsl:use-attribute-sets="inherit-style">
			<xsl:text>Dependency </xsl:text><xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'description'] | *[local-name() = 'component'][@class = 'description']">
		<fo:block xsl:use-attribute-sets="description-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'specification'] | *[local-name() = 'component'][@class = 'specification']">
		<fo:block xsl:use-attribute-sets="specification-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'measurement-target'] | *[local-name() = 'component'][@class = 'measurement-target']">
		<fo:block xsl:use-attribute-sets="measurement-target-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'verification'] | *[local-name() = 'component'][@class = 'verification']">
		<fo:block xsl:use-attribute-sets="verification-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'import'] | *[local-name() = 'component'][@class = 'import']">
		<fo:block xsl:use-attribute-sets="import-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'table'][@class = 'recommendation' or @class='requirement' or @class='permission']">
		<fo:block-container margin-left="0mm" margin-right="0mm" margin-bottom="12pt">
			<xsl:if test="ancestor::*[local-name() = 'table'][@class = 'recommendation' or @class='requirement' or @class='permission']">
				<xsl:attribute name="margin-bottom">0pt</xsl:attribute>
			</xsl:if>
			<fo:block-container margin-left="0mm" margin-right="0mm">
				<fo:table id="{@id}" table-layout="fixed" width="100%"> <!-- border="1pt solid black" -->
					<xsl:if test="ancestor::*[local-name() = 'table'][@class = 'recommendation' or @class='requirement' or @class='permission']">
						<!-- <xsl:attribute name="border">0.5pt solid black</xsl:attribute> -->
					</xsl:if>
					<xsl:variable name="simple-table">	
						<xsl:call-template name="getSimpleTable">
							<xsl:with-param name="id" select="@id"/>
						</xsl:call-template>
					</xsl:variable>					
					<xsl:variable name="cols-count" select="count(xalan:nodeset($simple-table)//tr[1]/td)"/>
					<xsl:if test="$cols-count = 2 and not(ancestor::*[local-name()='table'])">
						<fo:table-column column-width="30%"/>
						<fo:table-column column-width="70%"/>
					</xsl:if>
					<xsl:apply-templates mode="requirement"/>
				</fo:table>
				<!-- fn processing -->
				<xsl:if test=".//*[local-name() = 'fn']">
					<xsl:for-each select="*[local-name() = 'tbody']">
						<fo:block font-size="90%" border-bottom="1pt solid black">
							<xsl:call-template name="table_fn_display"/>
						</fo:block>
					</xsl:for-each>
				</xsl:if>
			</fo:block-container>
		</fo:block-container>
	</xsl:template><xsl:template match="*[local-name()='thead']" mode="requirement">		
		<fo:table-header>			
			<xsl:apply-templates mode="requirement"/>
		</fo:table-header>
	</xsl:template><xsl:template match="*[local-name()='tbody']" mode="requirement">		
		<fo:table-body>
			<xsl:apply-templates mode="requirement"/>
		</fo:table-body>
	</xsl:template><xsl:template match="*[local-name()='tr']" mode="requirement">
		<fo:table-row height="7mm" border-bottom="0.5pt solid grey">			
			<xsl:if test="parent::*[local-name()='thead']"> <!-- and not(ancestor::*[local-name() = 'table'][@class = 'recommendation' or @class='requirement' or @class='permission']) -->
				<xsl:attribute name="background-color">rgb(33, 55, 92)</xsl:attribute>
			</xsl:if>
			<xsl:if test="starts-with(*[local-name()='td'][1], 'Requirement ')">
				<xsl:attribute name="background-color">rgb(252, 246, 222)</xsl:attribute>
			</xsl:if>
			<xsl:if test="starts-with(*[local-name()='td'][1], 'Recommendation ')">
				<xsl:attribute name="background-color">rgb(233, 235, 239)</xsl:attribute>
			</xsl:if>
			<xsl:apply-templates mode="requirement"/>
		</fo:table-row>
	</xsl:template><xsl:template match="*[local-name()='th']" mode="requirement">
		<fo:table-cell text-align="{@align}" display-align="center" padding="1mm" padding-left="2mm"> <!-- border="0.5pt solid black" -->
			<xsl:call-template name="setTextAlignment">
				<xsl:with-param name="default">left</xsl:with-param>
			</xsl:call-template>
			
			<xsl:call-template name="setTableCellAttributes"/>
			
			<fo:block>
				<xsl:apply-templates/>
			</fo:block>
		</fo:table-cell>
	</xsl:template><xsl:template match="*[local-name()='td']" mode="requirement">
		<fo:table-cell text-align="{@align}" display-align="center" padding="1mm" padding-left="2mm"> <!-- border="0.5pt solid black" -->
			<xsl:if test="*[local-name() = 'table'][@class = 'recommendation' or @class='requirement' or @class='permission']">
				<xsl:attribute name="padding">0mm</xsl:attribute>
				<xsl:attribute name="padding-left">0mm</xsl:attribute>
			</xsl:if>
			<xsl:call-template name="setTextAlignment">
				<xsl:with-param name="default">left</xsl:with-param>
			</xsl:call-template>
			
			<xsl:if test="following-sibling::*[local-name()='td'] and not(preceding-sibling::*[local-name()='td'])">
				<xsl:attribute name="font-weight">bold</xsl:attribute>
			</xsl:if>
			
			<xsl:call-template name="setTableCellAttributes"/>
			
			<fo:block>			
				<xsl:apply-templates/>
			</fo:block>			
		</fo:table-cell>
	</xsl:template><xsl:template match="*[local-name() = 'p'][@class='RecommendationTitle' or @class = 'RecommendationTestTitle']" priority="2">
		<fo:block font-size="11pt">
			
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'p2'][ancestor::*[local-name() = 'table'][@class = 'recommendation' or @class='requirement' or @class='permission']]">
		<fo:block>
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'termexample']">
		<fo:block id="{@id}" xsl:use-attribute-sets="termexample-style">			
			<xsl:apply-templates select="*[local-name()='name']"/>
			<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'termexample']/*[local-name() = 'name']">
		<xsl:if test="normalize-space() != ''">
			<fo:inline xsl:use-attribute-sets="termexample-name-style">
				<xsl:apply-templates/>: 
			</fo:inline>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'termexample']/*[local-name() = 'p']">
		<xsl:variable name="element">inline
			
			
		</xsl:variable>		
		<xsl:choose>			
			<xsl:when test="contains($element, 'block')">
				<fo:block xsl:use-attribute-sets="example-p-style">
				
					
						
					<xsl:apply-templates/>
				</fo:block>
			</xsl:when>
			<xsl:otherwise>
				<fo:inline><xsl:apply-templates/></fo:inline>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name() = 'example']">
		
		<fo:block-container id="{@id}" xsl:use-attribute-sets="example-style">
		
			
				<xsl:if test="ancestor::rsd:ul or ancestor::rsd:ol">
					<xsl:attribute name="margin-top">6pt</xsl:attribute>
					<xsl:attribute name="margin-bottom">6pt</xsl:attribute>
				</xsl:if>
			
		
			<xsl:variable name="fo_element">
				<xsl:if test=".//*[local-name() = 'table'] or .//*[local-name() = 'dl'] or *[not(local-name() = 'name')][1][local-name() = 'sourcecode']">block</xsl:if> 
				inline
			</xsl:variable>
			
			<fo:block-container margin-left="0mm">
			
				<xsl:choose>
					
					<xsl:when test="contains(normalize-space($fo_element), 'block')">
					
						<!-- display name 'EXAMPLE' in a separate block  -->
						<fo:block>
							<xsl:apply-templates select="*[local-name()='name']">
								<xsl:with-param name="fo_element" select="$fo_element"/>
							</xsl:apply-templates>
						</fo:block>
						
						<fo:block-container xsl:use-attribute-sets="example-body-style">
							<fo:block-container margin-left="0mm" margin-right="0mm"> 
								<xsl:apply-templates select="node()[not(local-name() = 'name')]">
									<xsl:with-param name="fo_element" select="$fo_element"/>
								</xsl:apply-templates>
							</fo:block-container>
						</fo:block-container>
					</xsl:when> <!-- end block -->
					
					<xsl:otherwise> <!-- inline -->
					
						<!-- display 'EXAMPLE' and first element in the same line -->
						<fo:block>
							<xsl:apply-templates select="*[local-name()='name']">
								<xsl:with-param name="fo_element" select="$fo_element"/>
							</xsl:apply-templates>
							<fo:inline>
								<xsl:apply-templates select="*[not(local-name() = 'name')][1]">
									<xsl:with-param name="fo_element" select="$fo_element"/>
								</xsl:apply-templates>
							</fo:inline>
						</fo:block> 
						
						<xsl:if test="*[not(local-name() = 'name')][position() &gt; 1]">
							<!-- display further elements in blocks -->
							<fo:block-container xsl:use-attribute-sets="example-body-style">
								<fo:block-container margin-left="0mm" margin-right="0mm">
									<xsl:apply-templates select="*[not(local-name() = 'name')][position() &gt; 1]">
										<xsl:with-param name="fo_element" select="'block'"/>
									</xsl:apply-templates>
								</fo:block-container>
							</fo:block-container>
						</xsl:if>
					</xsl:otherwise> <!-- end inline -->
					
				</xsl:choose>
			</fo:block-container>
		</fo:block-container>
	</xsl:template><xsl:template match="*[local-name() = 'example']/*[local-name() = 'name']">
		<xsl:param name="fo_element">block</xsl:param>
	
		<xsl:choose>
			<xsl:when test="ancestor::*[local-name() = 'appendix']">
				<fo:inline>
					<xsl:apply-templates/>
				</fo:inline>
			</xsl:when>
			<xsl:when test="contains(normalize-space($fo_element), 'block')">
				<fo:block xsl:use-attribute-sets="example-name-style">
					<xsl:apply-templates/>
				</fo:block>
			</xsl:when>
			<xsl:otherwise>
				<fo:inline xsl:use-attribute-sets="example-name-style">
					<xsl:apply-templates/>: 
				</fo:inline>
			</xsl:otherwise>
		</xsl:choose>

	</xsl:template><xsl:template match="*[local-name() = 'example']/*[local-name() = 'p']">
		<xsl:param name="fo_element">block</xsl:param>
		
		<xsl:variable name="num"><xsl:number/></xsl:variable>
		<xsl:variable name="element">
			
				<xsl:choose>
					<xsl:when test="$num = 1 and not(contains($fo_element, 'block'))">inline</xsl:when>
					<xsl:otherwise>block</xsl:otherwise>
				</xsl:choose>
			
			<xsl:value-of select="$fo_element"/>
		</xsl:variable>		
		<xsl:choose>			
			<xsl:when test="starts-with(normalize-space($element), 'block')">
				<fo:block-container>
					<xsl:if test="ancestor::*[local-name() = 'li'] and contains(normalize-space($fo_element), 'block')">
						<xsl:attribute name="margin-left">0mm</xsl:attribute>
						<xsl:attribute name="margin-right">0mm</xsl:attribute>
					</xsl:if>
					<fo:block xsl:use-attribute-sets="example-p-style">
						
						
						<xsl:apply-templates/>
					</fo:block>
				</fo:block-container>
			</xsl:when>
			<xsl:otherwise>
				<fo:inline xsl:use-attribute-sets="example-p-style">
					<xsl:apply-templates/>					
				</fo:inline>
			</xsl:otherwise>
		</xsl:choose>	
	</xsl:template><xsl:template match="*[local-name() = 'termsource']" name="termsource">
		<fo:block xsl:use-attribute-sets="termsource-style">
			
			
			
			<!-- Example: [SOURCE: ISO 5127:2017, 3.1.6.02] -->			
			<xsl:variable name="termsource_text">
				<xsl:apply-templates/>
			</xsl:variable>
			<xsl:copy-of select="$termsource_text"/>
			<!-- <xsl:choose>
				<xsl:when test="starts-with(normalize-space($termsource_text), '[')">
					<xsl:copy-of select="$termsource_text"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="$namespace = 'bsi'">
						<xsl:choose>
							<xsl:when test="$document_type = 'PAS' and starts-with(*[local-name() = 'origin']/@citeas, '[')"><xsl:text>{</xsl:text></xsl:when>
							<xsl:otherwise><xsl:text>[</xsl:text></xsl:otherwise>
						</xsl:choose>
					</xsl:if>
					<xsl:if test="$namespace = 'gb' or $namespace = 'iso' or $namespace = 'iec' or $namespace = 'itu' or $namespace = 'unece' or $namespace = 'unece-rec' or $namespace = 'nist-cswp'  or $namespace = 'nist-sp' or $namespace = 'ogc-white-paper' or $namespace = 'csa' or $namespace = 'csd' or $namespace = 'm3d' or $namespace = 'iho' or $namespace = 'bipm' or $namespace = 'jcgm'">
						<xsl:text>[</xsl:text>
					</xsl:if>
					<xsl:copy-of select="$termsource_text"/>
					<xsl:if test="$namespace = 'bsi'">
						<xsl:choose>
							<xsl:when test="$document_type = 'PAS' and starts-with(*[local-name() = 'origin']/@citeas, '[')"><xsl:text>}</xsl:text></xsl:when>
							<xsl:otherwise><xsl:text>]</xsl:text></xsl:otherwise>
						</xsl:choose>
					</xsl:if>
					<xsl:if test="$namespace = 'gb' or $namespace = 'iso' or $namespace = 'iec' or $namespace = 'itu' or $namespace = 'unece' or $namespace = 'unece-rec' or $namespace = 'nist-cswp'  or $namespace = 'nist-sp' or $namespace = 'ogc-white-paper' or $namespace = 'csa' or $namespace = 'csd' or $namespace = 'm3d' or $namespace = 'iho' or $namespace = 'bipm' or $namespace = 'jcgm'">
						<xsl:text>]</xsl:text>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose> -->
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'termsource']/text()[starts-with(., '[SOURCE: Adapted from: ') or     starts-with(., '[SOURCE: Quoted from: ') or     starts-with(., '[SOURCE: Modified from: ')]" priority="2">
		<xsl:text>[</xsl:text><xsl:value-of select="substring-after(., '[SOURCE: ')"/>
	</xsl:template><xsl:template match="*[local-name() = 'termsource']/text()">
		<xsl:if test="normalize-space() != ''">
			<xsl:value-of select="."/>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'termsource']/*[local-name() = 'strong'][1][following-sibling::*[1][local-name() = 'origin']]/text()">
		<fo:inline xsl:use-attribute-sets="termsource-text-style">
			<xsl:value-of select="."/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'origin']">
		<fo:basic-link internal-destination="{@bibitemid}" fox:alt-text="{@citeas}">
			<xsl:if test="normalize-space(@citeas) = ''">
				<xsl:attribute name="fox:alt-text"><xsl:value-of select="@bibitemid"/></xsl:attribute>
			</xsl:if>
			<fo:inline xsl:use-attribute-sets="origin-style">
				<xsl:apply-templates/>
			</fo:inline>
		</fo:basic-link>
	</xsl:template><xsl:template match="*[local-name() = 'modification']">
		<xsl:variable name="title-modified">
			<xsl:call-template name="getLocalizedString">
				<xsl:with-param name="key">modified</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		
    <xsl:variable name="text"><xsl:apply-templates/></xsl:variable>
		<xsl:choose>
			<xsl:when test="$lang = 'zh'"><xsl:text>ã</xsl:text><xsl:value-of select="$title-modified"/><xsl:if test="normalize-space($text) != ''"><xsl:text>â</xsl:text></xsl:if></xsl:when>
			<xsl:otherwise><xsl:text>, </xsl:text><xsl:value-of select="$title-modified"/><xsl:if test="normalize-space($text) != ''"><xsl:text> â </xsl:text></xsl:if></xsl:otherwise>
		</xsl:choose>
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name() = 'modification']/*[local-name() = 'p']">
		<fo:inline><xsl:apply-templates/></fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'modification']/text()">
		<xsl:if test="normalize-space() != ''">
			<!-- <xsl:value-of select="."/> -->
			<xsl:call-template name="text"/>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'quote']">		
		<fo:block-container margin-left="0mm">
			<xsl:if test="parent::*[local-name() = 'note']">
				<xsl:if test="not(ancestor::*[local-name() = 'table'])">
					<xsl:attribute name="margin-left">5mm</xsl:attribute>
				</xsl:if>
			</xsl:if>
			
			
			<fo:block-container margin-left="0mm">
				<fo:block-container xsl:use-attribute-sets="quote-style">
					
					<fo:block-container margin-left="0mm" margin-right="0mm">
						<fo:block role="BlockQuote">
							<xsl:apply-templates select="./node()[not(local-name() = 'author') and not(local-name() = 'source')]"/> <!-- process all nested nodes, except author and source -->
						</fo:block>
					</fo:block-container>
				</fo:block-container>
				<xsl:if test="*[local-name() = 'author'] or *[local-name() = 'source']">
					<fo:block xsl:use-attribute-sets="quote-source-style">
						<!-- â ISO, ISO 7301:2011, Clause 1 -->
						<xsl:apply-templates select="*[local-name() = 'author']"/>
						<xsl:apply-templates select="*[local-name() = 'source']"/>				
					</fo:block>
				</xsl:if>
				
			</fo:block-container>
		</fo:block-container>
	</xsl:template><xsl:template match="*[local-name() = 'source']">
		<xsl:if test="../*[local-name() = 'author']">
			<xsl:text>, </xsl:text>
		</xsl:if>
		<fo:basic-link internal-destination="{@bibitemid}" fox:alt-text="{@citeas}">
			<xsl:apply-templates/>
		</fo:basic-link>
	</xsl:template><xsl:template match="*[local-name() = 'author']">
		<xsl:text>â </xsl:text>
		<xsl:apply-templates/>
	</xsl:template><xsl:variable name="bibitems_">
		<xsl:for-each select="//*[local-name() = 'bibitem']">
			<xsl:copy-of select="."/>
		</xsl:for-each>
	</xsl:variable><xsl:variable name="bibitems" select="xalan:nodeset($bibitems_)"/><xsl:variable name="bibitems_hidden_">
		<xsl:for-each select="//*[local-name() = 'bibitem'][@hidden='true']">
			<xsl:copy-of select="."/>
		</xsl:for-each>
		<xsl:for-each select="//*[local-name() = 'references'][@hidden='true']//*[local-name() = 'bibitem']">
			<xsl:copy-of select="."/>
		</xsl:for-each>
	</xsl:variable><xsl:variable name="bibitems_hidden" select="xalan:nodeset($bibitems_hidden_)"/><xsl:template match="*[local-name() = 'eref']">
		<xsl:variable name="current_bibitemid" select="@bibitemid"/>
		<!-- <xsl:variable name="external-destination" select="normalize-space(key('bibitems', $current_bibitemid)/*[local-name() = 'uri'][@type = 'citation'])"/> -->
		<xsl:variable name="external-destination" select="normalize-space($bibitems/*[local-name() ='bibitem'][@id = $current_bibitemid]/*[local-name() = 'uri'][@type = 'citation'])"/>
		<xsl:choose>
			<!-- <xsl:when test="$external-destination != '' or not(key('bibitems_hidden', $current_bibitemid))"> --> <!-- if in the bibliography there is the item with @bibitemid (and not hidden), then create link (internal to the bibitem or external) -->
			<xsl:when test="$external-destination != '' or not($bibitems_hidden/*[local-name() ='bibitem'][@id = $current_bibitemid])"> <!-- if in the bibliography there is the item with @bibitemid (and not hidden), then create link (internal to the bibitem or external) -->
				<fo:inline xsl:use-attribute-sets="eref-style">
					<xsl:if test="@type = 'footnote'">
						<xsl:attribute name="keep-together.within-line">always</xsl:attribute>
						<xsl:attribute name="keep-with-previous.within-line">always</xsl:attribute>
						<xsl:attribute name="vertical-align">super</xsl:attribute>
						<xsl:attribute name="font-size">80%</xsl:attribute>
						
					</xsl:if>	
					
					<xsl:variable name="citeas" select="java:replaceAll(java:java.lang.String.new(@citeas),'^\[?(.+?)\]?$','$1')"/> <!-- remove leading and trailing brackets -->
					<xsl:variable name="text" select="normalize-space()"/>
					
					
					
					
					
					<fo:basic-link fox:alt-text="{@citeas}">
						<xsl:if test="normalize-space(@citeas) = ''">
							<xsl:attribute name="fox:alt-text"><xsl:value-of select="."/></xsl:attribute>
						</xsl:if>
						<xsl:if test="@type = 'inline'">
							
							
							
						</xsl:if>
						
						<xsl:choose>
							<xsl:when test="$external-destination != ''"> <!-- external hyperlink -->
								<xsl:attribute name="external-destination"><xsl:value-of select="$external-destination"/></xsl:attribute>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="internal-destination"><xsl:value-of select="@bibitemid"/></xsl:attribute>
							</xsl:otherwise>
						</xsl:choose>
						
						<xsl:apply-templates/>
					</fo:basic-link>
					
				</fo:inline>
			</xsl:when>
			<xsl:otherwise> <!-- if there is key('bibitems_hidden', $current_bibitemid) -->
			
				<!-- if in bibitem[@hidden='true'] there is url[@type='src'], then create hyperlink  -->
				<xsl:variable name="uri_src" select="normalize-space($bibitems_hidden/*[local-name() ='bibitem'][@id = $current_bibitemid]/*[local-name() = 'uri'][@type = 'src'])"/>
				<xsl:choose>
					<xsl:when test="$uri_src != ''">
						<fo:basic-link external-destination="{$uri_src}" fox:alt-text="{$uri_src}"><xsl:apply-templates/></fo:basic-link>
					</xsl:when>
					<xsl:otherwise><fo:inline><xsl:apply-templates/></fo:inline></xsl:otherwise>
				</xsl:choose>
				
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name() = 'tab']">
		<!-- zero-space char -->
		<xsl:variable name="depth">
			<xsl:call-template name="getLevel">
				<xsl:with-param name="depth" select="../@depth"/>
			</xsl:call-template>
		</xsl:variable>
		
		<xsl:variable name="padding">
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			1.5
			
			
			
			
		</xsl:variable>
		
		<xsl:variable name="padding-right">
			<xsl:choose>
				<xsl:when test="normalize-space($padding) = ''">0</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="normalize-space($padding)"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:choose>
			<xsl:when test="$lang = 'zh'">
				<fo:inline><xsl:value-of select="$tab_zh"/></fo:inline>
			</xsl:when>
			<xsl:when test="../../@inline-header = 'true'">
				<fo:inline font-size="90%">
					<xsl:call-template name="insertNonBreakSpaces">
						<xsl:with-param name="count" select="$padding-right"/>
					</xsl:call-template>
				</fo:inline>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="direction"><xsl:if test="$lang = 'ar'"><xsl:value-of select="$RLM"/></xsl:if></xsl:variable>
				<fo:inline padding-right="{$padding-right}mm"><xsl:value-of select="$direction"/>â</fo:inline>
			</xsl:otherwise>
		</xsl:choose>
		
	</xsl:template><xsl:template name="insertNonBreakSpaces">
		<xsl:param name="count"/>
		<xsl:if test="$count &gt; 0">
			<xsl:text>Â </xsl:text>
			<xsl:call-template name="insertNonBreakSpaces">
				<xsl:with-param name="count" select="$count - 1"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'preferred']">
		<xsl:variable name="level">
			<xsl:call-template name="getLevel"/>
		</xsl:variable>
		<xsl:variable name="font-size">
			inherit
		</xsl:variable>
		<xsl:variable name="levelTerm">
			<xsl:call-template name="getLevelTermName"/>
		</xsl:variable>
		<fo:block font-size="{normalize-space($font-size)}" role="H{$levelTerm}" xsl:use-attribute-sets="preferred-block-style">
		
			
			
			<xsl:if test="parent::*[local-name() = 'term'] and not(preceding-sibling::*[local-name() = 'preferred'])"> <!-- if first preffered in term, then display term's name -->
				<fo:block xsl:use-attribute-sets="term-name-style">
					<xsl:apply-templates select="ancestor::*[local-name() = 'term'][1]/*[local-name() = 'name']"/>
				</fo:block>
			</xsl:if>
			
			<fo:block xsl:use-attribute-sets="preferred-term-style">
				<xsl:call-template name="setStyle_preferred"/>
				<xsl:apply-templates/>
			</fo:block>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'domain']">
		<fo:inline xsl:use-attribute-sets="domain-style">&lt;<xsl:apply-templates/>&gt;</fo:inline>
		<xsl:text> </xsl:text>
	</xsl:template><xsl:template match="*[local-name() = 'admitted']">
		<fo:block xsl:use-attribute-sets="admitted-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'deprecates']">
		<xsl:variable name="title-deprecated">
			<xsl:call-template name="getLocalizedString">
				<xsl:with-param name="key">deprecated</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<fo:block xsl:use-attribute-sets="deprecates-style">
			<xsl:value-of select="$title-deprecated"/>: <xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template name="setStyle_preferred">
		<xsl:if test="*[local-name() = 'strong']">
			<xsl:attribute name="font-weight">normal</xsl:attribute>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'preferred']/text()[contains(., ';')] | *[local-name() = 'preferred']/*[local-name() = 'strong']/text()[contains(., ';')]">
		<xsl:value-of select="java:replaceAll(java:java.lang.String.new(.), ';', $linebreak)"/>
	</xsl:template><xsl:template match="*[local-name() = 'definition']">
		<fo:block xsl:use-attribute-sets="definition-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'definition'][preceding-sibling::*[local-name() = 'domain']]">
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name() = 'definition'][preceding-sibling::*[local-name() = 'domain']]/*[local-name() = 'p'][1]">
		<fo:inline> <xsl:apply-templates/></fo:inline>
		<fo:block/>
	</xsl:template><xsl:template match="/*/*[local-name() = 'sections']/*" priority="2">
		
		<fo:block>
			<xsl:call-template name="setId"/>
			
			
			
			
			
						
			
				<xsl:variable name="pos"><xsl:number count="rsd:sections/rsd:clause[not(@type='scope') and not(@type='conformance')]"/></xsl:variable> <!--  | rsd:sections/rsd:terms -->
				<xsl:if test="$pos &gt;= 2">
					<xsl:attribute name="space-before">18pt</xsl:attribute>
				</xsl:if>
			
						
			
			
			<xsl:apply-templates/>
		</fo:block>
		
		
		
	</xsl:template><xsl:template match="//*[contains(local-name(), '-standard')]/*[local-name() = 'preface']/*" priority="2"> <!-- /*/*[local-name() = 'preface']/* -->
		<fo:block break-after="page"/>
		<fo:block>
			<xsl:call-template name="setId"/>
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'clause']">
		<fo:block>
			<xsl:call-template name="setId"/>
			
			
			
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'definitions']">
		<fo:block id="{@id}">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'annex']">
		<fo:block break-after="page"/>
		<fo:block id="{@id}">
			
		</fo:block>
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name() = 'review']"> <!-- 'review' will be processed in mn2pdf/review.xsl -->
		<!-- comment 2019-11-29 -->
		<!-- <fo:block font-weight="bold">Review:</fo:block>
		<xsl:apply-templates /> -->
		
		<xsl:variable name="id_from" select="normalize-space(current()/@from)"/>

		<xsl:choose>
			<!-- if there isn't the attribute '@from', then -->
			<xsl:when test="$id_from = ''">
				<fo:block id="{@id}" font-size="1pt"><xsl:value-of select="$hair_space"/></fo:block>
			</xsl:when>
			<!-- if there isn't element with id 'from', then create 'bookmark' here -->
			<xsl:when test="not(ancestor::*[contains(local-name(), '-standard')]//*[@id = $id_from])">
				<fo:block id="{@from}" font-size="1pt"><xsl:value-of select="$hair_space"/></fo:block>
			</xsl:when>
		</xsl:choose>
		
	</xsl:template><xsl:template match="*[local-name() = 'name']/text()">
		<!-- 0xA0 to space replacement -->
		<xsl:value-of select="java:replaceAll(java:java.lang.String.new(.),'Â ',' ')"/>
	</xsl:template><xsl:variable name="ul_labels_">
		
				<label level="1" font-size="75%">o</label> <!-- white circle -->
				<label level="2">â</label> <!-- em dash -->
				<label level="3" font-size="140%">â¢</label> <!-- bullet -->
			
	</xsl:variable><xsl:variable name="ul_labels" select="xalan:nodeset($ul_labels_)"/><xsl:template name="setULLabel">
		<xsl:variable name="list_level_" select="count(ancestor::*[local-name() = 'ul']) + count(ancestor::*[local-name() = 'ol'])"/>
		<xsl:variable name="list_level">
			<xsl:choose>
				<xsl:when test="$list_level_ &lt;= 3"><xsl:value-of select="$list_level_"/></xsl:when>
				<xsl:otherwise><xsl:value-of select="$list_level_ mod 3"/></xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="$ul_labels/label[not(@level)]"> <!-- one label for all levels -->
				<xsl:apply-templates select="$ul_labels/label[not(@level)]" mode="ul_labels"/>
			</xsl:when>
			<xsl:when test="$list_level mod 3 = 0">
				<xsl:apply-templates select="$ul_labels/label[@level = 3]" mode="ul_labels"/>
			</xsl:when>
			<xsl:when test="$list_level mod 2 = 0">
				<xsl:apply-templates select="$ul_labels/label[@level = 2]" mode="ul_labels"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:apply-templates select="$ul_labels/label[@level = 1]" mode="ul_labels"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="label" mode="ul_labels">
		<xsl:copy-of select="@*[not(local-name() = 'level')]"/>
		<xsl:value-of select="."/>
	</xsl:template><xsl:template name="getListItemFormat">
		<!-- Example: for BSI <?list-type loweralpha?> -->
		<xsl:variable name="processing_instruction_type" select="normalize-space(../preceding-sibling::*[1]/processing-instruction('list-type'))"/>
		<xsl:choose>
			<xsl:when test="local-name(..) = 'ul'">
				<xsl:choose>
					<xsl:when test="normalize-space($processing_instruction_type) = 'simple'"/>
					<xsl:otherwise><xsl:call-template name="setULLabel"/></xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise> <!-- for ordered lists 'ol' -->
			
				<!-- Example: for BSI <?list-start 2?> -->
				<xsl:variable name="processing_instruction_start" select="normalize-space(../preceding-sibling::*[1]/processing-instruction('list-start'))"/>

				<xsl:variable name="start_value">
					<xsl:choose>
						<xsl:when test="normalize-space($processing_instruction_start) != ''">
							<xsl:value-of select="number($processing_instruction_start) - 1"/><!-- if start="3" then start_value=2 + xsl:number(1) = 3 -->
						</xsl:when>
						<xsl:when test="normalize-space(../@start) != ''">
							<xsl:value-of select="number(../@start) - 1"/><!-- if start="3" then start_value=2 + xsl:number(1) = 3 -->
						</xsl:when>
						<xsl:otherwise>0</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				
				<xsl:variable name="curr_value"><xsl:number/></xsl:variable>
				
				<xsl:variable name="type">
					<xsl:choose>
						<xsl:when test="normalize-space($processing_instruction_type) != ''"><xsl:value-of select="$processing_instruction_type"/></xsl:when>
						<xsl:when test="normalize-space(../@type) != ''"><xsl:value-of select="../@type"/></xsl:when>
						
						<xsl:otherwise> <!-- if no @type or @class = 'steps' -->
							
							<xsl:variable name="list_level_" select="count(ancestor::*[local-name() = 'ul']) + count(ancestor::*[local-name() = 'ol'])"/>
							<xsl:variable name="list_level">
								<xsl:choose>
									<xsl:when test="$list_level_ &lt;= 5"><xsl:value-of select="$list_level_"/></xsl:when>
									<xsl:otherwise><xsl:value-of select="$list_level_ mod 5"/></xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							
							<xsl:choose>
								<xsl:when test="$list_level mod 5 = 0">roman_upper</xsl:when> <!-- level 5 -->
								<xsl:when test="$list_level mod 4 = 0">alphabet_upper</xsl:when> <!-- level 4 -->
								<xsl:when test="$list_level mod 3 = 0">roman</xsl:when> <!-- level 3 -->
								<xsl:when test="$list_level mod 2 = 0 and ancestor::*/@class = 'steps'">alphabet</xsl:when> <!-- level 2 and @class = 'steps'-->
								<xsl:when test="$list_level mod 2 = 0">arabic</xsl:when> <!-- level 2 -->
								<xsl:otherwise> <!-- level 1 -->
									<xsl:choose>
										<xsl:when test="ancestor::*/@class = 'steps'">arabic</xsl:when>
										<xsl:otherwise>alphabet</xsl:otherwise>
									</xsl:choose>
								</xsl:otherwise>
							</xsl:choose>
							
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				
				<xsl:variable name="format">
					<xsl:choose>
						<xsl:when test="$type = 'arabic'">
							1.
						</xsl:when>
						<xsl:when test="$type = 'alphabet'">
							a.
						</xsl:when>
						<xsl:when test="$type = 'alphabet_upper'">
							A.
						</xsl:when>
						<xsl:when test="$type = 'roman'">
							i.
						</xsl:when>
						<xsl:when test="$type = 'roman_upper'">I.</xsl:when>
						<xsl:otherwise>1.</xsl:otherwise> <!-- for any case, if $type has non-determined value, not using -->
					</xsl:choose>
				</xsl:variable>
				
				<xsl:number value="$start_value + $curr_value" format="{normalize-space($format)}" lang="en"/>
				
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name() = 'ul'] | *[local-name() = 'ol']">
		<xsl:choose>
			<xsl:when test="parent::*[local-name() = 'note'] or parent::*[local-name() = 'termnote']">
				<fo:block-container>
					<xsl:attribute name="margin-left">
						<xsl:choose>
							<xsl:when test="not(ancestor::*[local-name() = 'table'])"><xsl:value-of select="$note-body-indent"/></xsl:when>
							<xsl:otherwise><xsl:value-of select="$note-body-indent-table"/></xsl:otherwise>
						</xsl:choose>
					</xsl:attribute>
					
					
					
					<fo:block-container margin-left="0mm">
						<fo:block>
							<xsl:apply-templates select="." mode="list"/>
						</fo:block>
					</fo:block-container>
				</fo:block-container>
			</xsl:when>
			<xsl:otherwise>
				<fo:block>
					<xsl:apply-templates select="." mode="list"/>
				</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name()='ul'] | *[local-name()='ol']" mode="list" name="list">
	
		<xsl:apply-templates select="*[local-name() = 'name']">
			<xsl:with-param name="process">true</xsl:with-param>
		</xsl:apply-templates>
	
		<fo:list-block xsl:use-attribute-sets="list-style">
		
			
			
			
			
			

			
			
			<xsl:if test="*[local-name() = 'name']">
				<xsl:attribute name="margin-top">0pt</xsl:attribute>
			</xsl:if>
			
			<xsl:apply-templates select="node()[not(local-name() = 'note')]"/>
		</fo:list-block>
		<!-- <xsl:for-each select="./iho:note">
			<xsl:call-template name="note"/>
		</xsl:for-each> -->
		<xsl:apply-templates select="./*[local-name() = 'note']"/>
	</xsl:template><xsl:template match="*[local-name() = 'ol' or local-name() = 'ul']/*[local-name() = 'name']">
		<xsl:param name="process">false</xsl:param>
		<xsl:if test="$process = 'true'">
			<fo:block xsl:use-attribute-sets="list-name-style">
				<xsl:apply-templates/>
			</fo:block>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name()='li']">
		<fo:list-item xsl:use-attribute-sets="list-item-style">
			<xsl:copy-of select="@id"/>
			
			
			
			<fo:list-item-label end-indent="label-end()">
				<fo:block xsl:use-attribute-sets="list-item-label-style">
				
					
				
					
				
					<!-- if 'p' contains all text in 'add' first and last elements in first p are 'add' -->
					<xsl:if test="*[1][count(node()[normalize-space() != '']) = 1 and *[local-name() = 'add']]">
						<xsl:call-template name="append_add-style"/>
					</xsl:if>
					
					<xsl:call-template name="getListItemFormat"/>
				</fo:block>
			</fo:list-item-label>
			<fo:list-item-body start-indent="body-start()" xsl:use-attribute-sets="list-item-body-style">
				<fo:block>
				
					
				
					
				
					<xsl:apply-templates/>
				
					<!-- <xsl:apply-templates select="node()[not(local-name() = 'note')]" />
					
					<xsl:for-each select="./bsi:note">
						<xsl:call-template name="note"/>
					</xsl:for-each> -->
				</fo:block>
			</fo:list-item-body>
		</fo:list-item>
	</xsl:template><xsl:variable name="index" select="document($external_index)"/><xsl:variable name="bookmark_in_fn">
		<xsl:for-each select="//*[local-name() = 'bookmark'][ancestor::*[local-name() = 'fn']]">
			<bookmark><xsl:value-of select="@id"/></bookmark>
		</xsl:for-each>
	</xsl:variable><xsl:template match="@*|node()" mode="index_add_id">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="index_add_id"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'xref']" mode="index_add_id">
		<xsl:variable name="id">
			<xsl:call-template name="generateIndexXrefId"/>
		</xsl:variable>
		<xsl:copy> <!-- add id to xref -->
			<xsl:apply-templates select="@*" mode="index_add_id"/>
			<xsl:attribute name="id">
				<xsl:value-of select="$id"/>
			</xsl:attribute>
			<xsl:apply-templates mode="index_add_id"/>
		</xsl:copy>
		<!-- split <xref target="bm1" to="End" pagenumber="true"> to two xref:
		<xref target="bm1" pagenumber="true"> and <xref target="End" pagenumber="true"> -->
		<xsl:if test="@to">
			<xsl:value-of select="$en_dash"/>
			<xsl:copy>
				<xsl:copy-of select="@*"/>
				<xsl:attribute name="target"><xsl:value-of select="@to"/></xsl:attribute>
				<xsl:attribute name="id">
					<xsl:value-of select="$id"/><xsl:text>_to</xsl:text>
				</xsl:attribute>
				<xsl:apply-templates mode="index_add_id"/>
			</xsl:copy>
		</xsl:if>
	</xsl:template><xsl:template match="@*|node()" mode="index_update">
		<xsl:copy>
				<xsl:apply-templates select="@*|node()" mode="index_update"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'indexsect']//*[local-name() = 'li']" mode="index_update">
		<xsl:copy>
			<xsl:apply-templates select="@*" mode="index_update"/>
		<xsl:apply-templates select="node()[1]" mode="process_li_element"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'indexsect']//*[local-name() = 'li']/node()" mode="process_li_element" priority="2">
		<xsl:param name="element"/>
		<xsl:param name="remove" select="'false'"/>
		<xsl:param name="target"/>
		<!-- <node></node> -->
		<xsl:choose>
			<xsl:when test="self::text()  and (normalize-space(.) = ',' or normalize-space(.) = $en_dash) and $remove = 'true'">
				<!-- skip text (i.e. remove it) and process next element -->
				<!-- [removed_<xsl:value-of select="."/>] -->
				<xsl:apply-templates select="following-sibling::node()[1]" mode="process_li_element">
					<xsl:with-param name="target"><xsl:value-of select="$target"/></xsl:with-param>
				</xsl:apply-templates>
			</xsl:when>
			<xsl:when test="self::text()">
				<xsl:value-of select="."/>
				<xsl:apply-templates select="following-sibling::node()[1]" mode="process_li_element"/>
			</xsl:when>
			<xsl:when test="self::* and local-name(.) = 'xref'">
				<xsl:variable name="id" select="@id"/>
				<xsl:variable name="page" select="$index//item[@id = $id]"/>
				<xsl:variable name="id_next" select="following-sibling::*[local-name() = 'xref'][1]/@id"/>
				<xsl:variable name="page_next" select="$index//item[@id = $id_next]"/>
				
				<xsl:variable name="id_prev" select="preceding-sibling::*[local-name() = 'xref'][1]/@id"/>
				<xsl:variable name="page_prev" select="$index//item[@id = $id_prev]"/>
				
				<xsl:choose>
					<!-- 2nd pass -->
					<!-- if page is equal to page for next and page is not the end of range -->
					<xsl:when test="$page != '' and $page_next != '' and $page = $page_next and not(contains($page, '_to'))">  <!-- case: 12, 12-14 -->
						<!-- skip element (i.e. remove it) and remove next text ',' -->
						<!-- [removed_xref] -->
						
						<xsl:apply-templates select="following-sibling::node()[1]" mode="process_li_element">
							<xsl:with-param name="remove">true</xsl:with-param>
							<xsl:with-param name="target">
								<xsl:choose>
									<xsl:when test="$target != ''"><xsl:value-of select="$target"/></xsl:when>
									<xsl:otherwise><xsl:value-of select="@target"/></xsl:otherwise>
								</xsl:choose>
							</xsl:with-param>
						</xsl:apply-templates>
					</xsl:when>
					
					<xsl:when test="$page != '' and $page_prev != '' and $page = $page_prev and contains($page_prev, '_to')"> <!-- case: 12-14, 14, ... -->
						<!-- remove xref -->
						<xsl:apply-templates select="following-sibling::node()[1]" mode="process_li_element">
							<xsl:with-param name="remove">true</xsl:with-param>
						</xsl:apply-templates>
					</xsl:when>

					<xsl:otherwise>
						<xsl:apply-templates select="." mode="xref_copy">
							<xsl:with-param name="target" select="$target"/>
						</xsl:apply-templates>
						<xsl:apply-templates select="following-sibling::node()[1]" mode="process_li_element"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="self::* and local-name(.) = 'ul'">
				<!-- ul -->
				<xsl:apply-templates select="." mode="index_update"/>
			</xsl:when>
			<xsl:otherwise>
			 <xsl:apply-templates select="." mode="xref_copy">
					<xsl:with-param name="target" select="$target"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="following-sibling::node()[1]" mode="process_li_element"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="@*|node()" mode="xref_copy">
		<xsl:param name="target"/>
		<xsl:copy>
			<xsl:apply-templates select="@*" mode="xref_copy"/>
			<xsl:if test="$target != '' and not(xalan:nodeset($bookmark_in_fn)//bookmark[. = $target])">
				<xsl:attribute name="target"><xsl:value-of select="$target"/></xsl:attribute>
			</xsl:if>
			<xsl:apply-templates select="node()" mode="xref_copy"/>
		</xsl:copy>
	</xsl:template><xsl:template name="generateIndexXrefId">
		<xsl:variable name="level" select="count(ancestor::*[local-name() = 'ul'])"/>
		
		<xsl:variable name="docid">
			<xsl:call-template name="getDocumentId"/>
		</xsl:variable>
		<xsl:variable name="item_number">
			<xsl:number count="*[local-name() = 'li'][ancestor::*[local-name() = 'indexsect']]" level="any"/>
		</xsl:variable>
		<xsl:variable name="xref_number"><xsl:number count="*[local-name() = 'xref']"/></xsl:variable>
		<xsl:value-of select="concat($docid, '_', $item_number, '_', $xref_number)"/> <!-- $level, '_',  -->
	</xsl:template><xsl:template match="*[local-name() = 'indexsect']/*[local-name() = 'title']" priority="4">
		<fo:block xsl:use-attribute-sets="indexsect-title-style">
			<!-- Index -->
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'indexsect']/*[local-name() = 'clause']/*[local-name() = 'title']" priority="4">
		<!-- Letter A, B, C, ... -->
		<fo:block xsl:use-attribute-sets="indexsect-clause-title-style">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'indexsect']/*[local-name() = 'clause']" priority="4">
		<xsl:apply-templates/>
		<fo:block>
			<xsl:if test="following-sibling::*[local-name() = 'clause']">
				<fo:block>Â </fo:block>
			</xsl:if>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'indexsect']//*[local-name() = 'ul']" priority="4">
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name() = 'indexsect']//*[local-name() = 'li']" priority="4">
		<xsl:variable name="level" select="count(ancestor::*[local-name() = 'ul'])"/>
		<fo:block start-indent="{5 * $level}mm" text-indent="-5mm">
			
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'indexsect']//*[local-name() = 'li']/text()">
		<!-- to split by '_' and other chars -->
		<xsl:call-template name="add-zero-spaces-java"/>
	</xsl:template><xsl:template match="*[local-name() = 'table']/*[local-name() = 'bookmark']" priority="2"/><xsl:template match="*[local-name() = 'bookmark']" name="bookmark">
		<!-- <fo:inline id="{@id}" font-size="1pt"/> -->
		<fo:inline id="{@id}" font-size="1pt"><xsl:value-of select="$hair_space"/></fo:inline>
		<!-- we need to add zero-width space, otherwise this fo:inline is missing in IF xml -->
		<xsl:if test="not(following-sibling::node()[normalize-space() != ''])"><fo:inline font-size="1pt">Â </fo:inline></xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'errata']">
		<!-- <row>
					<date>05-07-2013</date>
					<type>Editorial</type>
					<change>Changed CA-9 Priority Code from P1 to P2 in <xref target="tabled2"/>.</change>
					<pages>D-3</pages>
				</row>
		-->
		<fo:table table-layout="fixed" width="100%" font-size="10pt" border="1pt solid black">
			<fo:table-column column-width="20mm"/>
			<fo:table-column column-width="23mm"/>
			<fo:table-column column-width="107mm"/>
			<fo:table-column column-width="15mm"/>
			<fo:table-body>
				<fo:table-row text-align="center" font-weight="bold" background-color="black" color="white">
					
					<fo:table-cell border="1pt solid black"><fo:block>Date</fo:block></fo:table-cell>
					<fo:table-cell border="1pt solid black"><fo:block>Type</fo:block></fo:table-cell>
					<fo:table-cell border="1pt solid black"><fo:block>Change</fo:block></fo:table-cell>
					<fo:table-cell border="1pt solid black"><fo:block>Pages</fo:block></fo:table-cell>
				</fo:table-row>
				<xsl:apply-templates/>
			</fo:table-body>
		</fo:table>
	</xsl:template><xsl:template match="*[local-name() = 'errata']/*[local-name() = 'row']">
		<fo:table-row>
			<xsl:apply-templates/>
		</fo:table-row>
	</xsl:template><xsl:template match="*[local-name() = 'errata']/*[local-name() = 'row']/*">
		<fo:table-cell border="1pt solid black" padding-left="1mm" padding-top="0.5mm">
			<fo:block><xsl:apply-templates/></fo:block>
		</fo:table-cell>
	</xsl:template><xsl:template match="*[local-name() = 'references'][@hidden='true']" priority="3"/><xsl:template match="*[local-name() = 'bibitem'][@hidden='true']" priority="3"/><xsl:template match="*[local-name() = 'bibitem'][starts-with(@id, 'hidden_bibitem_')]" priority="3"/><xsl:template match="*[local-name() = 'references'][@normative='true']" priority="2">
		
		
		
		<fo:block id="{@id}">
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'references']">
		<xsl:if test="not(ancestor::*[local-name() = 'annex'])">
			
					<fo:block break-after="page"/>
				
		</xsl:if>
		
		<!-- <xsl:if test="ancestor::*[local-name() = 'annex']">
			<xsl:if test="$namespace = 'csa' or $namespace = 'csd' or $namespace = 'gb' or $namespace = 'iec' or $namespace = 'iso' or $namespace = 'itu'">
				<fo:block break-after="page"/>
			</xsl:if>
		</xsl:if> -->
		
		<fo:block id="{@id}" xsl:use-attribute-sets="references-non-normative-style">
			<xsl:apply-templates/>
		</fo:block>
		
		
		
		
	</xsl:template><xsl:template match="*[local-name() = 'bibitem']">
		<xsl:call-template name="bibitem"/>
	</xsl:template><xsl:template match="*[local-name() = 'references'][@normative='true']/*[local-name() = 'bibitem']" name="bibitem" priority="2">
		
				<fo:block id="{@id}" xsl:use-attribute-sets="bibitem-normative-style">
					<xsl:call-template name="processBibitem"/>
				</fo:block>
			

	</xsl:template><xsl:template match="*[local-name() = 'references'][not(@normative='true')]/*[local-name() = 'bibitem']" name="bibitem_non_normative" priority="2">
		
		
				<fo:list-block id="{@id}" xsl:use-attribute-sets="bibitem-non-normative-list-style">
					<fo:list-item>
						<fo:list-item-label end-indent="label-end()">
							<fo:block>
								<fo:inline>
									
										<xsl:number format="1." count="*[local-name()='bibitem'][not(@hidden = 'true')]"/>
									
								</fo:inline>
							</fo:block>
						</fo:list-item-label>
						<fo:list-item-body start-indent="body-start()">
							<fo:block>
								<xsl:variable name="docidentifier">
									<xsl:choose>
										<xsl:when test="rsd:docidentifier/@type = 'metanorma'"/>
										<xsl:otherwise>
											<xsl:value-of select="rsd:docidentifier[not(@type = 'metanorma-ordinal')]"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:value-of select="$docidentifier"/>
								<xsl:if test="normalize-space($docidentifier) != '' and rsd:formattedref">
									<xsl:text>, </xsl:text>
								</xsl:if>
								<xsl:apply-templates select="rsd:formattedref"/>
							</fo:block>
						</fo:list-item-body>
					</fo:list-item>
				</fo:list-block>
				 <!-- rsd -->
			
		
	</xsl:template><xsl:template name="processBibitem">
		
		
				<!-- start RSD bibitem processing -->
				<xsl:if test=".//rsd:fn">
					<xsl:attribute name="line-height-shift-adjustment">disregard-shifts</xsl:attribute>
				</xsl:if>
				<xsl:variable name="docidentifier" select="rsd:docidentifier"/>
				<xsl:value-of select="$docidentifier"/>
				<xsl:apply-templates select="rsd:note"/>
				<xsl:if test="normalize-space($docidentifier) != '' and rsd:formattedref">, </xsl:if>
				<xsl:apply-templates select="rsd:formattedref"/>	
				<!-- END RSD bibitem processing -->
			
	</xsl:template><xsl:template name="processBibitemDocId">
		<xsl:variable name="_doc_ident" select="*[local-name() = 'docidentifier'][not(@type = 'DOI' or @type = 'metanorma' or @type = 'metanorma-ordinal' or @type = 'ISSN' or @type = 'ISBN' or @type = 'rfc-anchor')]"/>
		<xsl:choose>
			<xsl:when test="normalize-space($_doc_ident) != ''">
				<!-- <xsl:variable name="type" select="*[local-name() = 'docidentifier'][not(@type = 'DOI' or @type = 'metanorma' or @type = 'ISSN' or @type = 'ISBN' or @type = 'rfc-anchor')]/@type"/>
				<xsl:if test="$type != '' and not(contains($_doc_ident, $type))">
					<xsl:value-of select="$type"/><xsl:text> </xsl:text>
				</xsl:if> -->
				<xsl:value-of select="$_doc_ident"/>
			</xsl:when>
			<xsl:otherwise>
				<!-- <xsl:variable name="type" select="*[local-name() = 'docidentifier'][not(@type = 'metanorma')]/@type"/>
				<xsl:if test="$type != ''">
					<xsl:value-of select="$type"/><xsl:text> </xsl:text>
				</xsl:if> -->
				<xsl:value-of select="*[local-name() = 'docidentifier'][not(@type = 'metanorma') and not(@type = 'metanorma-ordinal')]"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="processPersonalAuthor">
		<xsl:choose>
			<xsl:when test="*[local-name() = 'name']/*[local-name() = 'completename']">
				<author>
					<xsl:apply-templates select="*[local-name() = 'name']/*[local-name() = 'completename']"/>
				</author>
			</xsl:when>
			<xsl:when test="*[local-name() = 'name']/*[local-name() = 'surname'] and *[local-name() = 'name']/*[local-name() = 'initial']">
				<author>
					<xsl:apply-templates select="*[local-name() = 'name']/*[local-name() = 'surname']"/>
					<xsl:text> </xsl:text>
					<xsl:apply-templates select="*[local-name() = 'name']/*[local-name() = 'initial']" mode="strip"/>
				</author>
			</xsl:when>
			<xsl:when test="*[local-name() = 'name']/*[local-name() = 'surname'] and *[local-name() = 'name']/*[local-name() = 'forename']">
				<author>
					<xsl:apply-templates select="*[local-name() = 'name']/*[local-name() = 'surname']"/>
					<xsl:text> </xsl:text>
					<xsl:apply-templates select="*[local-name() = 'name']/*[local-name() = 'forename']" mode="strip"/>
				</author>
			</xsl:when>
			<xsl:otherwise>
				<xsl:apply-templates/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="renderDate">		
			<xsl:if test="normalize-space(*[local-name() = 'on']) != ''">
				<xsl:value-of select="*[local-name() = 'on']"/>
			</xsl:if>
			<xsl:if test="normalize-space(*[local-name() = 'from']) != ''">
				<xsl:value-of select="concat(*[local-name() = 'from'], 'â', *[local-name() = 'to'])"/>
			</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'name']/*[local-name() = 'initial']/text()" mode="strip">
		<xsl:value-of select="translate(.,'. ','')"/>
	</xsl:template><xsl:template match="*[local-name() = 'name']/*[local-name() = 'forename']/text()" mode="strip">
		<xsl:value-of select="substring(.,1,1)"/>
	</xsl:template><xsl:template match="*[local-name() = 'title']" mode="title">
		<fo:inline><xsl:apply-templates/></fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'bibitem']/*[local-name() = 'title']" priority="2">
		<!-- <fo:inline><xsl:apply-templates /></fo:inline> -->
		<fo:inline font-style="italic"> <!-- BIPM BSI CSD CSA GB IEC IHO ISO ITU JCGM -->
			<xsl:apply-templates/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'bibitem']/*[local-name() = 'note']" priority="2">
	
		<!-- list of footnotes to calculate actual footnotes number -->
		<xsl:variable name="p_fn_">
			<xsl:call-template name="get_fn_list"/>
		</xsl:variable>
		<xsl:variable name="p_fn" select="xalan:nodeset($p_fn_)"/>
		<xsl:variable name="gen_id" select="generate-id(.)"/>
		<xsl:variable name="lang" select="ancestor::*[contains(local-name(), '-standard')]/*[local-name()='bibdata']//*[local-name()='language'][@current = 'true']"/>
		<!-- fn sequence number in document -->
		<xsl:variable name="current_fn_number">
			<xsl:choose>
				<xsl:when test="@current_fn_number"><xsl:value-of select="@current_fn_number"/></xsl:when> <!-- for BSI -->
				<xsl:otherwise>
					<!-- <xsl:value-of select="count($p_fn//fn[@reference = $reference]/preceding-sibling::fn) + 1" /> -->
					<xsl:value-of select="count($p_fn//fn[@gen_id = $gen_id]/preceding-sibling::fn) + 1"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<fo:footnote>
			<xsl:variable name="number">
				
						<xsl:choose>
							<xsl:when test="ancestor::*[local-name() = 'references'][preceding-sibling::*[local-name() = 'references']]">
								<xsl:number level="any" count="*[local-name() = 'references'][preceding-sibling::*[local-name() = 'references']]//*[local-name() = 'bibitem']/*[local-name() = 'note']"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="$current_fn_number"/>
							</xsl:otherwise>
						</xsl:choose>
					
			</xsl:variable>
			
			<xsl:variable name="current_fn_number_text">
				<xsl:value-of select="$number"/>
				
			</xsl:variable>
			
			<fo:inline xsl:use-attribute-sets="bibitem-note-fn-style">
				<fo:basic-link internal-destination="{$gen_id}" fox:alt-text="footnote {$number}">
					<xsl:value-of select="$current_fn_number_text"/>
				</fo:basic-link>
			</fo:inline>
			<fo:footnote-body>
				<fo:block xsl:use-attribute-sets="bibitem-note-fn-body-style">
					<fo:inline id="{$gen_id}" xsl:use-attribute-sets="bibitem-note-fn-number-style">
						<xsl:value-of select="$current_fn_number_text"/>
					</fo:inline>
					<xsl:apply-templates/>
				</fo:block>
			</fo:footnote-body>
		</fo:footnote>
	</xsl:template><xsl:template match="*[local-name() = 'bibitem']/*[local-name() = 'edition']"> <!-- for iho -->
		<xsl:text> edition </xsl:text>
		<xsl:value-of select="."/>
	</xsl:template><xsl:template match="*[local-name() = 'bibitem']/*[local-name() = 'uri']"> <!-- for iho -->
		<xsl:text> (</xsl:text>
		<fo:inline xsl:use-attribute-sets="link-style">
			<fo:basic-link external-destination="." fox:alt-text=".">
				<xsl:value-of select="."/>							
			</fo:basic-link>
		</fo:inline>
		<xsl:text>)</xsl:text>
	</xsl:template><xsl:template match="*[local-name() = 'bibitem']/*[local-name() = 'docidentifier']"/><xsl:template match="*[local-name() = 'formattedref']">
		
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name() = 'form']">
		<fo:block>
			<xsl:apply-templates/>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'form']//*[local-name() = 'label']">
		<fo:inline><xsl:apply-templates/></fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'form']//*[local-name() = 'input'][@type = 'text' or @type = 'date' or @type = 'file' or @type = 'password']">
		<fo:inline>
			<xsl:call-template name="text_input"/>
		</fo:inline>
	</xsl:template><xsl:template name="text_input">
		<xsl:variable name="count">
			<xsl:choose>
				<xsl:when test="normalize-space(@maxlength) != ''"><xsl:value-of select="@maxlength"/></xsl:when>
				<xsl:when test="normalize-space(@size) != ''"><xsl:value-of select="@size"/></xsl:when>
				<xsl:otherwise>10</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:call-template name="repeat">
			<xsl:with-param name="char" select="'_'"/>
			<xsl:with-param name="count" select="$count"/>
		</xsl:call-template>
		<xsl:text> </xsl:text>
	</xsl:template><xsl:template match="*[local-name() = 'form']//*[local-name() = 'input'][@type = 'button']">
		<xsl:variable name="caption">
			<xsl:choose>
				<xsl:when test="normalize-space(@value) != ''"><xsl:value-of select="@value"/></xsl:when>
				<xsl:otherwise>BUTTON</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<fo:inline>[<xsl:value-of select="$caption"/>]</fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'form']//*[local-name() = 'input'][@type = 'checkbox']">
		<fo:inline padding-right="1mm">
			<fo:instream-foreign-object fox:alt-text="Box" baseline-shift="-10%">
				<xsl:attribute name="height">3.5mm</xsl:attribute>
				<xsl:attribute name="content-width">100%</xsl:attribute>
				<xsl:attribute name="content-width">scale-down-to-fit</xsl:attribute>
				<xsl:attribute name="scaling">uniform</xsl:attribute>
				<svg xmlns="http://www.w3.org/2000/svg" width="80" height="80">
					<polyline points="0,0 80,0 80,80 0,80 0,0" stroke="black" stroke-width="5" fill="white"/>
				</svg>
			</fo:instream-foreign-object>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'form']//*[local-name() = 'input'][@type = 'radio']">
		<fo:inline padding-right="1mm">
			<fo:instream-foreign-object fox:alt-text="Box" baseline-shift="-10%">
				<xsl:attribute name="height">3.5mm</xsl:attribute>
				<xsl:attribute name="content-width">100%</xsl:attribute>
				<xsl:attribute name="content-width">scale-down-to-fit</xsl:attribute>
				<xsl:attribute name="scaling">uniform</xsl:attribute>
				<svg xmlns="http://www.w3.org/2000/svg" width="80" height="80">
					<circle cx="40" cy="40" r="30" stroke="black" stroke-width="5" fill="white"/>
					<circle cx="40" cy="40" r="15" stroke="black" stroke-width="5" fill="white"/>
				</svg>
			</fo:instream-foreign-object>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'form']//*[local-name() = 'select']">
		<fo:inline>
			<xsl:call-template name="text_input"/>
		</fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'form']//*[local-name() = 'textarea']">
		<fo:block-container border="1pt solid black" width="50%">
			<fo:block>Â </fo:block>
		</fo:block-container>
	</xsl:template><xsl:variable name="toc_level">
		<!-- https://www.metanorma.org/author/ref/document-attributes/ -->
		<xsl:variable name="htmltoclevels" select="normalize-space(//*[local-name() = 'misc-container']/*[local-name() = 'presentation-metadata'][*[local-name() = 'name']/text() = 'HTML TOC Heading Levels']/*[local-name() = 'value'])"/> <!-- :htmltoclevels  Number of table of contents levels to render in HTML/PDF output; used to override :toclevels:-->
		<xsl:variable name="toclevels" select="normalize-space(//*[local-name() = 'misc-container']/*[local-name() = 'presentation-metadata'][*[local-name() = 'name']/text() = 'TOC Heading Levels']/*[local-name() = 'value'])"/> <!-- Number of table of contents levels to render -->
		<xsl:choose>
			<xsl:when test="$htmltoclevels != ''"><xsl:value-of select="number($htmltoclevels)"/></xsl:when> <!-- if there is value in xml -->
			<xsl:when test="$toclevels != ''"><xsl:value-of select="number($toclevels)"/></xsl:when>  <!-- if there is value in xml -->
			<xsl:otherwise><!-- default value -->
				2
			</xsl:otherwise>
		</xsl:choose>
	</xsl:variable><xsl:template match="*[local-name() = 'toc']">
		<xsl:param name="colwidths"/>
		<xsl:variable name="colwidths_">
			<xsl:choose>
				<xsl:when test="not($colwidths)">
					<xsl:variable name="toc_table_simple">
						<tbody>
							<xsl:apply-templates mode="toc_table_width"/>
						</tbody>
					</xsl:variable>
					<xsl:variable name="cols-count" select="count(xalan:nodeset($toc_table_simple)/*/tr[1]/td)"/>
					<xsl:call-template name="calculate-column-widths">
						<xsl:with-param name="cols-count" select="$cols-count"/>
						<xsl:with-param name="table" select="$toc_table_simple"/>
					</xsl:call-template>
				</xsl:when>
				<xsl:otherwise>
					<xsl:copy-of select="$colwidths"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<fo:block role="TOCI" space-after="16pt">
			<fo:table width="100%" table-layout="fixed">
				<xsl:for-each select="xalan:nodeset($colwidths_)/column">
					<fo:table-column column-width="proportional-column-width({.})"/>
				</xsl:for-each>
				<fo:table-body>
					<xsl:apply-templates/>
				</fo:table-body>
			</fo:table>
		</fo:block>
	</xsl:template><xsl:template match="*[local-name() = 'toc']//*[local-name() = 'li']" priority="2">
		<fo:table-row min-height="5mm">
			<xsl:apply-templates/>
		</fo:table-row>
	</xsl:template><xsl:template match="*[local-name() = 'toc']//*[local-name() = 'li']/*[local-name() = 'p']">
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name() = 'toc']//*[local-name() = 'xref']" priority="3">
		<!-- <xref target="cgpm9th1948r6">1.6.3<tab/>&#8220;9th CGPM, 1948:<tab/>decision to establish the SI&#8221;</xref> -->
		<xsl:variable name="target" select="@target"/>
		<xsl:for-each select="*[local-name() = 'tab']">
			<xsl:variable name="current_id" select="generate-id()"/>
			<fo:table-cell>
				<fo:block>
					<fo:basic-link internal-destination="{$target}" fox:alt-text="{.}">
						<xsl:for-each select="following-sibling::node()[not(self::*[local-name() = 'tab']) and preceding-sibling::*[local-name() = 'tab'][1][generate-id() = $current_id]]">
							<xsl:choose>
								<xsl:when test="self::text()"><xsl:value-of select="."/></xsl:when>
								<xsl:otherwise><xsl:apply-templates select="."/></xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</fo:basic-link>
				</fo:block>
			</fo:table-cell>
		</xsl:for-each>
		<!-- last column - for page numbers -->
		<fo:table-cell text-align="right" font-size="10pt" font-weight="bold" font-family="Arial">
			<fo:block>
				<fo:basic-link internal-destination="{$target}" fox:alt-text="{.}">
					<fo:page-number-citation ref-id="{$target}"/>
				</fo:basic-link>
			</fo:block>
		</fo:table-cell>
	</xsl:template><xsl:template match="*" mode="toc_table_width">
		<xsl:apply-templates mode="toc_table_width"/>
	</xsl:template><xsl:template match="*[local-name() = 'clause'][@type = 'toc']/*[local-name() = 'title']" mode="toc_table_width"/><xsl:template match="*[local-name() = 'clause'][not(@type = 'toc')]/*[local-name() = 'title']" mode="toc_table_width"/><xsl:template match="*[local-name() = 'li']" mode="toc_table_width">
		<tr>
			<xsl:apply-templates mode="toc_table_width"/>
		</tr>
	</xsl:template><xsl:template match="*[local-name() = 'xref']" mode="toc_table_width">
		<!-- <xref target="cgpm9th1948r6">1.6.3<tab/>&#8220;9th CGPM, 1948:<tab/>decision to establish the SI&#8221;</xref> -->
		<xsl:for-each select="*[local-name() = 'tab']">
			<xsl:variable name="current_id" select="generate-id()"/>
			<td>
				<xsl:for-each select="following-sibling::node()[not(self::*[local-name() = 'tab']) and preceding-sibling::*[local-name() = 'tab'][1][generate-id() = $current_id]]">
					<xsl:copy-of select="."/>
				</xsl:for-each>
			</td>
		</xsl:for-each>
		<td>333</td> <!-- page number, just for fill -->
	</xsl:template><xsl:template match="*[local-name() = 'variant-title']"/><xsl:template match="*[local-name() = 'variant-title'][@type = 'sub']" mode="subtitle">
		<fo:inline padding-right="5mm">Â </fo:inline>
		<fo:inline><xsl:apply-templates/></fo:inline>
	</xsl:template><xsl:template match="*[local-name() = 'blacksquare']" name="blacksquare">
		<fo:inline padding-right="2.5mm" baseline-shift="5%">
			<fo:instream-foreign-object content-height="2mm" content-width="2mm" fox:alt-text="Quad">
					<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" viewBox="0 0 2 2">
						<rect x="0" y="0" width="2" height="2" fill="black"/>
					</svg>
				</fo:instream-foreign-object>	
		</fo:inline>
	</xsl:template><xsl:template match="@language">
		<xsl:copy-of select="."/>
	</xsl:template><xsl:template match="*[local-name() = 'p'][@type = 'floating-title' or @type = 'section-title']" priority="4">
		<xsl:call-template name="title"/>
	</xsl:template><xsl:template match="*[local-name() = 'admonition']">
		
		
		
		
		
		 <!-- text in the box -->
				<fo:block-container id="{@id}" xsl:use-attribute-sets="admonition-style">
					
					
					
					
				
					
					
							<fo:block-container xsl:use-attribute-sets="admonition-container-style">
							
								
							
								
										<fo:block xsl:use-attribute-sets="admonition-name-style">
											<xsl:call-template name="displayAdmonitionName"/>
										</fo:block>
										<fo:block xsl:use-attribute-sets="admonition-p-style">
											<xsl:apply-templates select="node()[not(local-name() = 'name')]"/>
										</fo:block>
									
							</fo:block-container>
						
				</fo:block-container>
			
	</xsl:template><xsl:template name="displayAdmonitionName">
		<xsl:param name="sep"/> <!-- Example: ' - ' -->
		<!-- <xsl:choose>
			<xsl:when test="$namespace = 'nist-cswp' or $namespace = 'nist-sp'">
				<xsl:choose>
					<xsl:when test="@type='important'"><xsl:apply-templates select="@type"/></xsl:when>
					<xsl:otherwise>
						<xsl:apply-templates select="*[local-name() = 'name']"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:apply-templates select="*[local-name() = 'name']"/>
				<xsl:if test="not(*[local-name() = 'name'])">
					<xsl:apply-templates select="@type"/>
				</xsl:if>
			</xsl:otherwise>
		</xsl:choose> -->
		<xsl:variable name="name">
			<xsl:apply-templates select="*[local-name() = 'name']"/>
		</xsl:variable>
		<xsl:copy-of select="$name"/>
		<xsl:if test="normalize-space($name) != ''">
			<xsl:value-of select="$sep"/>
		</xsl:if>
	</xsl:template><xsl:template match="*[local-name() = 'admonition']/*[local-name() = 'name']">
		<xsl:apply-templates/>
	</xsl:template><xsl:template match="*[local-name() = 'admonition']/*[local-name() = 'p']">
		
				<fo:block xsl:use-attribute-sets="admonition-p-style">
				
					
					
					<xsl:apply-templates/>
				</fo:block>
			
	</xsl:template><xsl:template match="@*|node()" mode="update_xml_step1">
		<xsl:copy>
			<xsl:apply-templates select="@*|node()" mode="update_xml_step1"/>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'preface']" mode="update_xml_step1">
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			
			<xsl:variable name="nodes_preface_">
				<xsl:for-each select="*">
					<node id="{@id}"/>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="nodes_preface" select="xalan:nodeset($nodes_preface_)"/>
			
			<xsl:for-each select="*">
				<xsl:sort select="@displayorder" data-type="number"/>
				
				<!-- process Section's title -->
				<xsl:variable name="preceding-sibling_id" select="$nodes_preface/node[@id = current()/@id]/preceding-sibling::node[1]/@id"/>
				<xsl:if test="$preceding-sibling_id != ''">
					<xsl:apply-templates select="parent::*/*[@type = 'section-title' and @id = $preceding-sibling_id and not(@displayorder)]" mode="update_xml_step1"/>
				</xsl:if>
				
				<xsl:choose>
					<xsl:when test="@type = 'section-title' and not(@displayorder)"><!-- skip, don't copy, because copied in above 'apply-templates' --></xsl:when>
					<xsl:otherwise>
						<xsl:apply-templates select="." mode="update_xml_step1"/>
					</xsl:otherwise>
				</xsl:choose>
				
			</xsl:for-each>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'sections']" mode="update_xml_step1">
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			
			<xsl:variable name="nodes_sections_">
				<xsl:for-each select="*">
					<node id="{@id}"/>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="nodes_sections" select="xalan:nodeset($nodes_sections_)"/>
			
			<!-- move section 'Normative references' inside 'sections' -->
			<xsl:for-each select="* |      ancestor::*[contains(local-name(), '-standard')]/*[local-name()='bibliography']/*[local-name()='references'][@normative='true'] |     ancestor::*[contains(local-name(), '-standard')]/*[local-name()='bibliography']/*[local-name()='clause'][*[local-name()='references'][@normative='true']]">
				<xsl:sort select="@displayorder" data-type="number"/>
				
				<!-- process Section's title -->
				<xsl:variable name="preceding-sibling_id" select="$nodes_sections/node[@id = current()/@id]/preceding-sibling::node[1]/@id"/>
				<xsl:if test="$preceding-sibling_id != ''">
					<xsl:apply-templates select="parent::*/*[@type = 'section-title' and @id = $preceding-sibling_id and not(@displayorder)]" mode="update_xml_step1"/>
				</xsl:if>
				
				<xsl:choose>
					<xsl:when test="@type = 'section-title' and not(@displayorder)"><!-- skip, don't copy, because copied in above 'apply-templates' --></xsl:when>
					<xsl:otherwise>
						<xsl:apply-templates select="." mode="update_xml_step1"/>
					</xsl:otherwise>
				</xsl:choose>
				
			</xsl:for-each>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'bibliography']" mode="update_xml_step1">
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<!-- copy all elements from bibliography except 'Normative references' (moved to 'sections') -->
			<xsl:for-each select="*[not(@normative='true') and not(*[@normative='true'])]">
				<xsl:sort select="@displayorder" data-type="number"/>
				<xsl:apply-templates select="." mode="update_xml_step1"/>
			</xsl:for-each>
		</xsl:copy>
	</xsl:template><xsl:template match="*[local-name() = 'span']" mode="update_xml_step1">
		<xsl:apply-templates mode="update_xml_step1"/>
	</xsl:template><xsl:template match="@*|node()" mode="update_xml_enclose_keep-together_within-line">
		<xsl:copy>
			<xsl:apply-templates select="@*|node()" mode="update_xml_enclose_keep-together_within-line"/>
		</xsl:copy>
	</xsl:template><xsl:variable name="express_reference_separators">_.\</xsl:variable><xsl:variable name="express_reference_characters" select="concat($upper,$lower,'1234567890',$express_reference_separators)"/><xsl:variable name="element_name_keep-together_within-line">keep-together_within-line</xsl:variable><xsl:template match="text()[not(ancestor::*[local-name() = 'bibdata'] or ancestor::*[local-name() = 'sourcecode'] or ancestor::*[local-name() = 'math'])]" name="keep_together_standard_number" mode="update_xml_enclose_keep-together_within-line">
	
		<!-- enclose standard's number into tag 'keep-together_within-line' -->
		<xsl:variable name="regex_standard_reference">([A-Z]{2,}(/[A-Z]{2,})* \d+(-\d+)*(:\d{4})?)</xsl:variable>
		<xsl:variable name="tag_keep-together_within-line_open">###<xsl:value-of select="$element_name_keep-together_within-line"/>###</xsl:variable>
		<xsl:variable name="tag_keep-together_within-line_close">###/<xsl:value-of select="$element_name_keep-together_within-line"/>###</xsl:variable>
		<xsl:variable name="text_" select="java:replaceAll(java:java.lang.String.new(.),$regex_standard_reference,concat($tag_keep-together_within-line_open,'$1',$tag_keep-together_within-line_close))"/>
		<xsl:variable name="text"><text><xsl:call-template name="replace_text_tags">
				<xsl:with-param name="tag_open" select="$tag_keep-together_within-line_open"/>
				<xsl:with-param name="tag_close" select="$tag_keep-together_within-line_close"/>
				<xsl:with-param name="text" select="$text_"/>
			</xsl:call-template></text></xsl:variable>
		
		<xsl:variable name="parent" select="local-name(..)"/>
		
		<xsl:variable name="text2">
			<text><xsl:for-each select="xalan:nodeset($text)/text/node()">
					<xsl:copy-of select="."/>
				</xsl:for-each></text>
		</xsl:variable>
		
		<!-- keep-together_within-line for: a/b, aaa/b, a/bbb, /b -->
		<xsl:variable name="regex_solidus_units">((\b((\S{1,3}\/\S+)|(\S+\/\S{1,3}))\b)|(\/\S{1,3})\b)</xsl:variable>
		<xsl:variable name="text3">
			<text><xsl:for-each select="xalan:nodeset($text2)/text/node()">
				<xsl:choose>
					<xsl:when test="self::text()">
						<xsl:variable name="text_units_" select="java:replaceAll(java:java.lang.String.new(.),$regex_solidus_units,concat($tag_keep-together_within-line_open,'$1',$tag_keep-together_within-line_close))"/>
						<xsl:variable name="text_units"><text><xsl:call-template name="replace_text_tags">
							<xsl:with-param name="tag_open" select="$tag_keep-together_within-line_open"/>
							<xsl:with-param name="tag_close" select="$tag_keep-together_within-line_close"/>
							<xsl:with-param name="text" select="$text_units_"/>
						</xsl:call-template></text></xsl:variable>
						<xsl:copy-of select="xalan:nodeset($text_units)/text/node()"/>
					</xsl:when>
					<xsl:otherwise><xsl:copy-of select="."/></xsl:otherwise> <!-- copy 'as-is' for <fo:inline keep-together.within-line="always" ...  -->
				</xsl:choose>
			</xsl:for-each></text>
		</xsl:variable>
		
		<xsl:choose>
			<xsl:when test="ancestor::*[local-name() = 'td' or local-name() = 'th']">
				<!-- keep-together_within-line for: a.b, aaa.b, a.bbb, .b  in table's cell ONLY -->
				<xsl:variable name="regex_dots_units">((\b((\S{1,3}\.\S+)|(\S+\.\S{1,3}))\b)|(\.\S{1,3})\b)</xsl:variable>
				<xsl:for-each select="xalan:nodeset($text3)/text/node()">
					<xsl:choose>
						<xsl:when test="self::text()">
							<xsl:variable name="text_dots_" select="java:replaceAll(java:java.lang.String.new(.),$regex_dots_units,concat($tag_keep-together_within-line_open,'$1',$tag_keep-together_within-line_close))"/>
							<xsl:variable name="text_dots"><text><xsl:call-template name="replace_text_tags">
								<xsl:with-param name="tag_open" select="$tag_keep-together_within-line_open"/>
								<xsl:with-param name="tag_close" select="$tag_keep-together_within-line_close"/>
								<xsl:with-param name="text" select="$text_dots_"/>
							</xsl:call-template></text></xsl:variable>
							<xsl:copy-of select="xalan:nodeset($text_dots)/text/node()"/>
						</xsl:when>
						<xsl:otherwise><xsl:copy-of select="."/></xsl:otherwise> <!-- copy 'as-is' for <fo:inline keep-together.within-line="always" ...  -->
					</xsl:choose>
				</xsl:for-each>
			</xsl:when>
			<xsl:otherwise><xsl:copy-of select="xalan:nodeset($text3)/text/node()"/></xsl:otherwise>
		</xsl:choose>
		
	</xsl:template><xsl:template name="replace_text_tags">
		<xsl:param name="tag_open"/>
		<xsl:param name="tag_close"/>
		<xsl:param name="text"/>
		<xsl:choose>
			<xsl:when test="contains($text, $tag_open)">
				<xsl:value-of select="substring-before($text, $tag_open)"/>
				<xsl:variable name="text_after" select="substring-after($text, $tag_open)"/>
				
				<xsl:element name="{substring-before(substring-after($tag_open, '###'),'###')}">
					<xsl:value-of select="substring-before($text_after, $tag_close)"/>
				</xsl:element>
				
				<xsl:call-template name="replace_text_tags">
					<xsl:with-param name="tag_open" select="$tag_open"/>
					<xsl:with-param name="tag_close" select="$tag_close"/>
					<xsl:with-param name="text" select="substring-after($text_after, $tag_close)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise><xsl:value-of select="$text"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*[local-name() = 'lang_none']">
		<fo:inline xml:lang="none"><xsl:value-of select="."/></fo:inline>
	</xsl:template><xsl:template name="printEdition">
		<xsl:variable name="edition_i18n" select="normalize-space((//*[contains(local-name(), '-standard')])[1]/*[local-name() = 'bibdata']/*[local-name() = 'edition'][normalize-space(@language) != ''])"/>
		<xsl:text>Â </xsl:text>
		<xsl:choose>
			<xsl:when test="$edition_i18n != ''">
				<!-- Example: <edition language="fr">deuxiÃ¨me Ã©dition</edition> -->
				<xsl:call-template name="capitalize">
					<xsl:with-param name="str" select="$edition_i18n"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="edition" select="normalize-space((//*[contains(local-name(), '-standard')])[1]/*[local-name() = 'bibdata']/*[local-name() = 'edition'])"/>
				<xsl:if test="$edition != ''"> <!-- Example: 1.3 -->
					<xsl:call-template name="capitalize">
						<xsl:with-param name="str">
							<xsl:call-template name="getLocalizedString">
								<xsl:with-param name="key">edition</xsl:with-param>
							</xsl:call-template>
						</xsl:with-param>
					</xsl:call-template>
					<xsl:text> </xsl:text>
					<xsl:value-of select="$edition"/>
				</xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="convertDate">
		<xsl:param name="date"/>
		<xsl:param name="format" select="'short'"/>
		<xsl:variable name="year" select="substring($date, 1, 4)"/>
		<xsl:variable name="month" select="substring($date, 6, 2)"/>
		<xsl:variable name="day" select="substring($date, 9, 2)"/>
		<xsl:variable name="monthStr">
			<xsl:call-template name="getMonthByNum">
				<xsl:with-param name="num" select="$month"/>
				<xsl:with-param name="lowercase" select="'true'"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="monthStr_localized">
			<xsl:if test="normalize-space($monthStr) != ''"><xsl:call-template name="getLocalizedString"><xsl:with-param name="key">month_<xsl:value-of select="$monthStr"/></xsl:with-param></xsl:call-template></xsl:if>
		</xsl:variable>
		<xsl:variable name="result">
			<xsl:choose>
				<xsl:when test="$format = 'ddMMyyyy'"> <!-- convert date from format 2007-04-01 to 1 April 2007 -->
					<xsl:if test="$day != ''"><xsl:value-of select="number($day)"/></xsl:if>
					<xsl:text> </xsl:text>
					<xsl:value-of select="normalize-space(concat($monthStr_localized, ' ' , $year))"/>
				</xsl:when>
				<xsl:when test="$format = 'ddMM'">
					<xsl:if test="$day != ''"><xsl:value-of select="number($day)"/></xsl:if>
					<xsl:text> </xsl:text><xsl:value-of select="$monthStr_localized"/>
				</xsl:when>
				<xsl:when test="$format = 'short' or $day = ''">
					<xsl:value-of select="normalize-space(concat($monthStr_localized, ' ', $year))"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="normalize-space(concat($monthStr_localized, ' ', $day, ', ' , $year))"/> <!-- January 01, 2022 -->
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:value-of select="$result"/>
	</xsl:template><xsl:template name="getMonthByNum">
		<xsl:param name="num"/>
		<xsl:param name="lang">en</xsl:param>
		<xsl:param name="lowercase">false</xsl:param> <!-- return 'january' instead of 'January' -->
		<xsl:variable name="monthStr_">
			<xsl:choose>
				<xsl:when test="$lang = 'fr'">
					<xsl:choose>
						<xsl:when test="$num = '01'">Janvier</xsl:when>
						<xsl:when test="$num = '02'">FÃ©vrier</xsl:when>
						<xsl:when test="$num = '03'">Mars</xsl:when>
						<xsl:when test="$num = '04'">Avril</xsl:when>
						<xsl:when test="$num = '05'">Mai</xsl:when>
						<xsl:when test="$num = '06'">Juin</xsl:when>
						<xsl:when test="$num = '07'">Juillet</xsl:when>
						<xsl:when test="$num = '08'">AoÃ»t</xsl:when>
						<xsl:when test="$num = '09'">Septembre</xsl:when>
						<xsl:when test="$num = '10'">Octobre</xsl:when>
						<xsl:when test="$num = '11'">Novembre</xsl:when>
						<xsl:when test="$num = '12'">DÃ©cembre</xsl:when>
					</xsl:choose>
				</xsl:when>
				<xsl:otherwise>
					<xsl:choose>
						<xsl:when test="$num = '01'">January</xsl:when>
						<xsl:when test="$num = '02'">February</xsl:when>
						<xsl:when test="$num = '03'">March</xsl:when>
						<xsl:when test="$num = '04'">April</xsl:when>
						<xsl:when test="$num = '05'">May</xsl:when>
						<xsl:when test="$num = '06'">June</xsl:when>
						<xsl:when test="$num = '07'">July</xsl:when>
						<xsl:when test="$num = '08'">August</xsl:when>
						<xsl:when test="$num = '09'">September</xsl:when>
						<xsl:when test="$num = '10'">October</xsl:when>
						<xsl:when test="$num = '11'">November</xsl:when>
						<xsl:when test="$num = '12'">December</xsl:when>
					</xsl:choose>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="normalize-space($lowercase) = 'true'">
				<xsl:value-of select="java:toLowerCase(java:java.lang.String.new($monthStr_))"/>
			</xsl:when>
			<xsl:otherwise><xsl:value-of select="$monthStr_"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="getMonthLocalizedByNum">
		<xsl:param name="num"/>
		<xsl:variable name="monthStr">
			<xsl:choose>
				<xsl:when test="$num = '01'">january</xsl:when>
				<xsl:when test="$num = '02'">february</xsl:when>
				<xsl:when test="$num = '03'">march</xsl:when>
				<xsl:when test="$num = '04'">april</xsl:when>
				<xsl:when test="$num = '05'">may</xsl:when>
				<xsl:when test="$num = '06'">june</xsl:when>
				<xsl:when test="$num = '07'">july</xsl:when>
				<xsl:when test="$num = '08'">august</xsl:when>
				<xsl:when test="$num = '09'">september</xsl:when>
				<xsl:when test="$num = '10'">october</xsl:when>
				<xsl:when test="$num = '11'">november</xsl:when>
				<xsl:when test="$num = '12'">december</xsl:when>
			</xsl:choose>
		</xsl:variable>
		<xsl:call-template name="getLocalizedString">
			<xsl:with-param name="key">month_<xsl:value-of select="$monthStr"/></xsl:with-param>
		</xsl:call-template>
	</xsl:template><xsl:template name="insertKeywords">
		<xsl:param name="sorting" select="'true'"/>
		<xsl:param name="charAtEnd" select="'.'"/>
		<xsl:param name="charDelim" select="', '"/>
		<xsl:choose>
			<xsl:when test="$sorting = 'true' or $sorting = 'yes'">
				<xsl:for-each select="//*[contains(local-name(), '-standard')]/*[local-name() = 'bibdata']//*[local-name() = 'keyword']">
					<xsl:sort data-type="text" order="ascending"/>
					<xsl:call-template name="insertKeyword">
						<xsl:with-param name="charAtEnd" select="$charAtEnd"/>
						<xsl:with-param name="charDelim" select="$charDelim"/>
					</xsl:call-template>
				</xsl:for-each>
			</xsl:when>
			<xsl:otherwise>
				<xsl:for-each select="//*[contains(local-name(), '-standard')]/*[local-name() = 'bibdata']//*[local-name() = 'keyword']">
					<xsl:call-template name="insertKeyword">
						<xsl:with-param name="charAtEnd" select="$charAtEnd"/>
						<xsl:with-param name="charDelim" select="$charDelim"/>
					</xsl:call-template>
				</xsl:for-each>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="insertKeyword">
		<xsl:param name="charAtEnd"/>
		<xsl:param name="charDelim"/>
		<xsl:apply-templates/>
		<xsl:choose>
			<xsl:when test="position() != last()"><xsl:value-of select="$charDelim"/></xsl:when>
			<xsl:otherwise><xsl:value-of select="$charAtEnd"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="addPDFUAmeta">
		<pdf:catalog xmlns:pdf="http://xmlgraphics.apache.org/fop/extensions/pdf">
				<pdf:dictionary type="normal" key="ViewerPreferences">
					<pdf:boolean key="DisplayDocTitle">true</pdf:boolean>
				</pdf:dictionary>
			</pdf:catalog>
		<x:xmpmeta xmlns:x="adobe:ns:meta/">
			<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
				<rdf:Description xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:pdf="http://ns.adobe.com/pdf/1.3/" rdf:about="">
				<!-- Dublin Core properties go here -->
					<dc:title>
						<xsl:variable name="title">
							<xsl:for-each select="(//*[contains(local-name(), '-standard')])[1]/*[local-name() = 'bibdata']">
																
										<xsl:value-of select="*[local-name() = 'title'][@language = $lang]"/>
									
							</xsl:for-each>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="normalize-space($title) != ''">
								<xsl:value-of select="$title"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:text>Â </xsl:text>
							</xsl:otherwise>
						</xsl:choose>							
					</dc:title>
					<dc:creator>
						<xsl:for-each select="(//*[contains(local-name(), '-standard')])[1]/*[local-name() = 'bibdata']">
							
									<xsl:for-each select="*[local-name() = 'contributor'][*[local-name() = 'role']/@type='author']">
										<xsl:value-of select="*[local-name() = 'organization']/*[local-name() = 'name']"/>
										<xsl:if test="position() != last()">; </xsl:if>
									</xsl:for-each>
								
						</xsl:for-each>
					</dc:creator>
					<dc:description>
						<xsl:variable name="abstract">
							
									<xsl:copy-of select="//*[contains(local-name(), '-standard')]/*[local-name() = 'preface']/*[local-name() = 'abstract']//text()[not(ancestor::*[local-name() = 'title'])]"/>									
								
						</xsl:variable>
						<xsl:value-of select="normalize-space($abstract)"/>
					</dc:description>
					<pdf:Keywords>
						<xsl:call-template name="insertKeywords"/>
					</pdf:Keywords>
				</rdf:Description>
				<rdf:Description xmlns:xmp="http://ns.adobe.com/xap/1.0/" rdf:about="">
					<!-- XMP properties go here -->
					<xmp:CreatorTool/>
				</rdf:Description>
			</rdf:RDF>
		</x:xmpmeta>
	</xsl:template><xsl:template name="getId">
		<xsl:choose>
			<xsl:when test="../@id">
				<xsl:value-of select="../@id"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(generate-id(..), '_', text())"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="getLevel">
		<xsl:param name="depth"/>
		<xsl:choose>
			<xsl:when test="normalize-space(@depth) != ''">
				<xsl:value-of select="@depth"/>
			</xsl:when>
			<xsl:when test="normalize-space($depth) != ''">
				<xsl:value-of select="$depth"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="level_total" select="count(ancestor::*)"/>
				<xsl:variable name="level">
					<xsl:choose>
						<xsl:when test="parent::*[local-name() = 'preface']">
							<xsl:value-of select="$level_total - 1"/>
						</xsl:when>
						<xsl:when test="ancestor::*[local-name() = 'preface'] and not(ancestor::*[local-name() = 'foreword']) and not(ancestor::*[local-name() = 'introduction'])"> <!-- for preface/clause -->
							<xsl:value-of select="$level_total - 1"/>
						</xsl:when>
						<xsl:when test="ancestor::*[local-name() = 'preface']">
							<xsl:value-of select="$level_total - 2"/>
						</xsl:when>
						<xsl:when test="ancestor::*[local-name() = 'sections']">
							<xsl:value-of select="$level_total - 1"/>
						</xsl:when>
						<xsl:when test="ancestor::*[local-name() = 'bibliography']">
							<xsl:value-of select="$level_total - 1"/>
						</xsl:when>
						<xsl:when test="parent::*[local-name() = 'annex']">
							<xsl:value-of select="$level_total - 1"/>
						</xsl:when>
						<xsl:when test="ancestor::*[local-name() = 'annex']">
							<xsl:value-of select="$level_total"/>
						</xsl:when>
						<xsl:when test="local-name() = 'annex'">1</xsl:when>
						<xsl:when test="local-name(ancestor::*[1]) = 'annex'">1</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="$level_total - 1"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:value-of select="$level"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="getLevelTermName">
		<xsl:choose>
			<xsl:when test="normalize-space(../@depth) != ''">
				<xsl:value-of select="../@depth"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="title_level_">
					<xsl:for-each select="../preceding-sibling::*[local-name() = 'title'][1]">
						<xsl:call-template name="getLevel"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="title_level" select="normalize-space($title_level_)"/>
				<xsl:choose>
					<xsl:when test="$title_level != ''"><xsl:value-of select="$title_level + 1"/></xsl:when>
					<xsl:otherwise>
						<xsl:call-template name="getLevel"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="split">
		<xsl:param name="pText" select="."/>
		<xsl:param name="sep" select="','"/>
		<xsl:param name="normalize-space" select="'true'"/>
		<xsl:param name="keep_sep" select="'false'"/>
		<xsl:if test="string-length($pText) &gt;0">
			<item>
				<xsl:choose>
					<xsl:when test="$normalize-space = 'true'">
						<xsl:value-of select="normalize-space(substring-before(concat($pText, $sep), $sep))"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="substring-before(concat($pText, $sep), $sep)"/>
					</xsl:otherwise>
				</xsl:choose>
			</item>
			<xsl:if test="$keep_sep = 'true' and contains($pText, $sep)"><item><xsl:value-of select="$sep"/></item></xsl:if>
			<xsl:call-template name="split">
				<xsl:with-param name="pText" select="substring-after($pText, $sep)"/>
				<xsl:with-param name="sep" select="$sep"/>
				<xsl:with-param name="normalize-space" select="$normalize-space"/>
				<xsl:with-param name="keep_sep" select="$keep_sep"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template><xsl:template name="getDocumentId">		
		<xsl:call-template name="getLang"/><xsl:value-of select="//*[local-name() = 'p'][1]/@id"/>
	</xsl:template><xsl:template name="namespaceCheck">
		<xsl:variable name="documentNS" select="namespace-uri(/*)"/>
		<xsl:variable name="XSLNS">			
			
			
			
			
			
			
			
			
			
				<xsl:value-of select="document('')//*/namespace::rsd"/>
			
			
			
			
						
			
			
			
			
		</xsl:variable>
		<xsl:if test="$documentNS != $XSLNS">
			<xsl:message>[WARNING]: Document namespace: '<xsl:value-of select="$documentNS"/>' doesn't equal to xslt namespace '<xsl:value-of select="$XSLNS"/>'</xsl:message>
		</xsl:if>
	</xsl:template><xsl:template name="getLanguage">
		<xsl:param name="lang"/>		
		<xsl:variable name="language" select="java:toLowerCase(java:java.lang.String.new($lang))"/>
		<xsl:choose>
			<xsl:when test="$language = 'en'">English</xsl:when>
			<xsl:when test="$language = 'fr'">French</xsl:when>
			<xsl:when test="$language = 'de'">Deutsch</xsl:when>
			<xsl:when test="$language = 'cn'">Chinese</xsl:when>
			<xsl:otherwise><xsl:value-of select="$language"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="setId">
		<xsl:attribute name="id">
			<xsl:choose>
				<xsl:when test="@id">
					<xsl:value-of select="@id"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="generate-id()"/>
				</xsl:otherwise>
			</xsl:choose>					
		</xsl:attribute>
	</xsl:template><xsl:template name="add-letter-spacing">
		<xsl:param name="text"/>
		<xsl:param name="letter-spacing" select="'0.15'"/>
		<xsl:if test="string-length($text) &gt; 0">
			<xsl:variable name="char" select="substring($text, 1, 1)"/>
			<fo:inline padding-right="{$letter-spacing}mm">
				<xsl:if test="$char = 'Â®'">
					<xsl:attribute name="font-size">58%</xsl:attribute>
					<xsl:attribute name="baseline-shift">30%</xsl:attribute>
				</xsl:if>				
				<xsl:value-of select="$char"/>
			</fo:inline>
			<xsl:call-template name="add-letter-spacing">
				<xsl:with-param name="text" select="substring($text, 2)"/>
				<xsl:with-param name="letter-spacing" select="$letter-spacing"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template><xsl:template name="repeat">
		<xsl:param name="char" select="'*'"/>
		<xsl:param name="count"/>
		<xsl:if test="$count &gt; 0">
			<xsl:value-of select="$char"/>
			<xsl:call-template name="repeat">
				<xsl:with-param name="char" select="$char"/>
				<xsl:with-param name="count" select="$count - 1"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template><xsl:template name="getLocalizedString">
		<xsl:param name="key"/>
		<xsl:param name="formatted">false</xsl:param>
		<xsl:param name="lang"/>
		<xsl:param name="returnEmptyIfNotFound">false</xsl:param>
		
		<xsl:variable name="curr_lang">
			<xsl:choose>
				<xsl:when test="$lang != ''"><xsl:value-of select="$lang"/></xsl:when>
				<xsl:when test="$returnEmptyIfNotFound = 'true'"/>
				<xsl:otherwise>
					<xsl:call-template name="getLang"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:variable name="data_value">
			<xsl:choose>
				<xsl:when test="$formatted = 'true'">
					<xsl:apply-templates select="xalan:nodeset($bibdata)//*[local-name() = 'localized-string'][@key = $key and @language = $curr_lang]"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="normalize-space(xalan:nodeset($bibdata)//*[local-name() = 'localized-string'][@key = $key and @language = $curr_lang])"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<xsl:choose>
			<xsl:when test="normalize-space($data_value) != ''">
				<xsl:choose>
					<xsl:when test="$formatted = 'true'"><xsl:copy-of select="$data_value"/></xsl:when>
					<xsl:otherwise><xsl:value-of select="$data_value"/></xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="/*/*[local-name() = 'localized-strings']/*[local-name() = 'localized-string'][@key = $key and @language = $curr_lang]">
				<xsl:choose>
					<xsl:when test="$formatted = 'true'">
						<xsl:apply-templates select="/*/*[local-name() = 'localized-strings']/*[local-name() = 'localized-string'][@key = $key and @language = $curr_lang]"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="/*/*[local-name() = 'localized-strings']/*[local-name() = 'localized-string'][@key = $key and @language = $curr_lang]"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="$returnEmptyIfNotFound = 'true'"/>
			<xsl:otherwise>
				<xsl:variable name="key_">
					<xsl:call-template name="capitalize">
						<xsl:with-param name="str" select="translate($key, '_', ' ')"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="$key_"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="setTrackChangesStyles">
		<xsl:param name="isAdded"/>
		<xsl:param name="isDeleted"/>
		<xsl:choose>
			<xsl:when test="local-name() = 'math'">
				<xsl:if test="$isAdded = 'true'">
					<xsl:attribute name="background-color"><xsl:value-of select="$color-added-text"/></xsl:attribute>
				</xsl:if>
				<xsl:if test="$isDeleted = 'true'">
					<xsl:attribute name="background-color"><xsl:value-of select="$color-deleted-text"/></xsl:attribute>
				</xsl:if>
			</xsl:when>
			<xsl:otherwise>
				<xsl:if test="$isAdded = 'true'">
					<xsl:attribute name="border"><xsl:value-of select="$border-block-added"/></xsl:attribute>
					<xsl:attribute name="padding">2mm</xsl:attribute>
				</xsl:if>
				<xsl:if test="$isDeleted = 'true'">
					<xsl:attribute name="border"><xsl:value-of select="$border-block-deleted"/></xsl:attribute>
					<xsl:if test="local-name() = 'table'">
						<xsl:attribute name="background-color">rgb(255, 185, 185)</xsl:attribute>
					</xsl:if>
					<xsl:attribute name="padding">2mm</xsl:attribute>
				</xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:variable name="LRM" select="'â'"/><xsl:variable name="RLM" select="'â'"/><xsl:template name="setWritingMode">
		<xsl:if test="$lang = 'ar'">
			<xsl:attribute name="writing-mode">rl-tb</xsl:attribute>
		</xsl:if>
	</xsl:template><xsl:template name="setAlignment">
		<xsl:param name="align" select="normalize-space(@align)"/>
		<xsl:choose>
			<xsl:when test="$lang = 'ar' and $align = 'left'">start</xsl:when>
			<xsl:when test="$lang = 'ar' and $align = 'right'">end</xsl:when>
			<xsl:when test="$align != ''">
				<xsl:value-of select="$align"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template><xsl:template name="setTextAlignment">
		<xsl:param name="default">left</xsl:param>
		<xsl:variable name="align" select="normalize-space(@align)"/>
		<xsl:attribute name="text-align">
			<xsl:choose>
				<xsl:when test="$lang = 'ar' and $align = 'left'">start</xsl:when>
				<xsl:when test="$lang = 'ar' and $align = 'right'">end</xsl:when>
				<xsl:when test="$align != '' and not($align = 'indent')"><xsl:value-of select="$align"/></xsl:when>
				<xsl:when test="ancestor::*[local-name() = 'td']/@align"><xsl:value-of select="ancestor::*[local-name() = 'td']/@align"/></xsl:when>
				<xsl:when test="ancestor::*[local-name() = 'th']/@align"><xsl:value-of select="ancestor::*[local-name() = 'th']/@align"/></xsl:when>
				<xsl:otherwise><xsl:value-of select="$default"/></xsl:otherwise>
			</xsl:choose>
		</xsl:attribute>
		<xsl:if test="$align = 'indent'">
			<xsl:attribute name="margin-left">7mm</xsl:attribute>
		</xsl:if>
	</xsl:template><xsl:template name="number-to-words">
		<xsl:param name="number"/>
		<xsl:param name="first"/>
		<xsl:if test="$number != ''">
			<xsl:variable name="words">
				<words>
					<xsl:choose>
						<xsl:when test="$lang = 'fr'"> <!-- https://en.wiktionary.org/wiki/Appendix:French_numbers -->
							<word cardinal="1">Une-</word>
							<word ordinal="1">PremiÃ¨re </word>
							<word cardinal="2">Deux-</word>
							<word ordinal="2">Seconde </word>
							<word cardinal="3">Trois-</word>
							<word ordinal="3">Tierce </word>
							<word cardinal="4">Quatre-</word>
							<word ordinal="4">QuatriÃ¨me </word>
							<word cardinal="5">Cinq-</word>
							<word ordinal="5">CinquiÃ¨me </word>
							<word cardinal="6">Six-</word>
							<word ordinal="6">SixiÃ¨me </word>
							<word cardinal="7">Sept-</word>
							<word ordinal="7">SeptiÃ¨me </word>
							<word cardinal="8">Huit-</word>
							<word ordinal="8">HuitiÃ¨me </word>
							<word cardinal="9">Neuf-</word>
							<word ordinal="9">NeuviÃ¨me </word>
							<word ordinal="10">DixiÃ¨me </word>
							<word ordinal="11">OnziÃ¨me </word>
							<word ordinal="12">DouziÃ¨me </word>
							<word ordinal="13">TreiziÃ¨me </word>
							<word ordinal="14">QuatorziÃ¨me </word>
							<word ordinal="15">QuinziÃ¨me </word>
							<word ordinal="16">SeiziÃ¨me </word>
							<word ordinal="17">Dix-septiÃ¨me </word>
							<word ordinal="18">Dix-huitiÃ¨me </word>
							<word ordinal="19">Dix-neuviÃ¨me </word>
							<word cardinal="20">Vingt-</word>
							<word ordinal="20">VingtiÃ¨me </word>
							<word cardinal="30">Trente-</word>
							<word ordinal="30">TrentiÃ¨me </word>
							<word cardinal="40">Quarante-</word>
							<word ordinal="40">QuarantiÃ¨me </word>
							<word cardinal="50">Cinquante-</word>
							<word ordinal="50">CinquantiÃ¨me </word>
							<word cardinal="60">Soixante-</word>
							<word ordinal="60">SoixantiÃ¨me </word>
							<word cardinal="70">Septante-</word>
							<word ordinal="70">SeptantiÃ¨me </word>
							<word cardinal="80">Huitante-</word>
							<word ordinal="80">HuitantiÃ¨me </word>
							<word cardinal="90">Nonante-</word>
							<word ordinal="90">NonantiÃ¨me </word>
							<word cardinal="100">Cent-</word>
							<word ordinal="100">CentiÃ¨me </word>
						</xsl:when>
						<xsl:when test="$lang = 'ru'">
							<word cardinal="1">ÐÐ´Ð½Ð°-</word>
							<word ordinal="1">ÐÐµÑÐ²Ð¾Ðµ </word>
							<word cardinal="2">ÐÐ²Ðµ-</word>
							<word ordinal="2">ÐÑÐ¾ÑÐ¾Ðµ </word>
							<word cardinal="3">Ð¢ÑÐ¸-</word>
							<word ordinal="3">Ð¢ÑÐµÑÑÐµ </word>
							<word cardinal="4">Ð§ÐµÑÑÑÐµ-</word>
							<word ordinal="4">Ð§ÐµÑÐ²ÐµÑÑÐ¾Ðµ </word>
							<word cardinal="5">ÐÑÑÑ-</word>
							<word ordinal="5">ÐÑÑÐ¾Ðµ </word>
							<word cardinal="6">Ð¨ÐµÑÑÑ-</word>
							<word ordinal="6">Ð¨ÐµÑÑÐ¾Ðµ </word>
							<word cardinal="7">Ð¡ÐµÐ¼Ñ-</word>
							<word ordinal="7">Ð¡ÐµÐ´ÑÐ¼Ð¾Ðµ </word>
							<word cardinal="8">ÐÐ¾ÑÐµÐ¼Ñ-</word>
							<word ordinal="8">ÐÐ¾ÑÑÐ¼Ð¾Ðµ </word>
							<word cardinal="9">ÐÐµÐ²ÑÑÑ-</word>
							<word ordinal="9">ÐÐµÐ²ÑÑÐ¾Ðµ </word>
							<word ordinal="10">ÐÐµÑÑÑÐ¾Ðµ </word>
							<word ordinal="11">ÐÐ´Ð¸Ð½Ð½Ð°Ð´ÑÐ°ÑÐ¾Ðµ </word>
							<word ordinal="12">ÐÐ²ÐµÐ½Ð°Ð´ÑÐ°ÑÐ¾Ðµ </word>
							<word ordinal="13">Ð¢ÑÐ¸Ð½Ð°Ð´ÑÐ°ÑÐ¾Ðµ </word>
							<word ordinal="14">Ð§ÐµÑÑÑÐ½Ð°Ð´ÑÐ°ÑÐ¾Ðµ </word>
							<word ordinal="15">ÐÑÑÐ½Ð°Ð´ÑÐ°ÑÐ¾Ðµ </word>
							<word ordinal="16">Ð¨ÐµÑÑÐ½Ð°Ð´ÑÐ°ÑÐ¾Ðµ </word>
							<word ordinal="17">Ð¡ÐµÐ¼Ð½Ð°Ð´ÑÐ°ÑÐ¾Ðµ </word>
							<word ordinal="18">ÐÐ¾ÑÐµÐ¼Ð½Ð°Ð´ÑÐ°ÑÐ¾Ðµ </word>
							<word ordinal="19">ÐÐµÐ²ÑÑÐ½Ð°Ð´ÑÐ°ÑÐ¾Ðµ </word>
							<word cardinal="20">ÐÐ²Ð°Ð´ÑÐ°ÑÑ-</word>
							<word ordinal="20">ÐÐ²Ð°Ð´ÑÐ°ÑÐ¾Ðµ </word>
							<word cardinal="30">Ð¢ÑÐ¸Ð´ÑÐ°ÑÑ-</word>
							<word ordinal="30">Ð¢ÑÐ¸Ð´ÑÐ°ÑÐ¾Ðµ </word>
							<word cardinal="40">Ð¡Ð¾ÑÐ¾Ðº-</word>
							<word ordinal="40">Ð¡Ð¾ÑÐ¾ÐºÐ¾Ð²Ð¾Ðµ </word>
							<word cardinal="50">ÐÑÑÑÐ´ÐµÑÑÑ-</word>
							<word ordinal="50">ÐÑÑÐ¸Ð´ÐµÑÑÑÐ¾Ðµ </word>
							<word cardinal="60">Ð¨ÐµÑÑÑÐ´ÐµÑÑÑ-</word>
							<word ordinal="60">Ð¨ÐµÑÑÐ¸Ð´ÐµÑÑÑÐ¾Ðµ </word>
							<word cardinal="70">Ð¡ÐµÐ¼ÑÐ´ÐµÑÑÑ-</word>
							<word ordinal="70">Ð¡ÐµÐ¼Ð¸Ð´ÐµÑÑÑÐ¾Ðµ </word>
							<word cardinal="80">ÐÐ¾ÑÐµÐ¼ÑÐ´ÐµÑÑÑ-</word>
							<word ordinal="80">ÐÐ¾ÑÑÐ¼Ð¸Ð´ÐµÑÑÑÐ¾Ðµ </word>
							<word cardinal="90">ÐÐµÐ²ÑÐ½Ð¾ÑÑÐ¾-</word>
							<word ordinal="90">ÐÐµÐ²ÑÐ½Ð¾ÑÑÐ¾Ðµ </word>
							<word cardinal="100">Ð¡ÑÐ¾-</word>
							<word ordinal="100">Ð¡Ð¾ÑÐ¾Ðµ </word>
						</xsl:when>
						<xsl:otherwise> <!-- default english -->
							<word cardinal="1">One-</word>
							<word ordinal="1">First </word>
							<word cardinal="2">Two-</word>
							<word ordinal="2">Second </word>
							<word cardinal="3">Three-</word>
							<word ordinal="3">Third </word>
							<word cardinal="4">Four-</word>
							<word ordinal="4">Fourth </word>
							<word cardinal="5">Five-</word>
							<word ordinal="5">Fifth </word>
							<word cardinal="6">Six-</word>
							<word ordinal="6">Sixth </word>
							<word cardinal="7">Seven-</word>
							<word ordinal="7">Seventh </word>
							<word cardinal="8">Eight-</word>
							<word ordinal="8">Eighth </word>
							<word cardinal="9">Nine-</word>
							<word ordinal="9">Ninth </word>
							<word ordinal="10">Tenth </word>
							<word ordinal="11">Eleventh </word>
							<word ordinal="12">Twelfth </word>
							<word ordinal="13">Thirteenth </word>
							<word ordinal="14">Fourteenth </word>
							<word ordinal="15">Fifteenth </word>
							<word ordinal="16">Sixteenth </word>
							<word ordinal="17">Seventeenth </word>
							<word ordinal="18">Eighteenth </word>
							<word ordinal="19">Nineteenth </word>
							<word cardinal="20">Twenty-</word>
							<word ordinal="20">Twentieth </word>
							<word cardinal="30">Thirty-</word>
							<word ordinal="30">Thirtieth </word>
							<word cardinal="40">Forty-</word>
							<word ordinal="40">Fortieth </word>
							<word cardinal="50">Fifty-</word>
							<word ordinal="50">Fiftieth </word>
							<word cardinal="60">Sixty-</word>
							<word ordinal="60">Sixtieth </word>
							<word cardinal="70">Seventy-</word>
							<word ordinal="70">Seventieth </word>
							<word cardinal="80">Eighty-</word>
							<word ordinal="80">Eightieth </word>
							<word cardinal="90">Ninety-</word>
							<word ordinal="90">Ninetieth </word>
							<word cardinal="100">Hundred-</word>
							<word ordinal="100">Hundredth </word>
						</xsl:otherwise>
					</xsl:choose>
				</words>
			</xsl:variable>

			<xsl:variable name="ordinal" select="xalan:nodeset($words)//word[@ordinal = $number]/text()"/>
			
			<xsl:variable name="value">
				<xsl:choose>
					<xsl:when test="$ordinal != ''">
						<xsl:value-of select="$ordinal"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:choose>
							<xsl:when test="$number &lt; 100">
								<xsl:variable name="decade" select="concat(substring($number,1,1), '0')"/>
								<xsl:variable name="digit" select="substring($number,2)"/>
								<xsl:value-of select="xalan:nodeset($words)//word[@cardinal = $decade]/text()"/>
								<xsl:value-of select="xalan:nodeset($words)//word[@ordinal = $digit]/text()"/>
							</xsl:when>
							<xsl:otherwise>
								<!-- more 100 -->
								<xsl:variable name="hundred" select="substring($number,1,1)"/>
								<xsl:variable name="digits" select="number(substring($number,2))"/>
								<xsl:value-of select="xalan:nodeset($words)//word[@cardinal = $hundred]/text()"/>
								<xsl:value-of select="xalan:nodeset($words)//word[@cardinal = '100']/text()"/>
								<xsl:call-template name="number-to-words">
									<xsl:with-param name="number" select="$digits"/>
								</xsl:call-template>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="$first = 'true'">
					<xsl:variable name="value_lc" select="java:toLowerCase(java:java.lang.String.new($value))"/>
					<xsl:call-template name="capitalize">
						<xsl:with-param name="str" select="$value_lc"/>
					</xsl:call-template>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="$value"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>
	</xsl:template><xsl:template name="number-to-ordinal">
		<xsl:param name="number"/>
		<xsl:param name="curr_lang"/>
		<xsl:choose>
			<xsl:when test="$curr_lang = 'fr'">
				<xsl:choose>					
					<xsl:when test="$number = '1'">re</xsl:when>
					<xsl:otherwise>e</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:choose>
					<xsl:when test="$number = 1">st</xsl:when>
					<xsl:when test="$number = 2">nd</xsl:when>
					<xsl:when test="$number = 3">rd</xsl:when>
					<xsl:otherwise>th</xsl:otherwise>
				</xsl:choose>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template name="setAltText">
		<xsl:param name="value"/>
		<xsl:attribute name="fox:alt-text">
			<xsl:choose>
				<xsl:when test="normalize-space($value) != ''">
					<xsl:value-of select="$value"/>
				</xsl:when>
				<xsl:otherwise>_</xsl:otherwise>
			</xsl:choose>
		</xsl:attribute>
	</xsl:template><xsl:template name="substring-after-last">	
		<xsl:param name="value"/>
		<xsl:param name="delimiter"/>
		<xsl:choose>
			<xsl:when test="contains($value, $delimiter)">
				<xsl:call-template name="substring-after-last">
					<xsl:with-param name="value" select="substring-after($value, $delimiter)"/>
					<xsl:with-param name="delimiter" select="$delimiter"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$value"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template><xsl:template match="*" mode="print_as_xml">
		<xsl:param name="level">0</xsl:param>

		<fo:block margin-left="{2*$level}mm">
			<xsl:text>
&lt;</xsl:text>
			<xsl:value-of select="local-name()"/>
			<xsl:for-each select="@*">
				<xsl:text> </xsl:text>
				<xsl:value-of select="local-name()"/>
				<xsl:text>="</xsl:text>
				<xsl:value-of select="."/>
				<xsl:text>"</xsl:text>
			</xsl:for-each>
			<xsl:text>&gt;</xsl:text>
			
			<xsl:if test="not(*)">
				<fo:inline font-weight="bold"><xsl:value-of select="."/></fo:inline>
				<xsl:text>&lt;/</xsl:text>
					<xsl:value-of select="local-name()"/>
					<xsl:text>&gt;</xsl:text>
			</xsl:if>
		</fo:block>
		
		<xsl:if test="*">
			<fo:block>
				<xsl:apply-templates mode="print_as_xml">
					<xsl:with-param name="level" select="$level + 1"/>
				</xsl:apply-templates>
			</fo:block>
			<fo:block margin-left="{2*$level}mm">
				<xsl:text>&lt;/</xsl:text>
				<xsl:value-of select="local-name()"/>
				<xsl:text>&gt;</xsl:text>
			</fo:block>
		</xsl:if>
	</xsl:template></xsl:stylesheet>